/*
Navicat Oracle Data Transfer
Oracle Client Version : 11.2.0.4.0

Source Server         : SOPTest
Source Server Version : 100200
Source Host           : 10.145.206.4:1521
Source Schema         : TESTORDER

Target Server Type    : ORACLE
Target Server Version : 100200
File Encoding         : 65001

Date: 2019-10-25 11:00:25
*/


-- ----------------------------
-- Table structure for AUD_TEST
-- ----------------------------
DROP TABLE "TESTORDER"."AUD_TEST";
CREATE TABLE "TESTORDER"."AUD_TEST" (
"ID" NUMBER NULL ,
"TERMINAL" VARCHAR2(256 BYTE) NULL ,
"SESSIONID" VARCHAR2(256 BYTE) NULL ,
"CURRENT_USER" VARCHAR2(256 BYTE) NULL ,
"CURRENT_USERID" VARCHAR2(256 BYTE) NULL ,
"SESSION_USER" VARCHAR2(256 BYTE) NULL ,
"SESSION_USERID" VARCHAR2(256 BYTE) NULL ,
"PROXY_USER" VARCHAR2(256 BYTE) NULL ,
"PROXY_USERID" VARCHAR2(256 BYTE) NULL ,
"DB_NAME" VARCHAR2(256 BYTE) NULL ,
"HOST" VARCHAR2(256 BYTE) NULL ,
"OS_USER" VARCHAR2(256 BYTE) NULL ,
"IP_ADDRESS" VARCHAR2(256 BYTE) NULL ,
"TIME" DATE NULL ,
"DOWHAT" VARCHAR2(4000 BYTE) NULL ,
"NEWVALUE" VARCHAR2(4000 BYTE) NULL ,
"OLDVALUE" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for BILL_ACTIVENET_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_ACTIVENET_INFO";
CREATE TABLE "TESTORDER"."BILL_ACTIVENET_INFO" (
"SERIAL_ID" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(2) NULL ,
"PHONE" VARCHAR2(20 BYTE) NOT NULL ,
"CIMSI" VARCHAR2(30 BYTE) NULL ,
"GIMSI" VARCHAR2(30 BYTE) NULL ,
"ACTION_CODE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_STATUS" VARCHAR2(20 BYTE) DEFAULT 0  NOT NULL ,
"NET_STATUS" VARCHAR2(10 BYTE) DEFAULT 000  NOT NULL ,
"HLR_DESC" VARCHAR2(255 BYTE) DEFAULT SYSDATE  NULL ,
"AAA_DESC" VARCHAR2(255 BYTE) NULL ,
"ANAAA_DESC" VARCHAR2(255 BYTE) NULL ,
"RECEIVED_DATE" DATE DEFAULT SYSDATE  NOT NULL ,
"BILL_SOURCE" VARCHAR2(10 BYTE) NOT NULL ,
"GENE_DATE" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."BILL_ACTIVENET_INFO"."ORDER_STATUS" IS '1: 已处理成功；0：未处理；2：处理失败';
COMMENT ON COLUMN "TESTORDER"."BILL_ACTIVENET_INFO"."NET_STATUS" IS '三位；分别代表HLR,AAA,ANAAA，0：成功；1：失败';
COMMENT ON COLUMN "TESTORDER"."BILL_ACTIVENET_INFO"."GENE_DATE" IS '订单中时间';

-- ----------------------------
-- Table structure for BILL_ORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_ORDER_INFO";
CREATE TABLE "TESTORDER"."BILL_ORDER_INFO" (
"BILL_SOURCE" VARCHAR2(2 BYTE) NOT NULL ,
"SERIAL_ID" VARCHAR2(20 BYTE) NOT NULL ,
"VERSION" NUMBER(2) NULL ,
"STATUS" VARCHAR2(10 BYTE) NOT NULL ,
"ACTION_CODE" VARCHAR2(10 BYTE) NOT NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"PROCESS_DTS" DATE NULL ,
"OVERLOAD" CLOB NOT NULL ,
"BRQ_ID" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."BILL_ORDER_INFO"."BILL_SOURCE" IS '计费请求来源：1理想，2郎讯';
COMMENT ON COLUMN "TESTORDER"."BILL_ORDER_INFO"."ACTION_CODE" IS '请求操作类型：欠费停机，欠费复机';

-- ----------------------------
-- Table structure for BILL_PROVORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_PROVORDER_INFO";
CREATE TABLE "TESTORDER"."BILL_PROVORDER_INFO" (
"BRQ_ID" VARCHAR2(20 BYTE) NOT NULL ,
"SERIAL_ID" VARCHAR2(20 BYTE) NOT NULL ,
"BILL_SOURCE" VARCHAR2(2 BYTE) NOT NULL ,
"BILL_VERSION" VARCHAR2(20 BYTE) NULL ,
"ACTION_CODE" VARCHAR2(10 BYTE) NOT NULL ,
"PROV_ORDERID" VARCHAR2(20 BYTE) NULL ,
"PROV_ORDERHISID" VARCHAR2(20 BYTE) NULL ,
"PROV_NAMESPACE" VARCHAR2(100 BYTE) NULL ,
"PROV_SOURCE" VARCHAR2(50 BYTE) NULL ,
"PROV_TYPE" VARCHAR2(50 BYTE) NULL ,
"PROV_VERSION" VARCHAR2(20 BYTE) NULL ,
"PROV_STATUS" VARCHAR2(20 BYTE) NULL ,
"INV_STATUS" VARCHAR2(20 BYTE) NULL ,
"BILL_STATUS" VARCHAR2(20 BYTE) NOT NULL ,
"PROCESS_DTS" DATE NULL ,
"FAILURE_DESC" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for BILL_PROVORDER_PARAM
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_PROVORDER_PARAM";
CREATE TABLE "TESTORDER"."BILL_PROVORDER_PARAM" (
"BRQ_ID" VARCHAR2(20 BYTE) NOT NULL ,
"PARAM_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"PARAM_VALUE" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for BILL_SYS_CONFIG
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_SYS_CONFIG";
CREATE TABLE "TESTORDER"."BILL_SYS_CONFIG" (
"ID" VARCHAR2(50 BYTE) NOT NULL ,
"VALUE" VARCHAR2(500 BYTE) NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for BILL_SYS_CONFIG_BACKUP
-- ----------------------------
DROP TABLE "TESTORDER"."BILL_SYS_CONFIG_BACKUP";
CREATE TABLE "TESTORDER"."BILL_SYS_CONFIG_BACKUP" (
"ID" VARCHAR2(50 BYTE) NOT NULL ,
"VALUE" VARCHAR2(500 BYTE) NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for COMPANY
-- ----------------------------
DROP TABLE "TESTORDER"."COMPANY";
CREATE TABLE "TESTORDER"."COMPANY" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CRM_ACCOUNT
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_ACCOUNT";
CREATE TABLE "TESTORDER"."CRM_ACCOUNT" (
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_LINE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_TIME" DATE NULL ,
"ORDER_SEQ_ID" NUMBER(22) NULL ,
"P_SUB_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P_ACCOUNT" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."ORDER_SEQ_ID" IS '作为p_serial_no 返回';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."P_SUB_ID" IS '子产品代码';
COMMENT ON COLUMN "TESTORDER"."CRM_ACCOUNT"."P_ACCOUNT" IS '宽带帐号';

-- ----------------------------
-- Table structure for CRM_ACTIVEMENT_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO";
CREATE TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" (
"CRM_ORDER_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_VERSION" NUMBER(22) NOT NULL ,
"CRM_LINE_NUMBER" NUMBER(22) NOT NULL ,
"STATUS_TIME" DATE NOT NULL ,
"PAYMENT_FLAG" VARCHAR2(1 BYTE) NULL ,
"PROCESSED" NUMBER(1) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."PAYMENT_FLAG" IS '状态标志';
COMMENT ON COLUMN "TESTORDER"."CRM_ACTIVEMENT_INFO"."PROCESSED" IS '已处理';

-- ----------------------------
-- Table structure for CRM_AGREEMENT_AFFIRM
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM";
CREATE TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(10 BYTE) NOT NULL ,
"CRM_LINE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CONTRACT_NUM" VARCHAR2(100 BYTE) DEFAULT null  NULL ,
"USER_ID" VARCHAR2(32 BYTE) NOT NULL ,
"PROCESSED" NUMBER NULL ,
"EMPLOYEE_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_AGREEMENT_AFFIRM"."CONTRACT_NUM" IS '合同编号 （格式：主合同@子合同编号|主合同@自合同编号）';
COMMENT ON COLUMN "TESTORDER"."CRM_AGREEMENT_AFFIRM"."USER_ID" IS '对应合同类型标志，具体为：A为本地合同、B为163或长途合同、C为本地和163或长途合同';
COMMENT ON COLUMN "TESTORDER"."CRM_AGREEMENT_AFFIRM"."PROCESSED" IS '已处理标志';
COMMENT ON COLUMN "TESTORDER"."CRM_AGREEMENT_AFFIRM"."EMPLOYEE_ID" IS '工号，默认为CRM';

-- ----------------------------
-- Table structure for CRM_APPOINT_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_APPOINT_INFO";
CREATE TABLE "TESTORDER"."CRM_APPOINT_INFO" (
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_LINE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_TIME" DATE NOT NULL ,
"APPOINT_INFO" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSED" NUMBER(1) NULL ,
"P_PRODUCT_TYPE" VARCHAR2(50 BYTE) NULL ,
"P_BRAND_TYPE" VARCHAR2(50 BYTE) NULL ,
"P_OPERATION" VARCHAR2(50 BYTE) NULL ,
"P_SERIAL_NO" VARCHAR2(500 BYTE) NULL ,
"INSERT_DATE" DATE DEFAULT sysdate  NOT NULL ,
"DELAYED_FLAG" NUMBER(2) DEFAULT 0  NOT NULL ,
"P_CRM_CREATE_ORDER_TIME" VARCHAR2(50 BYTE) NULL ,
"P_FIBER_48H_FLAG" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."APPOINT_INFO" IS '预约内容（格式：yyyy-MM-dd hh24:mi-hh24:mi）';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."PROCESSED" IS '已处理';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."P_PRODUCT_TYPE" IS 'CRM产品代码';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."P_BRAND_TYPE" IS '品牌（e8,e82）';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."P_OPERATION" IS '操作类型';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."INSERT_DATE" IS '记录生成时间，默认值为sysdate';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."DELAYED_FLAG" IS 'P6 Delay任务处理标志：0=未处理，1=已处理';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."P_CRM_CREATE_ORDER_TIME" IS 'CRM建单日期';
COMMENT ON COLUMN "TESTORDER"."CRM_APPOINT_INFO"."P_FIBER_48H_FLAG" IS '光网48小时标志';

-- ----------------------------
-- Table structure for CRM_BANDWIDTH
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_BANDWIDTH";
CREATE TABLE "TESTORDER"."CRM_BANDWIDTH" (
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_LINE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_TIME" DATE NOT NULL ,
"BANDWIDTH_FLAG" VARCHAR2(50 BYTE) DEFAULT 1  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_BANDWIDTH"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_BANDWIDTH"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_BANDWIDTH"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_BANDWIDTH"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_BANDWIDTH"."BANDWIDTH_FLAG" IS '保存标志，默认1';

-- ----------------------------
-- Table structure for CRM_PAYMENT_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_PAYMENT_INFO";
CREATE TABLE "TESTORDER"."CRM_PAYMENT_INFO" (
"CRM_ORDER_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_VERSION" NUMBER(22) NOT NULL ,
"CRM_LINE_NUMBER" NUMBER(22) NOT NULL ,
"STATUS_TIME" DATE NOT NULL ,
"PAYMENT_FLAG" VARCHAR2(1 BYTE) NOT NULL ,
"PROCESSED" NUMBER(1) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."PAYMENT_FLAG" IS '收款标志';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO"."PROCESSED" IS '已处理';

-- ----------------------------
-- Table structure for CRM_PAYMENT_INFO_COPY
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY";
CREATE TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" (
"CRM_ORDER_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_VERSION" NUMBER(22) NOT NULL ,
"CRM_LINE_NUMBER" NUMBER(22) NOT NULL ,
"STATUS_TIME" TIMESTAMP(6)  NOT NULL ,
"PAYMENT_FLAG" VARCHAR2(1 BYTE) NOT NULL ,
"PROCESSED" NUMBER(1) NULL ,
"ERROR_MSG" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."PAYMENT_FLAG" IS '收款标志';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."PROCESSED" IS '已处理';
COMMENT ON COLUMN "TESTORDER"."CRM_PAYMENT_INFO_COPY"."ERROR_MSG" IS '错误信息';

-- ----------------------------
-- Table structure for CRM_START_CHARGE
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_START_CHARGE";
CREATE TABLE "TESTORDER"."CRM_START_CHARGE" (
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_LINE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"RENT_TIME" VARCHAR2(50 BYTE) NOT NULL ,
"INSERT_DATE" DATE DEFAULT SYSDATE  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CRM_WF
-- ----------------------------
DROP TABLE "TESTORDER"."CRM_WF";
CREATE TABLE "TESTORDER"."CRM_WF" (
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_LINE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_TIME" DATE NULL ,
"ORDER_SEQ_ID" NUMBER(22) NOT NULL ,
"P_DAY_TIME" DATE NOT NULL ,
"P_PRODUCT_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"P_BRAND_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"P_OPERATION" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."CRM_LINE_NUMBER" IS 'CRM行项目编号';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."STATUS_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."ORDER_SEQ_ID" IS '作为p_serial_no 返回';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."P_DAY_TIME" IS 'yyyy-mm-ddTHH24:MI:SS  GMT+08:00';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."P_PRODUCT_TYPE" IS 'CRM产品代码';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."P_BRAND_TYPE" IS '品牌（e8,e82）
';
COMMENT ON COLUMN "TESTORDER"."CRM_WF"."P_OPERATION" IS '操作类型';

-- ----------------------------
-- Table structure for CSB_LTE_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_LTE_INFO";
CREATE TABLE "TESTORDER"."CSB_LTE_INFO" (
"CUSTORDERID" VARCHAR2(32 BYTE) NULL ,
"CUSTORDERNO" VARCHAR2(64 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(64 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(64 BYTE) NOT NULL ,
"PRODINSTID" VARCHAR2(64 BYTE) NOT NULL ,
"ITEMACTIONID" VARCHAR2(32 BYTE) NULL ,
"DISPATCHFINISHDATE" VARCHAR2(32 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"DISPATCHORDERTYPE" VARCHAR2(32 BYTE) NULL ,
"CREATEDATE" VARCHAR2(32 BYTE) NULL ,
"COMMENTS" VARCHAR2(2000 BYTE) NULL ,
"CUSTINFO" CLOB NULL ,
"PRODUCTITEM" CLOB NULL ,
"PRODUCTCODE" VARCHAR2(32 BYTE) NULL ,
"ISMATCH" VARCHAR2(3 BYTE) NULL ,
"RECEIVE_DATE" DATE DEFAULT sysdate  NULL ,
"LASTCUSTORDERNO" VARCHAR2(64 BYTE) NULL ,
"CHANGETYPE" VARCHAR2(255 BYTE) NULL ,
"MSGID" VARCHAR2(64 BYTE) NULL ,
"REVISION" VARCHAR2(10 BYTE) NULL ,
"REQUESTMSG" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSB_LTE_NOTICE_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO";
CREATE TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" (
"CUSTORDERID" VARCHAR2(32 BYTE) NOT NULL ,
"PRODINSTID" VARCHAR2(32 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(32 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(50 BYTE) NULL ,
"RECEIVED_TIME" DATE NOT NULL ,
"MSGID" VARCHAR2(64 BYTE) NOT NULL ,
"SERVCODE" VARCHAR2(64 BYTE) NOT NULL ,
"CUSTORDERNO" VARCHAR2(32 BYTE) NOT NULL ,
"ANSWERDATE" VARCHAR2(32 BYTE) NULL ,
"ANSWERCODE" VARCHAR2(32 BYTE) NULL ,
"ANSWERDESC" VARCHAR2(300 BYTE) NULL ,
"OPERATERINFO" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSB_MESSAGE
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_MESSAGE";
CREATE TABLE "TESTORDER"."CSB_MESSAGE" (
"MSGID" VARCHAR2(100 BYTE) NOT NULL ,
"DISPATCHORDERNO" VARCHAR2(64 BYTE) NULL ,
"CUSTORDERNO" VARCHAR2(64 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"SERVCODE" VARCHAR2(100 BYTE) NULL ,
"XMLBACKUP" CLOB NULL ,
"RECEIVE_TIME" DATE DEFAULT sysdate  NULL ,
"JTORDERTYPE" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."MSGID" IS 'EsbRoute.MsgId';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."DISPATCHORDERNO" IS '调度单流水号';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."CUSTORDERNO" IS '客户订单流水号';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."SERVCODE" IS 'EsbRoute.ServCode “集团退单回复”、“调测通知”、“全程报竣通知”
不同的接口调用SOP服务时的【服务编码】不一样';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."XMLBACKUP" IS '整个xml文件';
COMMENT ON COLUMN "TESTORDER"."CSB_MESSAGE"."JTORDERTYPE" IS '2019042110-调单；2019042111-用户侧施工单；2019042112 -资源核查单;otn预通知';

-- ----------------------------
-- Table structure for CSB_NOTICE_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_NOTICE_INFO";
CREATE TABLE "TESTORDER"."CSB_NOTICE_INFO" (
"CUSTORDERID" VARCHAR2(32 BYTE) NOT NULL ,
"DISPATCHORDERNO" VARCHAR2(64 BYTE) NOT NULL ,
"PRODINSTID" VARCHAR2(32 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(32 BYTE) NOT NULL ,
"STATUSTYPE" VARCHAR2(50 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(50 BYTE) NOT NULL ,
"RECEIVED_TIME" DATE DEFAULT SYSDATE  NOT NULL ,
"MSGID" VARCHAR2(64 BYTE) NOT NULL ,
"SERVCODE" VARCHAR2(32 BYTE) NULL ,
"CUSTORDERNO" VARCHAR2(50 BYTE) NULL ,
"BCMODE" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."CUSTORDERID" IS '客户订单标识  DispatchOrderBrief.CustOrderID';
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."DISPATCHORDERNO" IS 'DispatchOrderBrief.DispatchOrderNO';
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."PRODINSTID" IS 'ProductItem.ProdInstID';
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."PRODUCTITEMID" IS 'ProductItem.ProductItemID';
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."STATUSTYPE" IS '2011102001--调测通知
2011102002--全程报竣通知
9--集团退回回复，由SOP自行设置';
COMMENT ON COLUMN "TESTORDER"."CSB_NOTICE_INFO"."WORKORDERID" IS '集团服务开通的工单ID，作为同一个电路跟省(A或者Z端)多次交互的唯一标志';

-- ----------------------------
-- Table structure for CSB_ORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_ORDER_INFO";
CREATE TABLE "TESTORDER"."CSB_ORDER_INFO" (
"DISPATCHORDERID" VARCHAR2(32 BYTE) NULL ,
"DISPATCHORDERNO" VARCHAR2(64 BYTE) NOT NULL ,
"CUSTORDERID" VARCHAR2(32 BYTE) NULL ,
"CUSTORDERNO" VARCHAR2(64 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(64 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(64 BYTE) NOT NULL ,
"PRODINSTID" VARCHAR2(64 BYTE) NOT NULL ,
"ITEMACTIONID" VARCHAR2(32 BYTE) NULL ,
"DISPATCHFINISHDATE" VARCHAR2(32 BYTE) NULL ,
"CIRCUITCODE" VARCHAR2(100 BYTE) NULL ,
"CIRCUITNAME" VARCHAR2(255 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"DISPATCHORDERTYPE" VARCHAR2(32 BYTE) NULL ,
"CREATEDATE" VARCHAR2(32 BYTE) NULL ,
"COMMENTS" VARCHAR2(2000 BYTE) NULL ,
"STAFFINFOS" CLOB NULL ,
"CONTACTS" CLOB NULL ,
"DISPATCHREQUEST" CLOB NULL ,
"AUTHINFO" CLOB NULL ,
"DISPATCHORDEREXTATTRS" CLOB NULL ,
"CUSTINFO" CLOB NULL ,
"PRODUCTITEM" CLOB NULL ,
"PRODUCTINSTRELS" CLOB NULL ,
"SPRODINSTS" CLOB NULL ,
"PPRODINSTS" CLOB NULL ,
"PRODOFFERINSTS" CLOB NULL ,
"PRODUCTCODE" VARCHAR2(32 BYTE) NULL ,
"ISMATCH" VARCHAR2(3 BYTE) DEFAULT 0  NULL ,
"RECEIVE_DATE" DATE DEFAULT sysdate  NULL ,
"LASTCUSTORDERNO" VARCHAR2(64 BYTE) NULL ,
"CHANGETYPE" VARCHAR2(255 BYTE) NULL ,
"MSGID" VARCHAR2(64 BYTE) NULL ,
"REVISION" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"BCMODE" VARCHAR2(10 BYTE) NULL ,
"PRODUCTCODE_ORIG" VARCHAR2(32 BYTE) NULL ,
"JTORDERTYPE" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHORDERID" IS '调度单标识';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHORDERNO" IS '调度单流水号';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CUSTORDERID" IS '客户订单标识';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CUSTORDERNO" IS '客户订单流水号';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODUCTITEMID" IS '产品订单项标识';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."WORKORDERID" IS '集团服务开通的工单ID';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODINSTID" IS '产品实例标识';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."ITEMACTIONID" IS '产品事件';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHFINISHDATE" IS '要求完成日期';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CIRCUITCODE" IS '电路编码';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CIRCUITNAME" IS '电路名称';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHORDERTYPE" IS '调度单类型';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CREATEDATE" IS '创建时间';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."COMMENTS" IS '备注';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."STAFFINFOS" IS '集团员工信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CONTACTS" IS '客户信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHREQUEST" IS '调度要求信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."AUTHINFO" IS '授权标识';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."DISPATCHORDEREXTATTRS" IS '调度单扩展属性';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CUSTINFO" IS '客户信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODUCTITEM" IS '产品订单信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODUCTINSTRELS" IS '产品关联关系';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."SPRODINSTS" IS '附属产品信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PPRODINSTS" IS '实物产品信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODOFFERINSTS" IS '销售品信息';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODUCTCODE" IS '产品编码';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."ISMATCH" IS '匹配标志  0:未匹配
1:已匹配
9:自匹配--(变更类型：20110901001)
9:无需匹配--(变更类型：2008099025\2008099026\2008099027 记录插入时设置该值);8:WOP succ; 100:wop失败;10:资源核查不需匹配；101资源核查发wop失败';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."LASTCUSTORDERNO" IS '集团CRM的非正常变更单的客户订单流水号
只有非正常变更单才会有值';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."CHANGETYPE" IS 'ProductItem.ProductAttrs.ProductAttr.ChangeType----20110901001 内部异常变更
--非正常变更的一种，集团服开下的修订，集团CRM不下修订，关联上一版本CRM定单；
2008099025 停开(补点)
2008099025 停开(新开)
2008099026 停开(变更)
2008099027 停开(退租) 
--非正常变更的一种，无需关联CRM定单；';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."REVISION" IS '派单顺序，服开变更为0';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."PRODUCTCODE_ORIG" IS '网调类查zz,用新的返回产品，这里保存原来产品编码';
COMMENT ON COLUMN "TESTORDER"."CSB_ORDER_INFO"."JTORDERTYPE" IS '2019042110-调单；2019042111-用户侧施工单；2019042112 -资源核查单';

-- ----------------------------
-- Table structure for CSB_RELATED_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_RELATED_INFO";
CREATE TABLE "TESTORDER"."CSB_RELATED_INFO" (
"CUSTORDERNO" VARCHAR2(64 BYTE) NULL ,
"DISPATCHORDERNO" VARCHAR2(64 BYTE) DEFAULT 0  NOT NULL ,
"PRODUCTITEMID" VARCHAR2(32 BYTE) DEFAULT 0  NOT NULL ,
"PRODINSTID" VARCHAR2(32 BYTE) NOT NULL ,
"RE_CRM_ORDER_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"RE_CRM_LINE_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"RE_CRM_VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"RELATED" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"BCMODE" VARCHAR2(10 BYTE) NULL ,
"LASTCUSTORDERNO" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."CSB_RELATED_INFO"."RELATED" IS '已经关联？0,1,2  2-关联但有更高版本，导致不处理';
COMMENT ON COLUMN "TESTORDER"."CSB_RELATED_INFO"."BCMODE" IS '主备用';

-- ----------------------------
-- Table structure for CSB_TASK_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."CSB_TASK_INFO";
CREATE TABLE "TESTORDER"."CSB_TASK_INFO" (
"TASK_ID" VARCHAR2(255 BYTE) NOT NULL ,
"CUSTORDERNO" VARCHAR2(64 BYTE) NOT NULL ,
"DISPATCHORDERID" VARCHAR2(32 BYTE) NULL ,
"PRODINSTID" VARCHAR2(32 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(32 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(32 BYTE) NOT NULL ,
"STATUSTYPE" VARCHAR2(32 BYTE) NOT NULL ,
"FILEID" VARCHAR2(255 BYTE) NULL ,
"FILENAME" VARCHAR2(255 BYTE) NULL ,
"FILELOCATION" VARCHAR2(255 BYTE) NULL ,
"BCMODE" VARCHAR2(1 BYTE) NULL ,
"RECEIVED_TIME" DATE DEFAULT sysdate  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CUSTOMER
-- ----------------------------
DROP TABLE "TESTORDER"."CUSTOMER";
CREATE TABLE "TESTORDER"."CUSTOMER" (
"ID" NUMBER NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NULL ,
"COMPANY_ID" NUMBER NOT NULL ,
"SHARDING_ID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for DCOOS_NOTICE_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."DCOOS_NOTICE_INFO";
CREATE TABLE "TESTORDER"."DCOOS_NOTICE_INFO" (
"CUSTORDERID" VARCHAR2(50 BYTE) NOT NULL ,
"PRODINSTID" VARCHAR2(50 BYTE) NOT NULL ,
"PRODUCTITEMID" VARCHAR2(50 BYTE) NOT NULL ,
"STATUSTYPE" VARCHAR2(50 BYTE) NOT NULL ,
"WORKORDERID" VARCHAR2(50 BYTE) NULL ,
"RECEIVED_TIME" DATE DEFAULT SYSDATE  NULL ,
"MSGID" VARCHAR2(50 BYTE) NULL ,
"SERVCODE" VARCHAR2(50 BYTE) NULL ,
"CUSTORDERNO" VARCHAR2(50 BYTE) NULL ,
"JITUANRESINFOS" CLOB NULL ,
"PCLOUDLINKBUSIID" VARCHAR2(50 BYTE) NULL ,
"BCMODE" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."DCOOS_NOTICE_INFO"."PRODUCTITEMID" IS '智能专线---2008083001 完成;2008083002 未完成';
COMMENT ON COLUMN "TESTORDER"."DCOOS_NOTICE_INFO"."STATUSTYPE" IS '20181024011（集团开通报竣通知）;20190103002（集团CN2云专网施工报竣通知）;20181024012（集团资源分配报竣通知）;智能专线-20190626001随选节点开通报竣;20190626002端到端PING测完成
';
COMMENT ON COLUMN "TESTORDER"."DCOOS_NOTICE_INFO"."PCLOUDLINKBUSIID" IS 'SOP产生的全局ID';
COMMENT ON COLUMN "TESTORDER"."DCOOS_NOTICE_INFO"."BCMODE" IS '0,1,2 ';

-- ----------------------------
-- Table structure for IBP_PROM_PROD_CONFIG
-- ----------------------------
DROP TABLE "TESTORDER"."IBP_PROM_PROD_CONFIG";
CREATE TABLE "TESTORDER"."IBP_PROM_PROD_CONFIG" (
"PROM_NAME" VARCHAR2(50 BYTE) NULL ,
"PROM_NUM" VARCHAR2(50 BYTE) NULL ,
"PROM_TYPE" VARCHAR2(50 BYTE) NULL ,
"PROM_SUB_TYPE" VARCHAR2(50 BYTE) NULL ,
"PROD_NAME" VARCHAR2(50 BYTE) NULL ,
"PROD_NUM" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for IDC_QUERY_SCHEDULE
-- ----------------------------
DROP TABLE "TESTORDER"."IDC_QUERY_SCHEDULE";
CREATE TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" VARCHAR2(10 BYTE) NOT NULL ,
"LINE_ID" VARCHAR2(30 BYTE) NOT NULL ,
"LINE_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"AID" VARCHAR2(30 BYTE) NULL ,
"PRODUCT_CODE" VARCHAR2(30 BYTE) NULL ,
"STATUS" VARCHAR2(30 BYTE) NULL ,
"IDC_ORDER_ID" VARCHAR2(30 BYTE) NULL ,
"WORKID" VARCHAR2(50 BYTE) NULL ,
"TRANSACTIONID" VARCHAR2(50 BYTE) NULL ,
"ORDERCODE" VARCHAR2(30 BYTE) NULL ,
"ORIGIN_LINE_ID" VARCHAR2(30 BYTE) NULL ,
"ORIGIN_LINE_NUMBER" VARCHAR2(30 BYTE) NULL ,
"ORIGIN_AID" VARCHAR2(30 BYTE) NULL ,
"CREATE_DATE" DATE DEFAULT SYSDATE  NULL ,
"HAS_RECV_FINISHMSG" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"HAS_RECV_FEEDMSG" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"SCHEDULE_DATE" DATE NULL ,
"QUERY_SEND_COUNT" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"RESEND_FLAG" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"QUERY_FEEDBACK_COUNT" VARCHAR2(10 BYTE) DEFAULT 0  NULL ,
"REFEEDBACK_FLAG" VARCHAR2(10 BYTE) DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."STATUS" IS 'Processing, 会继续查询; Finished 定时器取消.  退单反馈现在不查';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."IDC_ORDER_ID" IS '发给CRM的ID';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."WORKID" IS '发给集团的ORDERID';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."TRANSACTIONID" IS '事务流水';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."ORDERCODE" IS '设备编号';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."ORIGIN_LINE_ID" IS 'crm发的LINE_ID';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."ORIGIN_LINE_NUMBER" IS 'CRM的LINE_NUMBER';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."HAS_RECV_FINISHMSG" IS '0：没收到完工；1：收到派单反馈消息';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."HAS_RECV_FEEDMSG" IS '0:没收到退单；1：收到退单';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."QUERY_SEND_COUNT" IS '查询3次，还失败重投；继续查询3次，如果中间成功置100＋原先count';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."RESEND_FLAG" IS '重投后置1，表示重投过';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."QUERY_FEEDBACK_COUNT" IS '查询3次，还失败重投；继续查询3次，如果中间成功置100＋原先count';
COMMENT ON COLUMN "TESTORDER"."IDC_QUERY_SCHEDULE"."REFEEDBACK_FLAG" IS '重投后置1，表示重投过退单反馈';

-- ----------------------------
-- Table structure for JT_CONFIG_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."JT_CONFIG_INFO";
CREATE TABLE "TESTORDER"."JT_CONFIG_INFO" (
"FIELD" VARCHAR2(30 BYTE) NOT NULL ,
"NAME" VARCHAR2(50 BYTE) NOT NULL ,
"VALUE" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_ADD_PARTITION
-- ----------------------------
DROP TABLE "TESTORDER"."LOG_ADD_PARTITION";
CREATE TABLE "TESTORDER"."LOG_ADD_PARTITION" (
"LOG_SEQ" NUMBER NULL ,
"LOG_TIME" DATE NULL ,
"TABLE_NAME" VARCHAR2(50 BYTE) NULL ,
"PARTITION_NAME" VARCHAR2(100 BYTE) NULL ,
"OLD_HIGH_VALUE" VARCHAR2(50 BYTE) NULL ,
"NEW_HIGH_VALUE" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_IBP_UPDATE_WF
-- ----------------------------
DROP TABLE "TESTORDER"."LOG_IBP_UPDATE_WF";
CREATE TABLE "TESTORDER"."LOG_IBP_UPDATE_WF" (
"TIME" DATE NULL ,
"NOTE" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_MONITOR_SESSION
-- ----------------------------
DROP TABLE "TESTORDER"."LOG_MONITOR_SESSION";
CREATE TABLE "TESTORDER"."LOG_MONITOR_SESSION" (
"USERNAME" VARCHAR2(30 BYTE) NULL ,
"COUNT" NUMBER NULL ,
"STATUS_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ORIGIN_ORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_INFO";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_INFO" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"RECEIVE_TIME" DATE NULL ,
"TOTAL_PAGE" NUMBER(22) NOT NULL ,
"HEADER_INFO" CLOB NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ORIGIN_ORDER_INFO_OLD
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"RECEIVE_TIME" DATE NULL ,
"TOTAL_PAGE" NUMBER(22) NOT NULL ,
"HEADER_INFO" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."CRM_ORDER_ID" IS '订单ID';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."VERSION" IS '版本号 ';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."RECEIVE_TIME" IS '入库时间';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."TOTAL_PAGE" IS '总页数';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_INFO_OLD"."HEADER_INFO" IS '定单头信息';

-- ----------------------------
-- Table structure for ORIGIN_ORDER_LINEITEM
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"LINE_NUMBER" NUMBER(22) NOT NULL ,
"PRODUCT_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"ACTION" VARCHAR2(30 BYTE) NOT NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NOT NULL ,
"AID" VARCHAR2(135 BYTE) NULL ,
"FROM_AID" VARCHAR2(30 BYTE) NULL ,
"CARRIER_AID" VARCHAR2(30 BYTE) NULL ,
"COMPOUND_AID" VARCHAR2(30 BYTE) NULL ,
"RECEIVE_TIME" DATE NULL ,
"LINEITEM_INFO" CLOB NULL ,
"PROMOTION_AID" VARCHAR2(30 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ORIGIN_ORDER_LINEITEM_OLD
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"LINE_NUMBER" NUMBER(22) NOT NULL ,
"PRODUCT_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"ACTION" VARCHAR2(30 BYTE) NOT NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NOT NULL ,
"AID" VARCHAR2(30 BYTE) NULL ,
"FROM_AID" VARCHAR2(30 BYTE) NULL ,
"CARRIER_AID" VARCHAR2(30 BYTE) NULL ,
"COMPOUND_AID" VARCHAR2(30 BYTE) NULL ,
"RECEIVE_TIME" DATE NULL ,
"LINEITEM_INFO" CLOB NULL ,
"PROMOTION_AID" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."CRM_ORDER_ID" IS '当前页';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."VERSION" IS '版本号 ';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."LINE_ID" IS '行项目ID';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."LINE_NUMBER" IS '行项目编号';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."PRODUCT_NAME" IS '产品名称';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."PRODUCT_CODE" IS '产品编码';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."ACTION" IS 'Action';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."SUB_ACTION" IS 'SubAction';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."AID" IS 'AssetIntegrationId';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."FROM_AID" IS 'FromAssetIntegrationId';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."CARRIER_AID" IS 'CarrierIntegrationId';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."COMPOUND_AID" IS 'CompoundParentIID';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."RECEIVE_TIME" IS '入库时间';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."LINEITEM_INFO" IS '行项目信息';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD"."PROMOTION_AID" IS '销售品集成AID';

-- ----------------------------
-- Table structure for ORIGIN_ORDER_PAGE
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_PAGE";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_PAGE" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"CURRENT_PAGE" NUMBER(22) NOT NULL ,
"RECEIVE_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_PAGE"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_PAGE"."VERSION" IS '版本号 ';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_PAGE"."CURRENT_PAGE" IS '当前页';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_ORDER_PAGE"."RECEIVE_TIME" IS '入库时间';

-- ----------------------------
-- Table structure for ORIGIN_ORDER_PAGE_NEW
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_ORDER_PAGE_NEW";
CREATE TABLE "TESTORDER"."ORIGIN_ORDER_PAGE_NEW" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"CURRENT_PAGE" NUMBER(22) NOT NULL ,
"RECEIVE_TIME" DATE NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ORIGIN_PROMOTION_LINEITEM
-- ----------------------------
DROP TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM";
CREATE TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"LINE_NUMBER" NUMBER(22) NOT NULL ,
"PROMOTION_NAME" VARCHAR2(300 BYTE) NULL ,
"PROMOTION_CODE" VARCHAR2(50 BYTE) NULL ,
"SHCTPROMSUBTYPE" VARCHAR2(30 BYTE) NOT NULL ,
"PROMOTION_NUM" VARCHAR2(30 BYTE) NULL ,
"ACTION" VARCHAR2(30 BYTE) NOT NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NOT NULL ,
"AID" VARCHAR2(30 BYTE) NOT NULL ,
"FROM_AID" VARCHAR2(30 BYTE) NULL ,
"RECEIVE_TIME" DATE NULL ,
"LINEITEM_INFO" CLOB NULL ,
"PROMOTION_AID" VARCHAR2(30 BYTE) NULL ,
"OPTPACK" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."PROMOTION_NAME" IS '营销品名称';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."PROMOTION_CODE" IS '营销品CODE';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."SHCTPROMSUBTYPE" IS '营销品类型－基础销售品，可选包，加装包等';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."PROMOTION_NUM" IS '设备号';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."PROMOTION_AID" IS '指向上层销售品，一般加装包有值';
COMMENT ON COLUMN "TESTORDER"."ORIGIN_PROMOTION_LINEITEM"."OPTPACK" IS '指向产品AID';

-- ----------------------------
-- Table structure for P6_CANCELORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_CANCELORDER_INFO";
CREATE TABLE "TESTORDER"."P6_CANCELORDER_INFO" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"LINE_NUMBER" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(32 BYTE) NULL ,
"STATUS_TIME" DATE NULL ,
"P6_ORDER_ID" VARCHAR2(32 BYTE) NOT NULL ,
"CANCEL_P6_ORDER_ID" VARCHAR2(32 BYTE) NULL ,
"FAILURE_CAUSE" VARCHAR2(200 BYTE) NULL ,
"P6_NAMESPACE" VARCHAR2(32 BYTE) NULL ,
"P6_VERSION" VARCHAR2(32 BYTE) NULL ,
"P6_SOURCE" VARCHAR2(32 BYTE) NULL ,
"P6_TYPE" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."CRM_ORDER_ID" IS '订单ID';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."LINE_ID" IS '行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."LINE_NUMBER" IS '行项目编号';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."STATUS_TIME" IS '状态改变时间';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."P6_ORDER_ID" IS '当前的P6定单编号';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."CANCEL_P6_ORDER_ID" IS '要注销的P6订单编号';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."FAILURE_CAUSE" IS '失败原因';
COMMENT ON COLUMN "TESTORDER"."P6_CANCELORDER_INFO"."P6_NAMESPACE" IS '命名空间';

-- ----------------------------
-- Table structure for P6_CONFIG_DATAMAPPING
-- ----------------------------
DROP TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING";
CREATE TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" (
"SOURCE" VARCHAR2(50 BYTE) NOT NULL ,
"TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"NAMESPACE" VARCHAR2(50 BYTE) NOT NULL ,
"FIELD_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"FROM_VALUE" VARCHAR2(256 BYTE) NOT NULL ,
"TO_VALUE" VARCHAR2(256 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"PARENT_FIELD" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."SOURCE" IS 'P6 Source';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."TYPE" IS 'P6 Type';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."NAMESPACE" IS 'P6 NAMESPACE';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."FIELD_NAME" IS '字段名称 ';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."FROM_VALUE" IS 'CRM值';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."TO_VALUE" IS 'P6值';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_DATAMAPPING"."PARENT_FIELD" IS '父字段名称';

-- ----------------------------
-- Table structure for P6_CONFIG_PRODUCT
-- ----------------------------
DROP TABLE "TESTORDER"."P6_CONFIG_PRODUCT";
CREATE TABLE "TESTORDER"."P6_CONFIG_PRODUCT" (
"PRODUCT_GROUP" VARCHAR2(2048 BYTE) NOT NULL ,
"NAMESPACE" VARCHAR2(50 BYTE) NOT NULL ,
"SOURCE" VARCHAR2(50 BYTE) NOT NULL ,
"TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"ROOT_PRODUCT" VARCHAR2(16 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."PRODUCT_GROUP" IS 'CRM产品组合';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."NAMESPACE" IS 'P6 NAMESPACE';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."SOURCE" IS 'P6 Source';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."TYPE" IS 'P6 Type';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."ROOT_PRODUCT" IS '根产品编号';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_PRODUCT"."DESCRIPTION" IS '描述';

-- ----------------------------
-- Table structure for P6_CONFIG_XSLT
-- ----------------------------
DROP TABLE "TESTORDER"."P6_CONFIG_XSLT";
CREATE TABLE "TESTORDER"."P6_CONFIG_XSLT" (
"NAMESPACE" VARCHAR2(50 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"SOURCE" VARCHAR2(50 BYTE) NOT NULL ,
"TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"XSLT_PATH" VARCHAR2(255 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_XSLT"."NAMESPACE" IS 'P6 NAMESPACE';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_XSLT"."VERSION" IS 'P6 VERSION';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_XSLT"."SOURCE" IS 'P6 Source';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_XSLT"."TYPE" IS 'P6 Type';
COMMENT ON COLUMN "TESTORDER"."P6_CONFIG_XSLT"."XSLT_PATH" IS 'XSLT_PATH';

-- ----------------------------
-- Table structure for P6_ORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_ORDER_INFO";
CREATE TABLE "TESTORDER"."P6_ORDER_INFO" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"LINE_NUMBER" NUMBER(22) NOT NULL ,
"AID" VARCHAR2(135 BYTE) NULL ,
"ATTACHED_LINE_ID" VARCHAR2(15 BYTE) NULL ,
"ATTACHED_LINE_NUMBER" NUMBER(22) NULL ,
"ATTACHED_AID" VARCHAR2(30 BYTE) NULL ,
"PRODUCT_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"ACTION" VARCHAR2(30 BYTE) NOT NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NOT NULL ,
"ROOT_LINE_ID" VARCHAR2(15 BYTE) NOT NULL ,
"ROOT_AID" VARCHAR2(130 BYTE) NOT NULL ,
"PARENT_LINE_ID" VARCHAR2(15 BYTE) NULL ,
"PARENT_AID" VARCHAR2(30 BYTE) NULL ,
"ORDER_LEVEL" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(32 BYTE) NULL ,
"STATUS_TIME" DATE NULL ,
"NOTE" VARCHAR2(32 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(32 BYTE) NULL ,
"FAILURE_CAUSE" VARCHAR2(200 BYTE) NULL ,
"P6_NAMESPACE" VARCHAR2(32 BYTE) NULL ,
"P6_VERSION" VARCHAR2(32 BYTE) NULL ,
"P6_SOURCE" VARCHAR2(32 BYTE) NULL ,
"P6_TYPE" VARCHAR2(32 BYTE) NULL ,
"P6_SYSTEM" VARCHAR2(10 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."CRM_ORDER_ID" IS '订单ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."LINE_ID" IS '行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."LINE_NUMBER" IS '行项目编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."AID" IS 'AssetIntegrationId';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ATTACHED_LINE_ID" IS '拆机行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ATTACHED_LINE_NUMBER" IS '拆机行项目编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ATTACHED_AID" IS '拆机行项目AssetIntegrationId';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."PRODUCT_NAME" IS '产品名称';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."PRODUCT_CODE" IS '产品编码';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ACTION" IS 'Action';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."SUB_ACTION" IS 'SubAction';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ROOT_LINE_ID" IS 'Root行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ROOT_AID" IS 'Root资产编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."PARENT_LINE_ID" IS 'Parent行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."PARENT_AID" IS 'Parent资产编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."ORDER_LEVEL" IS 'Level';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."STATUS_TIME" IS '状态改变时间';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."NOTE" IS '标记';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."P6_ORDER_ID" IS 'P6定单编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDER_INFO"."P6_SYSTEM" IS '1:PHS;2:CDMA;3:NONPHS;4:SDH;5:NEWSPLIT;6:TU';

-- ----------------------------
-- Table structure for P6_ORDERSET_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_ORDERSET_INFO";
CREATE TABLE "TESTORDER"."P6_ORDERSET_INFO" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NULL ,
"STATUS_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_ORDERSET_INFO"."CRM_ORDER_ID" IS '订单ID';
COMMENT ON COLUMN "TESTORDER"."P6_ORDERSET_INFO"."CRM_ORDER_NUMBER" IS '订单编号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDERSET_INFO"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."P6_ORDERSET_INFO"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."P6_ORDERSET_INFO"."STATUS_TIME" IS '状态改变时间';

-- ----------------------------
-- Table structure for P6_ORDERSET_INFO_NEW
-- ----------------------------
DROP TABLE "TESTORDER"."P6_ORDERSET_INFO_NEW";
CREATE TABLE "TESTORDER"."P6_ORDERSET_INFO_NEW" (
"CRM_ORDER_ID" VARCHAR2(15 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NULL ,
"STATUS_TIME" DATE NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for P6_PASSORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_PASSORDER_INFO";
CREATE TABLE "TESTORDER"."P6_PASSORDER_INFO" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"REVISION" NUMBER(22) NULL ,
"ACTION" VARCHAR2(50 BYTE) NULL ,
"INSERT_DATE" DATE DEFAULT SYSDATE  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for P6_SCREENORDER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_SCREENORDER_INFO";
CREATE TABLE "TESTORDER"."P6_SCREENORDER_INFO" (
"CRM_ORDER_NUMBER" VARCHAR2(32 BYTE) NOT NULL ,
"CRM_VERSION" NUMBER(22) NULL ,
"CRM_ID" VARCHAR2(15 BYTE) NULL ,
"CRM_PRODUCT" VARCHAR2(100 BYTE) NULL ,
"CRM_PRODUCT_ID" VARCHAR2(50 BYTE) NULL ,
"STATUS" VARCHAR2(30 BYTE) NULL ,
"ACTION" VARCHAR2(30 BYTE) NULL ,
"PROCESS_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."CRM_ORDER_NUMBER" IS 'CRM定单编号';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."CRM_VERSION" IS 'CRM版本号';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."CRM_ID" IS 'CRM行项目ID';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."CRM_PRODUCT" IS 'CRM产品名称';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."CRM_PRODUCT_ID" IS 'CRM产品代码';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."STATUS" IS '状态';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."ACTION" IS '处理方式';
COMMENT ON COLUMN "TESTORDER"."P6_SCREENORDER_INFO"."PROCESS_TIME" IS '入库时间';

-- ----------------------------
-- Table structure for P6_STATUS_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."P6_STATUS_INFO";
CREATE TABLE "TESTORDER"."P6_STATUS_INFO" (
"P6_ORDER_ID" VARCHAR2(32 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"MESSAGE_TYPE" VARCHAR2(32 BYTE) NOT NULL ,
"MESSAGE_TIME" DATE NOT NULL ,
"PROCESSED" NUMBER(1) NOT NULL ,
"P6_NAMESPACE" VARCHAR2(32 BYTE) NULL ,
"P6_VERSION" VARCHAR2(32 BYTE) NULL ,
"P6_SOURCE" VARCHAR2(32 BYTE) NULL ,
"P6_TYPE" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."P6_ORDER_ID" IS 'P6定单编号';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."VERSION" IS '版本号';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."MESSAGE_TYPE" IS '消息类型';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."MESSAGE_TIME" IS '保存时间';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."PROCESSED" IS '已处理';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."P6_NAMESPACE" IS 'P6 Namespace';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."P6_VERSION" IS 'P6 Version';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."P6_SOURCE" IS 'P6 Source';
COMMENT ON COLUMN "TESTORDER"."P6_STATUS_INFO"."P6_TYPE" IS 'P6 Type';

-- ----------------------------
-- Table structure for P6_STATUS_INFO_NEW
-- ----------------------------
DROP TABLE "TESTORDER"."P6_STATUS_INFO_NEW";
CREATE TABLE "TESTORDER"."P6_STATUS_INFO_NEW" (
"P6_ORDER_ID" VARCHAR2(32 BYTE) NOT NULL ,
"VERSION" NUMBER(22) NOT NULL ,
"MESSAGE_TYPE" VARCHAR2(32 BYTE) NOT NULL ,
"MESSAGE_TIME" DATE NOT NULL ,
"PROCESSED" NUMBER(1) NOT NULL ,
"P6_NAMESPACE" VARCHAR2(32 BYTE) NULL ,
"P6_VERSION" VARCHAR2(32 BYTE) NULL ,
"P6_SOURCE" VARCHAR2(32 BYTE) NULL ,
"P6_TYPE" VARCHAR2(32 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PAL_CANCEL_REQUEST
-- ----------------------------
DROP TABLE "TESTORDER"."PAL_CANCEL_REQUEST";
CREATE TABLE "TESTORDER"."PAL_CANCEL_REQUEST" (
"CRM_ORDER_NUMBER" VARCHAR2(40 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(30 BYTE) NOT NULL ,
"PRODUCT_CODE" VARCHAR2(10 BYTE) NULL ,
"ENV_FLAG" VARCHAR2(10 BYTE) NULL ,
"STATUS_TIME" DATE DEFAULT SYSDATE  NOT NULL ,
"PAL_STATUS" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PERMISSION
-- ----------------------------
DROP TABLE "TESTORDER"."PERMISSION";
CREATE TABLE "TESTORDER"."PERMISSION" (
"PERMISSION_ID" VARCHAR2(20 BYTE) NOT NULL ,
"PERMISSION_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"URL" VARCHAR2(200 BYTE) NULL ,
"PERMISSION_NOTE" VARCHAR2(100 BYTE) NULL ,
"PARENT_ID" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."PERMISSION"."PERMISSION_ID" IS '功能ID';
COMMENT ON COLUMN "TESTORDER"."PERMISSION"."PERMISSION_NAME" IS '功能名称';
COMMENT ON COLUMN "TESTORDER"."PERMISSION"."URL" IS '入口URL地址';
COMMENT ON COLUMN "TESTORDER"."PERMISSION"."PERMISSION_NOTE" IS '描述';
COMMENT ON COLUMN "TESTORDER"."PERMISSION"."PARENT_ID" IS '上级菜单ID';

-- ----------------------------
-- Table structure for PLSQL_PROFILER_DATA
-- ----------------------------
DROP TABLE "TESTORDER"."PLSQL_PROFILER_DATA";
CREATE TABLE "TESTORDER"."PLSQL_PROFILER_DATA" (
"RUNID" NUMBER NOT NULL ,
"UNIT_NUMBER" NUMBER NOT NULL ,
"LINE#" NUMBER NOT NULL ,
"TOTAL_OCCUR" NUMBER NULL ,
"TOTAL_TIME" NUMBER NULL ,
"MIN_TIME" NUMBER NULL ,
"MAX_TIME" NUMBER NULL ,
"SPARE1" NUMBER NULL ,
"SPARE2" NUMBER NULL ,
"SPARE3" NUMBER NULL ,
"SPARE4" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "TESTORDER"."PLSQL_PROFILER_DATA" IS 'Accumulated data from all profiler runs';

-- ----------------------------
-- Table structure for PLSQL_PROFILER_RUNS
-- ----------------------------
DROP TABLE "TESTORDER"."PLSQL_PROFILER_RUNS";
CREATE TABLE "TESTORDER"."PLSQL_PROFILER_RUNS" (
"RUNID" NUMBER NOT NULL ,
"RELATED_RUN" NUMBER NULL ,
"RUN_OWNER" VARCHAR2(32 BYTE) NULL ,
"RUN_DATE" DATE NULL ,
"RUN_COMMENT" VARCHAR2(2047 BYTE) NULL ,
"RUN_TOTAL_TIME" NUMBER NULL ,
"RUN_SYSTEM_INFO" VARCHAR2(2047 BYTE) NULL ,
"RUN_COMMENT1" VARCHAR2(2047 BYTE) NULL ,
"SPARE1" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "TESTORDER"."PLSQL_PROFILER_RUNS" IS 'Run-specific information for the PL/SQL profiler';

-- ----------------------------
-- Table structure for PLSQL_PROFILER_UNITS
-- ----------------------------
DROP TABLE "TESTORDER"."PLSQL_PROFILER_UNITS";
CREATE TABLE "TESTORDER"."PLSQL_PROFILER_UNITS" (
"RUNID" NUMBER NOT NULL ,
"UNIT_NUMBER" NUMBER NOT NULL ,
"UNIT_TYPE" VARCHAR2(32 BYTE) NULL ,
"UNIT_OWNER" VARCHAR2(32 BYTE) NULL ,
"UNIT_NAME" VARCHAR2(32 BYTE) NULL ,
"UNIT_TIMESTAMP" DATE NULL ,
"TOTAL_TIME" NUMBER DEFAULT 0  NOT NULL ,
"SPARE1" NUMBER NULL ,
"SPARE2" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "TESTORDER"."PLSQL_PROFILER_UNITS" IS 'Information about each library unit in a run';

-- ----------------------------
-- Table structure for PRODUCT_PROM
-- ----------------------------
DROP TABLE "TESTORDER"."PRODUCT_PROM";
CREATE TABLE "TESTORDER"."PRODUCT_PROM" (
"PRODUCT_CODE" VARCHAR2(6 BYTE) NOT NULL ,
"SHCT_PROMOTION_ID" VARCHAR2(50 BYTE) NOT NULL ,
"SHCT_PROMOTION_TYPE" VARCHAR2(50 BYTE) NULL ,
"COMMENTS" VARCHAR2(200 BYTE) NULL ,
"PROD_NAME" VARCHAR2(500 BYTE) NULL ,
"PROM_NAME" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROM_ASSET_MAPPING
-- ----------------------------
DROP TABLE "TESTORDER"."PROM_ASSET_MAPPING";
CREATE TABLE "TESTORDER"."PROM_ASSET_MAPPING" (
"PAID" VARCHAR2(30 BYTE) NOT NULL ,
"USER_ID" VARCHAR2(30 BYTE) NOT NULL ,
"AID" VARCHAR2(30 BYTE) NOT NULL ,
"PARTNUMBER" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROM_PROD_MAPPING
-- ----------------------------
DROP TABLE "TESTORDER"."PROM_PROD_MAPPING";
CREATE TABLE "TESTORDER"."PROM_PROD_MAPPING" (
"ID" NUMBER NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"PROMOTION_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PROMOTION_TYPE" VARCHAR2(50 BYTE) NULL ,
"COMMENTS" VARCHAR2(200 BYTE) NULL ,
"PROD_NAME" VARCHAR2(500 BYTE) NULL ,
"PROM_NAME" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROM_PROD_MAPPING_TEMP
-- ----------------------------
DROP TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP";
CREATE TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP" (
"ID" NUMBER NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"PROMOTION_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PROMOTION_TYPE" VARCHAR2(200 BYTE) NULL ,
"COMMENTS" VARCHAR2(200 BYTE) NULL ,
"PROD_NAME" VARCHAR2(500 BYTE) NULL ,
"PROM_NAME" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROM_PROD_MAPPING1
-- ----------------------------
DROP TABLE "TESTORDER"."PROM_PROD_MAPPING1";
CREATE TABLE "TESTORDER"."PROM_PROD_MAPPING1" (
"ID" NUMBER NOT NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"PROMOTION_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PROMOTION_TYPE" VARCHAR2(50 BYTE) NULL ,
"COMMENTS" VARCHAR2(200 BYTE) NULL ,
"PROD_NAME" VARCHAR2(500 BYTE) NULL ,
"PROM_NAME" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROMOTION_MESSAGE
-- ----------------------------
DROP TABLE "TESTORDER"."PROMOTION_MESSAGE";
CREATE TABLE "TESTORDER"."PROMOTION_MESSAGE" (
"MESSAGE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"MESSAGE_BODY" CLOB NULL ,
"RECEIVED_TIME" DATE DEFAULT SYSDATE  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROMOTION_ORDER_SENT
-- ----------------------------
DROP TABLE "TESTORDER"."PROMOTION_ORDER_SENT";
CREATE TABLE "TESTORDER"."PROMOTION_ORDER_SENT" (
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"UNIQUETRACKNUMBER" VARCHAR2(30 BYTE) NULL ,
"SENT_TIME" DATE DEFAULT sysdate  NULL ,
"SOP_ORDER" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PROMOTIONINFO
-- ----------------------------
DROP TABLE "TESTORDER"."PROMOTIONINFO";
CREATE TABLE "TESTORDER"."PROMOTIONINFO" (
"MESSAGE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(100 BYTE) NULL ,
"PHONE_NO" VARCHAR2(80 BYTE) NOT NULL ,
"ORDERID" VARCHAR2(20 BYTE) NULL ,
"GROUPIID" VARCHAR2(30 BYTE) NULL ,
"AID" VARCHAR2(30 BYTE) NULL ,
"UNIQUETRACKNUMBER" VARCHAR2(50 BYTE) NULL ,
"BUREAU" VARCHAR2(20 BYTE) NULL ,
"PARTNUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"SUBPARTNUMBER" VARCHAR2(200 BYTE) NULL ,
"ACTION" VARCHAR2(50 BYTE) NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NULL ,
"SHCTORI_PRO_CODE" VARCHAR2(50 BYTE) NULL ,
"SHCTPROMOTIONCODE" VARCHAR2(50 BYTE) NULL ,
"PROMOTIONSTARTDATE" DATE NULL ,
"PROMOTIONEXPIREDATE" DATE NULL ,
"NOTE" VARCHAR2(100 BYTE) NULL ,
"ACCEPTTIME" DATE NULL ,
"ORIGINALPROMEXPIREDATE" DATE NULL ,
"STATUS" VARCHAR2(30 BYTE) NULL ,
"RECEIVE_TIME" DATE DEFAULT sysdate  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."MESSAGE_ID" IS '等于－promotion_message的MESSAGE_ID';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."CRM_ORDER_NUMBER" IS '等于－promotion_order_sent的crm_order_number';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."PHONE_NO" IS 'serviceid2';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."ORDERID" IS '对应订单里的ID字段';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."SHCTORI_PRO_CODE" IS '原营销活动';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."SHCTPROMOTIONCODE" IS '现在营销活动';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."PROMOTIONSTARTDATE" IS '营销开始时间';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."PROMOTIONEXPIREDATE" IS '停止时间';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."NOTE" IS '保存CRM下来的OrderNumber，如PROMTIMEOVER111';
COMMENT ON COLUMN "TESTORDER"."PROMOTIONINFO"."ORIGINALPROMEXPIREDATE" IS '原营销活动结束时间';

-- ----------------------------
-- Table structure for RECEIVED_MESSAGE
-- ----------------------------
DROP TABLE "TESTORDER"."RECEIVED_MESSAGE";
CREATE TABLE "TESTORDER"."RECEIVED_MESSAGE" (
"MESSAGE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"MESSAGE_BODY" CLOB NOT NULL ,
"RECEIVED_TIME" DATE DEFAULT SYSDATE  NOT NULL ,
"MESSAGE_SOURCE" VARCHAR2(100 BYTE) DEFAULT 'UNKNOWN'  NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NULL ,
"CRM_ORDER_VERSION" NUMBER(20) NULL ,
"P6_ORDER_ID" VARCHAR2(100 BYTE) NULL ,
"P6_NAMESPACE" VARCHAR2(100 BYTE) NULL ,
"P6_TYPE" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ROLE_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."ROLE_INFO";
CREATE TABLE "TESTORDER"."ROLE_INFO" (
"ROLE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"ROLE_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"ROLE_NOTE" VARCHAR2(200 BYTE) NULL ,
"ROLE_PER" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ROLE_INFO"."ROLE_ID" IS '角色ID';
COMMENT ON COLUMN "TESTORDER"."ROLE_INFO"."ROLE_NAME" IS '角色名称';
COMMENT ON COLUMN "TESTORDER"."ROLE_INFO"."ROLE_NOTE" IS '角色描述';
COMMENT ON COLUMN "TESTORDER"."ROLE_INFO"."ROLE_PER" IS '权限';

-- ----------------------------
-- Table structure for ROLE_PERMISSION
-- ----------------------------
DROP TABLE "TESTORDER"."ROLE_PERMISSION";
CREATE TABLE "TESTORDER"."ROLE_PERMISSION" (
"ROLE_PERMISSION_ID" VARCHAR2(20 BYTE) NOT NULL ,
"ROLE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"PERMISSION_ID" VARCHAR2(20 BYTE) NOT NULL ,
"ROLE_PERMISSION_NOTE" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."ROLE_PERMISSION"."ROLE_PERMISSION_ID" IS 'ID';
COMMENT ON COLUMN "TESTORDER"."ROLE_PERMISSION"."ROLE_ID" IS '角色ID';
COMMENT ON COLUMN "TESTORDER"."ROLE_PERMISSION"."PERMISSION_ID" IS '功能ID';
COMMENT ON COLUMN "TESTORDER"."ROLE_PERMISSION"."ROLE_PERMISSION_NOTE" IS '描述';

-- ----------------------------
-- Table structure for SERVICE_ORDER_SENT
-- ----------------------------
DROP TABLE "TESTORDER"."SERVICE_ORDER_SENT";
CREATE TABLE "TESTORDER"."SERVICE_ORDER_SENT" (
"ID" NUMBER(20) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_VERSION" NUMBER(20) NOT NULL ,
"OSS_TYPE" VARCHAR2(40 BYTE) NULL ,
"OSS_NAMESPACE" VARCHAR2(30 BYTE) NULL ,
"OSS_VERSION" VARCHAR2(20 BYTE) NULL ,
"SO_SOURCE" VARCHAR2(60 BYTE) NULL ,
"SO_TYPE" VARCHAR2(60 BYTE) NULL ,
"SAVED_TIME" DATE DEFAULT sysdate  NULL ,
"SO_BODY" CLOB NOT NULL ,
"SO_VERSION" NUMBER(20) NULL ,
"P6ORDERID" VARCHAR2(30 BYTE) NULL ,
"LINENO" VARCHAR2(30 BYTE) NULL ,
"INVENTORY_REASSIGN_FLAG" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."ID" IS '主键ID（SEQ）';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."CRM_ORDER_NUMBER" IS 'CRM订单编号';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."CRM_ORDER_VERSION" IS 'CRM订单版本号';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."OSS_TYPE" IS '流程系统类型（P6-MAIN or P6-CDMA or IDC）';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."OSS_NAMESPACE" IS '流程系统命名空间';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."OSS_VERSION" IS '流程系统版本';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."SO_SOURCE" IS '服务定单来源';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."SO_TYPE" IS '服务定单类型';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."SAVED_TIME" IS '保存的时间';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."SO_BODY" IS '服务定单内容（定单体）';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."SO_VERSION" IS 'P6定单版本';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."P6ORDERID" IS 'P6定单ID';
COMMENT ON COLUMN "TESTORDER"."SERVICE_ORDER_SENT"."LINENO" IS '行项目NUMBER';

-- ----------------------------
-- Table structure for SERVICE_ORDER_SENT_PART
-- ----------------------------
DROP TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART";
CREATE TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" (
"ID" NUMBER(20) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(30 BYTE) NOT NULL ,
"CRM_ORDER_VERSION" NUMBER(20) NOT NULL ,
"OSS_TYPE" VARCHAR2(20 BYTE) NULL ,
"OSS_NAMESPACE" VARCHAR2(30 BYTE) NULL ,
"OSS_VERSION" VARCHAR2(20 BYTE) NULL ,
"SO_SOURCE" VARCHAR2(20 BYTE) NULL ,
"SO_TYPE" VARCHAR2(20 BYTE) NULL ,
"SAVED_TIME" DATE NOT NULL ,
"SO_BODY" CLOB NOT NULL ,
"SO_VERSION" NUMBER(20) NULL ,
"P6ORDERID" VARCHAR2(30 BYTE) NULL ,
"LINENO" VARCHAR2(30 BYTE) NULL ,
"INVENTORY_REASSIGN_FLAG" VARCHAR2(20 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIB000
-- ----------------------------
DROP TABLE "TESTORDER"."SIB000";
CREATE TABLE "TESTORDER"."SIB000" (
"ID" NUMBER(19) NOT NULL ,
"STREAM_ID" NUMBER(19) NOT NULL ,
"TYPE" CHAR(2 BYTE) NULL ,
"EXPIRY_TIME" NUMBER(19) NULL ,
"STRATEGY" NUMBER NULL ,
"REFERENCE" NUMBER(19) NULL ,
"CLASS_ID" NUMBER NOT NULL ,
"PRIORITY" NUMBER NULL ,
"SEQUENCE" NUMBER(19) NULL ,
"PERMANENT_ID" NUMBER NULL ,
"TEMPORARY_ID" NUMBER NULL ,
"LOCK_ID" NUMBER(19) NULL ,
"DATA_SIZE" NUMBER NOT NULL ,
"LONG_DATA" BLOB NULL ,
"XID" VARCHAR2(254 BYTE) NULL ,
"DELETED" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIB001
-- ----------------------------
DROP TABLE "TESTORDER"."SIB001";
CREATE TABLE "TESTORDER"."SIB001" (
"ID" NUMBER(19) NOT NULL ,
"STREAM_ID" NUMBER(19) NOT NULL ,
"TYPE" CHAR(2 BYTE) NULL ,
"EXPIRY_TIME" NUMBER(19) NULL ,
"STRATEGY" NUMBER NULL ,
"REFERENCE" NUMBER(19) NULL ,
"CLASS_ID" NUMBER NOT NULL ,
"PRIORITY" NUMBER NULL ,
"SEQUENCE" NUMBER(19) NULL ,
"PERMANENT_ID" NUMBER NULL ,
"TEMPORARY_ID" NUMBER NULL ,
"LOCK_ID" NUMBER(19) NULL ,
"DATA_SIZE" NUMBER NOT NULL ,
"LONG_DATA" BLOB NULL ,
"XID" VARCHAR2(254 BYTE) NULL ,
"DELETED" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIB002
-- ----------------------------
DROP TABLE "TESTORDER"."SIB002";
CREATE TABLE "TESTORDER"."SIB002" (
"ID" NUMBER(19) NOT NULL ,
"STREAM_ID" NUMBER(19) NOT NULL ,
"TYPE" CHAR(2 BYTE) NULL ,
"EXPIRY_TIME" NUMBER(19) NULL ,
"STRATEGY" NUMBER NULL ,
"REFERENCE" NUMBER(19) NULL ,
"CLASS_ID" NUMBER NOT NULL ,
"PRIORITY" NUMBER NULL ,
"SEQUENCE" NUMBER(19) NULL ,
"PERMANENT_ID" NUMBER NULL ,
"TEMPORARY_ID" NUMBER NULL ,
"LOCK_ID" NUMBER(19) NULL ,
"DATA_SIZE" NUMBER NOT NULL ,
"LONG_DATA" BLOB NULL ,
"XID" VARCHAR2(254 BYTE) NULL ,
"DELETED" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBCLASSMAP
-- ----------------------------
DROP TABLE "TESTORDER"."SIBCLASSMAP";
CREATE TABLE "TESTORDER"."SIBCLASSMAP" (
"CLASSID" NUMBER NOT NULL ,
"URI" VARCHAR2(2048 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBKEYS
-- ----------------------------
DROP TABLE "TESTORDER"."SIBKEYS";
CREATE TABLE "TESTORDER"."SIBKEYS" (
"ID" VARCHAR2(50 BYTE) NOT NULL ,
"LAST_KEY" NUMBER(19) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBLISTING
-- ----------------------------
DROP TABLE "TESTORDER"."SIBLISTING";
CREATE TABLE "TESTORDER"."SIBLISTING" (
"ID" NUMBER NOT NULL ,
"SCHEMA_NAME" VARCHAR2(10 BYTE) NULL ,
"TABLE_NAME" VARCHAR2(10 BYTE) NOT NULL ,
"TABLE_TYPE" CHAR(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBOWNER
-- ----------------------------
DROP TABLE "TESTORDER"."SIBOWNER";
CREATE TABLE "TESTORDER"."SIBOWNER" (
"ME_UUID" VARCHAR2(16 BYTE) NULL ,
"INC_UUID" VARCHAR2(16 BYTE) NULL ,
"VERSION" NUMBER NULL ,
"MIGRATION_VERSION" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBOWNERO
-- ----------------------------
DROP TABLE "TESTORDER"."SIBOWNERO";
CREATE TABLE "TESTORDER"."SIBOWNERO" (
"EMPTY_COLUMN" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SIBXACTS
-- ----------------------------
DROP TABLE "TESTORDER"."SIBXACTS";
CREATE TABLE "TESTORDER"."SIBXACTS" (
"XID" VARCHAR2(254 BYTE) NOT NULL ,
"STATE" CHAR(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SYSTEM_LOG
-- ----------------------------
DROP TABLE "TESTORDER"."SYSTEM_LOG";
CREATE TABLE "TESTORDER"."SYSTEM_LOG" (
"ID" NUMBER(20) NOT NULL ,
"CLASS_LOADER" VARCHAR2(200 BYTE) NOT NULL ,
"LOG_TIME" DATE DEFAULT sysdate  NOT NULL ,
"LOG_LEVEL" VARCHAR2(20 BYTE) NOT NULL ,
"LOG" CLOB NOT NULL ,
"LOG_TYPE" VARCHAR2(20 BYTE) DEFAULT 'Default'  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."ID" IS '主键ID';
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."CLASS_LOADER" IS '日志加载类';
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."LOG_TIME" IS '日志记录时间';
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."LOG_LEVEL" IS '日志等级(d,i,w,e)';
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."LOG" IS '日志内容';
COMMENT ON COLUMN "TESTORDER"."SYSTEM_LOG"."LOG_TYPE" IS '日志类型（待定）';

-- ----------------------------
-- Table structure for T_TEMP1
-- ----------------------------
DROP TABLE "TESTORDER"."T_TEMP1";
CREATE TABLE "TESTORDER"."T_TEMP1" (
"ID" VARCHAR2(20 BYTE) NULL ,
"NAME" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_P6_ORDER_ANALYSIS
-- ----------------------------
DROP TABLE "TESTORDER"."TEMP_P6_ORDER_ANALYSIS";
CREATE TABLE "TESTORDER"."TEMP_P6_ORDER_ANALYSIS" (
"LINE_ID" VARCHAR2(15 BYTE) NULL ,
"LINE_NUMBER" NUMBER(22) NULL ,
"AID" VARCHAR2(30 BYTE) NULL ,
"ATTACHED_LINE_ID" VARCHAR2(15 BYTE) NULL ,
"ATTACHED_LINE_NUMBER" NUMBER(22) NULL ,
"ATTACHED_AID" VARCHAR2(30 BYTE) NULL ,
"PARENT_LINE_ID" VARCHAR2(15 BYTE) NULL ,
"PARENT_AID" VARCHAR2(30 BYTE) NULL ,
"ROOT_LINE_ID" VARCHAR2(15 BYTE) NULL ,
"ROOT_AID" VARCHAR2(30 BYTE) NULL ,
"ORDER_LEVEL" NUMBER(22) NULL ,
"FROM_AID" VARCHAR2(30 BYTE) NULL ,
"CARRIER_AID" VARCHAR2(30 BYTE) NULL ,
"COMPOUND_AID" VARCHAR2(30 BYTE) NULL ,
"PRODUCT_NAME" VARCHAR2(100 BYTE) NULL ,
"PRODUCT_CODE" VARCHAR2(50 BYTE) NULL ,
"ACTION" VARCHAR2(100 BYTE) NULL ,
"SUB_ACTION" VARCHAR2(100 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."LINE_ID" IS '行项目ID';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."LINE_NUMBER" IS '行项目编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."AID" IS '资产编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ATTACHED_LINE_ID" IS '拆机行项目ID';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ATTACHED_LINE_NUMBER" IS '拆机行项目编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ATTACHED_AID" IS '拆机行项目资产编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."PARENT_LINE_ID" IS 'Parent行项目ID';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."PARENT_AID" IS 'Parent资产编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ROOT_LINE_ID" IS 'Root行项目ID';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ROOT_AID" IS 'Root资产编号';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ORDER_LEVEL" IS 'Level';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."FROM_AID" IS 'FromAssetIntegrationId';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."CARRIER_AID" IS 'CarrierIntegrationId';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."COMPOUND_AID" IS 'CompoundParentIID';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."PRODUCT_NAME" IS '产品名称';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."PRODUCT_CODE" IS '产品编码';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."ACTION" IS 'Action';
COMMENT ON COLUMN "TESTORDER"."TEMP_P6_ORDER_ANALYSIS"."SUB_ACTION" IS 'SubAction';

-- ----------------------------
-- Table structure for TEMP_PROMOTION_WORK
-- ----------------------------
DROP TABLE "TESTORDER"."TEMP_PROMOTION_WORK";
CREATE TABLE "TESTORDER"."TEMP_PROMOTION_WORK" (
"PROMOTIONID" VARCHAR2(50 BYTE) NULL ,
"WORKINFO" VARCHAR2(200 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEST
-- ----------------------------
DROP TABLE "TESTORDER"."TEST";
CREATE TABLE "TESTORDER"."TEST" (
"TEST2" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEST_CODE
-- ----------------------------
DROP TABLE "TESTORDER"."TEST_CODE";
CREATE TABLE "TESTORDER"."TEST_CODE" (
"AAA" VARCHAR2(10 BYTE) NULL ,
"BBB" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEST_HASH2
-- ----------------------------
DROP TABLE "TESTORDER"."TEST_HASH2";
CREATE TABLE "TESTORDER"."TEST_HASH2" (
"ID" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TESTHASH
-- ----------------------------
DROP TABLE "TESTORDER"."TESTHASH";
CREATE TABLE "TESTORDER"."TESTHASH" (
"TEST1" VARCHAR2(3 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TMP_TESTTZ
-- ----------------------------
DROP TABLE "TESTORDER"."TMP_TESTTZ";
CREATE TABLE "TESTORDER"."TMP_TESTTZ" (
"DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for USER_INFO
-- ----------------------------
DROP TABLE "TESTORDER"."USER_INFO";
CREATE TABLE "TESTORDER"."USER_INFO" (
"USER_ID" VARCHAR2(20 BYTE) NOT NULL ,
"USER_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"USER_PWD" VARCHAR2(32 BYTE) NOT NULL ,
"USER_ROLE" VARCHAR2(32 BYTE) NOT NULL ,
"LAST_SIGN_TIME" DATE NULL ,
"STATUS" VARCHAR2(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."USER_ID" IS '用户编号';
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."USER_NAME" IS '用户名';
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."USER_PWD" IS '密码';
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."USER_ROLE" IS '角色';
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."LAST_SIGN_TIME" IS '最后登录时间';
COMMENT ON COLUMN "TESTORDER"."USER_INFO"."STATUS" IS '状态，0:正常，1:失效';

-- ----------------------------
-- View structure for V_ORIGIN_ORDER_LINEITEM
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "TESTORDER"."V_ORIGIN_ORDER_LINEITEM" AS 
(SELECT CRM_ORDER_ID, CRM_ORDER_NUMBER, VERSION, LINE_ID, LINE_NUMBER,
           PRODUCT_NAME, PRODUCT_CODE, STATUS, ACTION, SUB_ACTION, AID, FROM_AID,
           CARRIER_AID, COMPOUND_AID, RECEIVE_TIME
      FROM ORIGIN_ORDER_LINEITEM);

-- ----------------------------
-- View structure for V_P6_CONFIG_TEMPLATE
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "TESTORDER"."V_P6_CONFIG_TEMPLATE" AS 
SELECT PRODUCT_GROUP,ROOT_PRODUCT,P6_CONFIG_PRODUCT.NAMESPACE,P6_CONFIG_PRODUCT.VERSION,P6_CONFIG_PRODUCT.SOURCE,P6_CONFIG_PRODUCT.TYPE,XSLT_PATH FROM P6_CONFIG_PRODUCT,P6_CONFIG_XSLT WHERE
	P6_CONFIG_PRODUCT.NAMESPACE=P6_CONFIG_XSLT.NAMESPACE AND P6_CONFIG_PRODUCT.VERSION=P6_CONFIG_XSLT.VERSION
	AND P6_CONFIG_PRODUCT.SOURCE=P6_CONFIG_XSLT.SOURCE AND P6_CONFIG_PRODUCT.TYPE=P6_CONFIG_XSLT.TYPE;

-- ----------------------------
-- View structure for VIEW_ORIGIN_ORDER_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "TESTORDER"."VIEW_ORIGIN_ORDER_INFO" AS 
SELECT CRM_ORDER_ID, CRM_ORDER_NUMBER, VERSION, STATUS, RECEIVE_TIME, TOTAL_PAGE
     FROM ORIGIN_ORDER_INFO;

-- ----------------------------
-- Procedure structure for ADD_PARTITION_BYDATE
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."ADD_PARTITION_BYDATE"
AS
 CURSOR C4 is
     select distinct table_name tt from user_tab_partitions ;


 v_high_value varchar2(2000);
 v_high_date date;
 v_sql varchar2(2000);
 v_add_sql varchar2(2000);
 v_new_high_date date;
 v_new_high_char varchar2(200);
 v_seq number;
begin
    dbms_output.ENABLE(100000000000000);
    select SEQ_ADD_PARTITION.nextval into v_seq from dual;
    for c in c4 loop
     begin
     v_sql:='  select high_value from user_tab_partitions  A
    where A.partition_position = (select MAX(partition_position)  from user_tab_partitions  B
     where A.table_name=B.table_name) and A.table_name='''|| c.tt ||''' ';
   -- dbms_output.put_line(v_sql);
     execute immediate   v_sql into v_high_value;
      --dbms_output.put_line(v_high_value);
     IF v_high_value like 'TO_DATE%' then
                 execute immediate 'select  '||v_high_value  ||' from dual' into v_high_date;
                 --dbms_output.put_line(v_high_date);
                 if v_high_date<=add_months(sysdate,6) then
                 --dbms_output.put_line(v_high_date);
                 v_new_high_date:=add_months(v_high_date,1);
                 v_new_high_char:=to_char(v_new_high_date,'yyyymmdd') ;
                 dbms_output.put_line(v_new_high_char);
                  v_add_sql:=' alter table '||c.tt||' add partition '||'PARTITION_'||v_new_high_char
                           ||' VALUES LESS THAN (to_date('''||v_new_high_char||''',''yyyymmdd''))';
                 dbms_output.put_line(v_add_sql);
                    execute immediate v_add_sql;
                 insert into log_add_partition values(v_seq,sysdate,c.tt, c.tt||'_'||v_new_high_char,to_char(v_high_date,'yyyymmdd'), to_char(v_new_high_date,'yyyymmdd'));
                 end if;
    end if;
   exception when others then
     dbms_output.put_line(c.tt||sqlcode||sqlerrm);

   end;
 end loop;

end add_partition_bydate ;
/

-- ----------------------------
-- Procedure structure for autoInsertCSBFinish
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."autoInsertCSBFinish"(
     vi_orderNumber    in       varchar2,
     vo_err_code         out      number,
     vo_err_desc           out      varchar2
     ) is
     v_related_info csb_related_info%type;
     v_csb_info csb_order_info%type;

begin
   --
   begin
     select * into v_related_info from (select * csb_related_info where re_crm_order_number
        = vi_orderNumber and related='1' order by re_crm_version desc)
        and rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30001;
            vo_err_desc := '关联关系不存在';
            return;
   end;
   
   begin
     select * into v_csb_info from (select * csb_order_info where lastcustorderno=
        = v_related_info.lastcustorderno and ismatch='1' 
        and productitemid=v_related_info.productitemid order by revision desc)
        and rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30002;
            vo_err_desc := 'CSB不存在';
            return;
   end;   
      
  begin
   insert into csb_notice_info (custorderid,dispatchorderno,prodinstid,productitemid
   ,statustype,workorderid,received_time,msgid,servcode,custorderno,bcmode) values
   (v_csb_info.custorderid,v_csb_info.dispatchorderno,v_csb_info.prodinstid,v_csb_info.productitemid,
   '2011102002',v_csb_info.workorderid,sysdate,'test.1.1.1','dispatchOrderFinishNotify','0');
   exception
      when others then
         vo_err_code := 30101;
         vo_err_desc := substr ('保存消息失败:' || sqlerrm, 1, 100);
   end;   
      
   commit;
 end;



 
/

-- ----------------------------
-- Procedure structure for EXC_PROMOTION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."EXC_PROMOTION" is
begin
   --把所有营销－施工信息插入到临时表中,先CDMA的
   begin
      insert into temp_promotion_work
                  (promotionid,workinfo)
         (select inner_package_serial,work_platform
            from cdma_sub_config_info);

      insert into temp_promotion_work
                  (promotionid,workinfo)
         (select b.crm_package_id,b.inner_package_serial
            from main_config_info b where
               exists (select c.work_platform_id from sub_config_info c where c.inner_package_serial=b.inner_package_serial));
      end;
      
      
      begin
      update promotioninfo  set status='NOTNEEDSEND' where status='Pending' 
          and ((shctori_pro_code is NULL) or (shctori_pro_code not in (select promotionid from temp_promotion_work)))
          and ((shctpromotioncode is NULL) or (shctpromotioncode not in (select promotionid from temp_promotion_work)));
      end;
      begin
      update promotioninfo  set status='MISSPARAM' where (status='Pending' or status='Processing')
          and ((uniquetracknumber IS NULL) or (subpartnumber IS NULL) OR (partnumber IS NULL));
      end;
   
      begin   
      update promotioninfo set status='PreProcess'
      where status='Pending'
      and ((note != 'PROMTIMEOVER111' and (promotionstartdate<sysdate) or (OriginalPromExpireDate<sysdate))
           or (note = 'PROMTIMEOVER111' and OriginalPromExpireDate<sysdate))
      and uniquetracknumber in      
         (select distinct uniquetracknumber
           from promotioninfo
          where status='Pending'
           and ((note != 'PROMTIMEOVER111' and (promotionstartdate<sysdate-1) or (OriginalPromExpireDate<sysdate-1))
           or (note = 'PROMTIMEOVER111' and OriginalPromExpireDate<sysdate-1)));
       end;
   end;



 
/

-- ----------------------------
-- Procedure structure for finish_orderset
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."finish_orderset" is

pre_months    number;   

cursor finished_orderset
      is
         select crm_order_number,version
           from p6_orderset_info 
          where status_time<add_months(sysdate,-pre_months) and status='Finished';
                 
begin
   pre_months := 24;  --清理24个月之前的完工订单组
   for p in finished_orderset loop
   
   begin
   
   insert into p6_order_info@ibphis select * from p6_order_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from p6_order_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   insert into p6_cancelorder_info@ibphis select * from p6_cancelorder_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from p6_cancelorder_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   insert into origin_line_item@ibphis select * from origin_line_item where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_line_item where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into origin_order_info@ibphis select * from origin_order_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_order_info where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into origin_order_page@ibphis select * from origin_order_page where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_order_page where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into service_order_sent@ibphis select * from service_order_sent where crm_order_number=p.crm_order_number and version<=p.version;
   delete from service_order_sent where crm_order_number=p.crm_order_number and version<=p.version;


   insert into p6_orderset_info@ibphis select * from p6_orderset_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from p6_orderset_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   exception
   
   end;
   
   end loop;

   
end;



 
/

-- ----------------------------
-- Procedure structure for FINISH_ORDERSET
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."FINISH_ORDERSET" is

pre_months    number;   

cursor finished_orderset
      is
         select crm_order_number,version
           from p6_orderset_info 
          where status_time<add_months(sysdate,-pre_months) and status='Finished';
                 
begin
   pre_months := 24;  --清理24个月之前的完工订单组
   for p in finished_orderset loop
   
   begin
   
   insert into p6_order_info@ibphis select * from p6_order_info where crm_order_number=p.crm_order_number and version<=p.version;

   delete from p6_order_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   insert into p6_cancelorder_info@ibphis select * from p6_cancelorder_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from p6_cancelorder_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   insert into origin_line_item@ibphis select * from origin_line_item where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_line_item where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into origin_order_info@ibphis select * from origin_order_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_order_info where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into origin_order_page@ibphis select * from origin_order_page where crm_order_number=p.crm_order_number and version<=p.version;
   delete from origin_order_page where crm_order_number=p.crm_order_number and version<=p.version;
      
   insert into service_order_sent@ibphis select * from service_order_sent where crm_order_number=p.crm_order_number and version<=p.version;
   delete from service_order_sent where crm_order_number=p.crm_order_number and version<=p.version;


   insert into p6_orderset_info@ibphis select * from p6_orderset_info where crm_order_number=p.crm_order_number and version<=p.version;
   delete from p6_orderset_info where crm_order_number=p.crm_order_number and version<=p.version;
   
   exception
    when others then
    continue;
   end;
   
   end loop;

end;
   




 
/

-- ----------------------------
-- Procedure structure for INSERTCSBFINISH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."INSERTCSBFINISH"(
     vi_orderNumber    in       varchar2

     ) is
     vo_err_code               number;
     vo_err_desc                 varchar2(255);

     v_lastcustorderno csb_related_info.lastcustorderno%type;
     v_productitemid   csb_related_info.productitemid%type;
     v_prodinstid      csb_related_info.prodinstid%type;
     v_custorderid    csb_order_info.custorderid%type;
     v_dispatchorderno    csb_order_info.dispatchorderno%type;
     v_workorderid    csb_order_info.workorderid%type;
     v_custorderno    csb_order_info.custorderno%type;


begin
   --
   begin
     select lastcustorderno,productitemid,prodinstid into v_lastcustorderno,  v_productitemid,v_prodinstid
      from (select * from csb_related_info where re_crm_order_number
        = vi_orderNumber and related='1' order by re_crm_version desc)
        WHERE rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30001;
            vo_err_desc := '关联关系不存在';
            DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
            return;
   end;

   begin
     select custorderid,dispatchorderno,workorderid,custorderno
     into v_custorderid,v_dispatchorderno,v_workorderid,v_custorderno
     from (select * from csb_order_info where lastcustorderno=
         v_lastcustorderno and ismatch='1'
        and productitemid=v_productitemid order by revision desc)
        where rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30002;
            vo_err_desc := 'CSB不存在';
            DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
            return;
   end;

  begin
   insert into csb_notice_info (custorderid,dispatchorderno,prodinstid,productitemid
   ,statustype,workorderid,received_time,msgid,servcode,custorderno,bcmode) values
   (v_custorderid,v_dispatchorderno,v_prodinstid,v_productitemid,
   '2011102002',v_workorderid,sysdate,'test.1.1.1','dispatchOrderFinishNotify',v_custorderno,'0');
   exception
      when others then
         vo_err_code := 30101;
         begin
             select received_time||','||msgid into vo_err_desc from csb_notice_info
             where custorderno=v_custorderno and productitemid=v_productitemid
             and prodinstid= v_prodinstid and statustype='2011102002';
         end;
         --vo_err_desc := substr ('保存消息失败:' || sqlerrm, 1, 100);
         DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
   end;

   commit;
 end;
/

-- ----------------------------
-- Procedure structure for INSERTCSBTEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."INSERTCSBTEST"(
     vi_orderNumber    in       varchar2

     ) is
     vo_err_code               number;
     vo_err_desc                 varchar2(255);

     v_lastcustorderno csb_related_info.lastcustorderno%type;
     v_productitemid   csb_related_info.productitemid%type;
     v_prodinstid      csb_related_info.prodinstid%type;
     v_custorderid    csb_order_info.custorderid%type;
     v_dispatchorderno    csb_order_info.dispatchorderno%type;
     v_workorderid    csb_order_info.workorderid%type;
     v_custorderno    csb_order_info.custorderno%type;
     v_bcmode         csb_order_info.bcmode%type;

begin
   --
   begin
     select lastcustorderno,productitemid,prodinstid into v_lastcustorderno,  v_productitemid,v_prodinstid
      from (select * from csb_related_info where re_crm_order_number
        = vi_orderNumber and related='1' order by re_crm_version desc)
        WHERE rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30001;
            vo_err_desc := '关联关系不存在';
            DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
            return;
   end;

   begin
     select custorderid,dispatchorderno,workorderid,custorderno,bcmode
     into v_custorderid,v_dispatchorderno,v_workorderid,v_custorderno,v_bcmode
     from (select * from csb_order_info where lastcustorderno=
         v_lastcustorderno and ismatch='1'
        and productitemid=v_productitemid
        and (bcmode='0' or bcmode='1') order by revision desc)
        where rownum=1;
   exception
         when no_data_found then
            vo_err_code := 30002;
            vo_err_desc := 'CSB不存在';
            DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
            return;
   end;

  begin
   insert into csb_notice_info (custorderid,dispatchorderno,prodinstid,productitemid
   ,statustype,workorderid,received_time,msgid,servcode,custorderno,bcmode) values
   (v_custorderid,v_dispatchorderno,v_prodinstid,v_productitemid,
   '2011102001',v_workorderid,sysdate,'test.2.2.2','dispatchOrderTestNotify',v_custorderno,v_bcmode);
   exception
      when others then
         vo_err_code := 30101;
         begin
             select received_time||','||msgid into vo_err_desc from csb_notice_info
             where custorderno=v_custorderno and productitemid=v_productitemid
             and prodinstid= v_prodinstid and statustype='2011102001';
         end;
         --vo_err_desc := substr ('保存消息失败:' || sqlerrm, 1, 100);
         DBMS_OUTPUT.PUT_LINE(vo_err_code||':'||vo_err_desc);
   end;

   commit;
 end;
/

-- ----------------------------
-- Procedure structure for MOVE_PROM_PROD_MAPPING
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."MOVE_PROM_PROD_MAPPING" IS
  local_records  number;
  remote_records number;
begin
  /*
       select count(*) into local_records from prom_prod_mapping;
       select count(*) into remote_records from IBP_PROM_PROD_CONFIG@crmdb;



       if local_records != remote_records
       then
       begin
  --     delete from prom_prod_mapping;
        EXECUTE IMMEDIATE 'TRUNCATE TABLE prom_prod_mapping_temp';

       insert into prom_prod_mapping
       (select SEQ_prom_prod_mapping.Nextval,prod_num,prom_num,prom_type,'',prod_name,prom_name from IBP_PROM_PROD_CONFIG@crmdb);

       end;

       end if;

  */

  EXECUTE IMMEDIATE 'TRUNCATE TABLE prom_prod_mapping_temp';
  begin
    insert into prom_prod_mapping_temp

      (select SEQ_prom_prod_mapping_temp.Nextval, prod_num, prom_num, prom_type, '', prod_name, prom_name from IBP_PROM_PROD_CONFIG@crmdb_temp where prom_num is not null);
    commit;

    delete from prom_prod_mapping a
     where NOT EXISTS (select product_code, promotion_id
              from prom_prod_mapping_temp
             where product_code = a.product_code
               and promotion_id = a.promotion_id);
    commit;

    insert into prom_prod_mapping
      (select *
         from prom_prod_mapping_temp a
        where NOT EXISTS (select product_code, promotion_id
                 from prom_prod_mapping
                where product_code = a.product_code
                  and promotion_id = a.promotion_id));
    commit;
  exception
    WHEN OTHERS THEN
      rollback;
  end;
end MOVE_PROM_PROD_MAPPING;
/

-- ----------------------------
-- Procedure structure for P_INSERT_CSB_MESSAGE
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."P_INSERT_CSB_MESSAGE"(messageid in varchar) is
begin
  
   insert into csb_message@old_sopdb select * from csb_message where msgid= messageid;
   commit;
end p_insert_csb_message;
/

-- ----------------------------
-- Procedure structure for PROC0
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."PROC0"(aa  in varchar2)
is 
vo_err number;
begin 
  vo_err :=0;
end;
/

-- ----------------------------
-- Procedure structure for PROCEDURE_NAME
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."PROCEDURE_NAME"
   [(argument_name [{IN|OUT|IN OUT}] TYPE,
   ...
    argument_name [{IN|OUT|IN OUT}] TYPE)]
   {IS|AS}
BEGIN
    statements
END;




--创建存储过程

create or replace procedure selectProm_prod(v_promotion_id prom_prod_mapping.promotion_id%TYPE ) is
--selectprom_prod 存储过程名称
--(v_promotion_id prom_prod_mapping.promotion_id%TYPE ) 存储过程的入参 v_promotion_id ;prom_prod_mapping.promotion_id 这张表的字段
v_prod_name prom_prod_mapping.prod_name%TYPE;
--查询的字段 v_prod_name ；prom_prod_mapping.prod_name 这张表的字段

begin

select prod_name INTO v_prod_name --查询这张表的字段 prod_name 赋值给存储过程的字段 v_prod_name
from prom_prod_mapping
where product_code ='524'
and promotion_id = v_promotion_id; --这张表的字段 promotion_id 等于 存储过程的入参

--DBMS_OUTPUT.PUT_LINE('HELLO, '||v_prod_name); --打印这个字段 ,到时调用该存储过程时，满足条件则显示：HELLO,显示这张表的字段prod_name的值
--DBMS_OUTPUT.PUT_LINE('HELLO, '||v_promotion_id','||v_prod_name);
DBMS_OUTPUT.PUT_LINE('HELLO, '||v_promotion_id||','||v_prod_name);
exception when no_data_found then

--DBMS_OUTPUT.PUT_LINE('No HELLO');
DBMS_OUTPUT.PUT_LINE('No HELLO,'||v_prod_name); --打印这个字段，如果不满足，则显示：No HELLO
end ;



--要调用的话，如下：

declare  v_promotion_id1 varchar2(50);
begin  v_promotion_id1 := '1-KXB2YXp';

selectProm_prod(v_promotion_id1);

dbms_output.put_line('v_promotion_id is: '||v_promotion_id1);

end;









select *
from promotioninfo

--1. % type用法，提取% type所在字段的类型
declare

myid promotioninfo.message_id % type;
mynumber promotioninfo.crm_order_number % type;

begin

select message_id,crm_order_number into myid,mynumber
from promotioninfo
where message_id in ('1401');

dbms_output.put_line(myid);
dbms_output.put_line(mynumber);
end;




--2. %rowtype用法，提取%rowtype所在的字段的类型
declare
type type_dept is table of promotioninfo % rowtype
index by binary_integer;
tb type_dept;
begin
tb(1).phone_no:='18988054033';
tb(2).phone_no:='50811556';
dbms_output.put_line(tb.COUNT);
end;



--3. TYPE用法，相当于结构体
declare
--lv_order_date DAte:=sysdate;
lv_last_txt varchar2(5) default '001';
lv_last varchar2(10) not null:='us';

TYPE type_test is record
(
  myid promotioninfo.message_id % type,
  mynumber promotioninfo.crm_order_number % type
);
rec type_test;

begin
--lv_order_date:=sysdate;
dbms_output.put_line(lv_last);
dbms_output.put_line(lv_last_txt);

select  message_id,crm_order_number into rec
from promotioninfo
where message_id in ('1422');

dbms_output.put_line(rec.myid);
dbms_output.put_line(rec.mynumber);
end;




--4. 游标的使用

declare
g_id char(4):='1422'; --改为4
find_not char(1):='N';

cursor cur is --定义游标，游标指向表 promotioninfo
select message_id,crm_order_number,phone_no from promotioninfo where message_id ='1422';

TYPE type_dept is record
(
  myid promotioninfo.message_id % type,
  mynumber promotioninfo.crm_order_number % type,
  myphone promotioninfo.phone_no % type
);
rect type_dept;

begin

open cur;

loop
fetch cur into rect; --提取 游标cur 指向的记录到 rect结构中
exit when cur% NOTFOUND;

dbms_output.put_line('rect.myid:'||rect.myid);
dbms_output.put_line('g_id:'||g_id);

if rect.myid=g_id then
find_not:='Y';
dbms_output.put_line('Find it!!');
dbms_output.put_line('my table_promotioninfoのfind_not:' || find_not);
dbms_output.put_line('my table_promotioninfoのmessage_id:' || rect.myid);
dbms_output.put_line('my table_promotioninfoのcrm_order_number:' || rect.mynumber);
dbms_output.put_line('my table_promotioninfoのphone_no:' || rect.myphone);
end if;

end loop;

close cur;

if find_not='N' then
dbms_output.put_line('no record');

end if;
end;
/

-- ----------------------------
-- Procedure structure for RUN_NOCOPY_SP
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."RUN_NOCOPY_SP"
is
lv_test_num number;
begin
     lv_test_num:=1;
     test_nocopy_sp(1,lv_test_num);
     exception
            when others then
            dbms_output.put_line('error happened'|| lv_test_num);
end;
/

-- ----------------------------
-- Procedure structure for SELECTPROM_PROD
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."SELECTPROM_PROD"(v_promotion_id prom_prod_mapping.promotion_id%TYPE ) is
v_prod_name prom_prod_mapping.prod_name%TYPE;

begin

select prod_name INTO v_prod_name
from prom_prod_mapping
where product_code ='524' and promotion_id = v_promotion_id;

DBMS_OUTPUT.PUT_LINE('HELLO, '||v_promotion_id||','||v_prod_name);
exception when no_data_found then

DBMS_OUTPUT.PUT_LINE('No HELLO,'||v_prod_name);


--insert into prom_prod_mapping values(SEQ_prom_prod_mapping_temp.Nextval,'524','1-100002','','','','');

--commit;
end ;
/

-- ----------------------------
-- Procedure structure for TEST_NOCOPY_SP
-- ----------------------------
CREATE OR REPLACE procedure "TESTORDER"."TEST_NOCOPY_SP"(p_in in number, p_out in out nocopy number)
is
begin
       p_out:=5;
       if p_in=1 then
          raise no_data_found; --强行抛出一个异常，以显示参数的结果。

       end if;
end;
/

-- ----------------------------
-- Procedure structure for TEST_PROC
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."TEST_PROC"
is 

begin 
  
end
/

-- ----------------------------
-- Procedure structure for TEST_PROC1
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."TEST_PROC1"(
     vi_orderNumber    in       varchar2,
     vi_err            out      varchar2,
     vi_errdesc          out      varchar2
     ) is

vo_err number;

begin
   vi_err := 'good';
   vi_errdesc :='good1';
   insert into test_code values('abc','brds');
   commit;

end;

/

-- ----------------------------
-- Procedure structure for UPDATE_ORDERSET
-- ----------------------------
CREATE OR REPLACE PROCEDURE "TESTORDER"."UPDATE_ORDERSET" is

cursor processing_order
      is
         select crm_order_number,version,root_aid,p6_namespace
           from p6_order_info 
          where status_time<add_months(sysdate,-24) and status='Processing';
v_origin_order_id     varchar2(30);
v_p6_status           number;
v_min_version         number;

           
begin

   update p6_order_info set status='Finished' where (p6_order_id='N,N01' OR P6_ORDER_ID='Cent|PBX,N') and status='Processing';

   for f in processing_order loop
   
   begin
   select min(version) into v_min_version from p6_order_info where crm_order_number=f.crm_order_number 
                      and root_aid = f.root_aid 
                      and (status != 'Failure' or status!='Pending') 
                      and p6_order_id is not null
                      and rownum=1;
   
   select p6_order_id  into v_origin_order_id from p6_order_info where crm_order_number=f.crm_order_number 
                      and root_aid =f.root_aid 
                      and version = v_min_version
                      and rownum=1; --查到该行项目定单的最小定单号，P6保存的是最先定单号
   
   if f.p6_namespace ='CDMA' or f.p6_namespace='PHS' then   --CDMA,PHS同数据库，到表中查到状态，等于7就是完工
      select ord_state_id into v_p6_status from om_order_header@CDMA_P6 where order_seq_id = v_origin_order_id;
   elsif f.p6_namespace='IDC' then                       
      v_p6_status :=7;     --IDC的订单原先不置完工状态，所以只要P6_ORDER_ID有值，就直接置为完工
   else 
       select ord_state_id into v_p6_status from om_order_header@NONPHS_P6 where order_seq_id = v_origin_order_id;
   end if;
   
   if v_p6_status=7 then  --等于7 ，完工
     begin
     update p6_order_info set status='Finished' where crm_order_number=f.crm_order_number 
                              and root_aid = f.root_aid;  --把该AID的所有版本定单都置完工，P6保存的是最先的定单号，只要完工，就是该定单项的所有版本，都完工
     update p6_orderset_info set status='Finished' where crm_order_number = f.crm_order_number
            and version = f.version
            and not exists (select p6_order_id
                              from p6_order_info
                             where crm_order_number = f.crm_order_number
                               and version = f.version
                               and status <> 'Finished');   --如果该版本的所有定单都完工，那置订单组完工
      end;
   end if;
  

   exception 
   when others then
   continue;

   end;

   end loop;

   
end;
/

-- ----------------------------
-- Function structure for GET_MD5
-- ----------------------------
CREATE OR REPLACE FUNCTION "TESTORDER"."GET_MD5"
( p_str in varchar2)
RETURN varchar2 IS
BEGIN
RETURN Utl_Raw.Cast_To_Raw(DBMS_OBFUSCATION_TOOLKIT.MD5(input_string => Upper(P_Str)));
END;
/

-- ----------------------------
-- Function structure for ISNUMERIC
-- ----------------------------
CREATE OR REPLACE FUNCTION "TESTORDER"."ISNUMERIC" (p_in VARCHAR2)
   RETURN number
AS
   i   NUMBER;
BEGIN
   i := TO_NUMBER (p_in);
   RETURN 1;
EXCEPTION
   WHEN OTHERS THEN
      RETURN 2;

      IF i = 1 THEN
         NULL;
      END IF;
END ISNUMERIC; 
/

-- ----------------------------
-- Function structure for LONG_TO_CHAR
-- ----------------------------
CREATE OR REPLACE FUNCTION "TESTORDER"."LONG_TO_CHAR" 
( in_rowid rowid,
in_table_name varchar,
in_column varchar2) 
RETURN varchar AS 
/*
CREATE BY: D.Jenkins
         Date: 28-Apr02003 

         Use:  Long to varchar2 conversion,
               to allow a substring on long column in the table; 
  
         Notes: 
         Errors out with varchar > 32767        
         ORA-06502: PL/SQL: numeric or value error: character string
            buffer too small 

         Synonyms and Grants:
         create public synonym LONG_TO_CHAR for
            synergen.CDBF_LONG_TO_CHAR; 
         grant execute as required 
         or
         grant execute long_to_char to public; 
            
*/

text_c1 varchar2(32767);
sql_cur varchar2(2000);
--
begin
  sql_cur := 'select '||in_column||' from
'||in_table_name||' where rowid =
'||chr(39)||in_rowid||chr(39);
  dbms_output.put_line (sql_cur);
  execute immediate sql_cur into text_c1;

  te 
 
/

-- ----------------------------
-- Function structure for SPLIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "TESTORDER"."SPLIT" 
   (src VARCHAR2, delimiter varchar2)
  RETURN mytable IS
  psrc VARCHAR2(500);
  a mytable := mytable();
  i NUMBER := 1;  --
  j NUMBER := 1;
BEGIN
  psrc := RTrim(src, delimiter)||'|';

--   Dbms_Output.put_line('psrc='|| psrc);
  LOOP
    i := InStr(psrc, delimiter, j);
--    Dbms_Output.put_line(i);
    if i is NULL then
       Dbms_Output.put_line('i==null');
       i:=0;
    end if;   
--    Dbms_Output.put_line(i);
    IF i>0 THEN
     if length(Trim(SubStr(psrc, j, i-j)))>0 then
        a.extend;
        a(a.Count) := Trim(SubStr(psrc, j, i-j));
      end if;
      j := i+1;
      --Dbms_Output.put_line(a(a.Count-1));
/*      
    elsif a.Count=0 and   psrc!=src then
      a.extend;
      a(a.Count) := psrc;
*/
    END IF;
    EXIT WHEN i=0;
  END LOOP;
  IF j < Length(psrc) THEN
    a.extend;
    a(a.Count) := Trim(SubStr(psrc, j, Length(psrc)+1-j));
  END IF;
  RETURN a;
END;

 
/

-- ----------------------------
-- Sequence structure for PLSQL_PROFILER_RUNNUMBER
-- ----------------------------
DROP SEQUENCE "TESTORDER"."PLSQL_PROFILER_RUNNUMBER";
CREATE SEQUENCE "TESTORDER"."PLSQL_PROFILER_RUNNUMBER"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SEQ_ADD_PARTITION
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_ADD_PARTITION";
CREATE SEQUENCE "TESTORDER"."SEQ_ADD_PARTITION"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 99999999
 START WITH 3090
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_AUD_ID
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_AUD_ID";
CREATE SEQUENCE "TESTORDER"."SEQ_AUD_ID"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999999999
 START WITH 47
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_BILL_REQID
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_BILL_REQID";
CREATE SEQUENCE "TESTORDER"."SEQ_BILL_REQID"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999
 START WITH 6821
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_CSB_ORDERCODE
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_CSB_ORDERCODE";
CREATE SEQUENCE "TESTORDER"."SEQ_CSB_ORDERCODE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 200044
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_CSB_TRANS
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_CSB_TRANS";
CREATE SEQUENCE "TESTORDER"."SEQ_CSB_TRANS"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 2947
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SEQ_CSB_WORKORDER
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_CSB_WORKORDER";
CREATE SEQUENCE "TESTORDER"."SEQ_CSB_WORKORDER"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999
 START WITH 830
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_661_6
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_661_6";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_661_6"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 6
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_662_6
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_662_6";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_662_6"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 7
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_FINISH3
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH3";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH3"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 121
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_FINISH4
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH4";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH4"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 1005
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_FINISH6
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH6";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH6"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 32834203
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_DIRECT_FINISH79
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH79";
CREATE SEQUENCE "TESTORDER"."SEQ_DIRECT_FINISH79"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999
 START WITH 7784775
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_FINISH_SERVICEID
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_FINISH_SERVICEID";
CREATE SEQUENCE "TESTORDER"."SEQ_FINISH_SERVICEID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999
 START WITH 504
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_FINISH676
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_FINISH676";
CREATE SEQUENCE "TESTORDER"."SEQ_FINISH676"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 4
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_FINISH679
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_FINISH679";
CREATE SEQUENCE "TESTORDER"."SEQ_FINISH679"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 4
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_LOG
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_LOG";
CREATE SEQUENCE "TESTORDER"."SEQ_LOG"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999999999999999999999999
 START WITH 0
 CACHE 200;

-- ----------------------------
-- Sequence structure for SEQ_ORDERSPLIT
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_ORDERSPLIT";
CREATE SEQUENCE "TESTORDER"."SEQ_ORDERSPLIT"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 161
 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PROM_PROD_MAPPING_TEMP
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_PROM_PROD_MAPPING_TEMP";
CREATE SEQUENCE "TESTORDER"."SEQ_PROM_PROD_MAPPING_TEMP"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999999999999
 START WITH 23452
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_PROMO_ORDER
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_PROMO_ORDER";
CREATE SEQUENCE "TESTORDER"."SEQ_PROMO_ORDER"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 99999
 START WITH 1404
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_PROMOTION_MESSAGE
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_PROMOTION_MESSAGE";
CREATE SEQUENCE "TESTORDER"."SEQ_PROMOTION_MESSAGE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999
 START WITH 60621
 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_RECEIVED_MESSAGE
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_RECEIVED_MESSAGE";
CREATE SEQUENCE "TESTORDER"."SEQ_RECEIVED_MESSAGE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 3300840
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_SERVICE_NO
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_SERVICE_NO";
CREATE SEQUENCE "TESTORDER"."SEQ_SERVICE_NO"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999999999999999999999999
 START WITH 19414
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SEQ_SERVICE_ORDER
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_SERVICE_ORDER";
CREATE SEQUENCE "TESTORDER"."SEQ_SERVICE_ORDER"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999999999999999999999999
 START WITH 2998327
 CACHE 50;

-- ----------------------------
-- Sequence structure for SEQ_TESTDBCONN
-- ----------------------------
DROP SEQUENCE "TESTORDER"."SEQ_TESTDBCONN";
CREATE SEQUENCE "TESTORDER"."SEQ_TESTDBCONN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 135
 NOCACHE ;

-- ----------------------------
-- Indexes structure for table BILL_ACTIVENET_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."BILL_IMSI_IDX"
ON "TESTORDER"."BILL_ACTIVENET_INFO" ("CIMSI" ASC, "GIMSI" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."BILL_PHONE_IDX"
ON "TESTORDER"."BILL_ACTIVENET_INFO" ("PHONE" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."BILL_PROCESS_IDX"
ON "TESTORDER"."BILL_ACTIVENET_INFO" ("ORDER_STATUS" ASC, "RECEIVED_DATE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table BILL_ACTIVENET_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("SERIAL_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("PHONE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("ACTION_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("ORDER_STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("NET_STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("RECEIVED_DATE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD CHECK ("BILL_SOURCE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table BILL_ACTIVENET_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_ACTIVENET_INFO" ADD PRIMARY KEY ("SERIAL_ID", "BILL_SOURCE");

-- ----------------------------
-- Indexes structure for table BILL_ORDER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table BILL_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("BILL_SOURCE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("SERIAL_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("ACTION_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("OVERLOAD" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD CHECK ("BRQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table BILL_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_ORDER_INFO" ADD PRIMARY KEY ("BRQ_ID");

-- ----------------------------
-- Indexes structure for table BILL_PROVORDER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table BILL_PROVORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD CHECK ("BRQ_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD CHECK ("SERIAL_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD CHECK ("BILL_SOURCE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD CHECK ("ACTION_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD CHECK ("BILL_STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table BILL_PROVORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_PROVORDER_INFO" ADD PRIMARY KEY ("BRQ_ID");

-- ----------------------------
-- Checks structure for table BILL_PROVORDER_PARAM
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_PROVORDER_PARAM" ADD CHECK ("BRQ_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_PARAM" ADD CHECK ("PARAM_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."BILL_PROVORDER_PARAM" ADD CHECK ("PARAM_VALUE" IS NOT NULL);

-- ----------------------------
-- Checks structure for table BILL_SYS_CONFIG
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_SYS_CONFIG" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table BILL_SYS_CONFIG_BACKUP
-- ----------------------------
ALTER TABLE "TESTORDER"."BILL_SYS_CONFIG_BACKUP" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table COMPANY
-- ----------------------------

-- ----------------------------
-- Checks structure for table COMPANY
-- ----------------------------
ALTER TABLE "TESTORDER"."COMPANY" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table COMPANY
-- ----------------------------
ALTER TABLE "TESTORDER"."COMPANY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table CRM_ACCOUNT
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_ACCOUNT
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD CHECK ("P_SUB_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD CHECK ("P_ACCOUNT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_ACCOUNT
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_ACCOUNT" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table CRM_ACTIVEMENT_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IDX_ACSTATUS_TIME"
ON "TESTORDER"."CRM_ACTIVEMENT_INFO" ("STATUS_TIME" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table CRM_ACTIVEMENT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" ADD CHECK ("STATUS_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_ACTIVEMENT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_ACTIVEMENT_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table CRM_AGREEMENT_AFFIRM
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_AGREEMENT_AFFIRM
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_AGREEMENT_AFFIRM
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_AGREEMENT_AFFIRM" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER", "USER_ID");

-- ----------------------------
-- Indexes structure for table CRM_APPOINT_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."CRM_APPOINT_INFO_INDEX1"
ON "TESTORDER"."CRM_APPOINT_INFO" ("CRM_ORDER_NUMBER" ASC, "CRM_LINE_NUMBER" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."CRM_APPOINT_INFO_INDEX2"
ON "TESTORDER"."CRM_APPOINT_INFO" ("DELAYED_FLAG" ASC, "INSERT_DATE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table CRM_APPOINT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("STATUS_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("APPOINT_INFO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("INSERT_DATE" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD CHECK ("DELAYED_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_APPOINT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_APPOINT_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table CRM_BANDWIDTH
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_BANDWIDTH
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD CHECK ("STATUS_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD CHECK ("BANDWIDTH_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_BANDWIDTH
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_BANDWIDTH" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_LINE_NUMBER", "CRM_VERSION");

-- ----------------------------
-- Indexes structure for table CRM_PAYMENT_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_PAYMENT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD CHECK ("STATUS_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD CHECK ("PAYMENT_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_PAYMENT_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table CRM_PAYMENT_INFO_COPY
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_PAYMENT_INFO_COPY
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD CHECK ("STATUS_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD CHECK ("PAYMENT_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_PAYMENT_INFO_COPY
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_PAYMENT_INFO_COPY" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER", "STATUS_TIME");

-- ----------------------------
-- Indexes structure for table CRM_START_CHARGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_START_CHARGE
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD CHECK ("CRM_LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD CHECK ("RENT_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD CHECK ("INSERT_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_START_CHARGE
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_START_CHARGE" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_ID");

-- ----------------------------
-- Indexes structure for table CRM_WF
-- ----------------------------

-- ----------------------------
-- Checks structure for table CRM_WF
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("CRM_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("P_DAY_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("P_PRODUCT_TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("P_BRAND_TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."CRM_WF" ADD CHECK ("P_OPERATION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CRM_WF
-- ----------------------------
ALTER TABLE "TESTORDER"."CRM_WF" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "CRM_VERSION", "CRM_LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table CSB_LTE_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IDX_LTE2"
ON "TESTORDER"."CSB_LTE_INFO" ("WORKORDERID" ASC, "CUSTORDERID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table CSB_LTE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_LTE_INFO" ADD CHECK ("CUSTORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_INFO" ADD CHECK ("WORKORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_LTE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_LTE_INFO" ADD PRIMARY KEY ("CUSTORDERNO", "PRODINSTID", "PRODUCTITEMID");

-- ----------------------------
-- Indexes structure for table CSB_LTE_NOTICE_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IDX_LTENOTICE2"
ON "TESTORDER"."CSB_LTE_NOTICE_INFO" ("CUSTORDERID" ASC, "WORKORDERID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table CSB_LTE_NOTICE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD CHECK ("CUSTORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD CHECK ("RECEIVED_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD CHECK ("MSGID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_LTE_NOTICE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_LTE_NOTICE_INFO" ADD PRIMARY KEY ("CUSTORDERNO", "PRODINSTID", "PRODUCTITEMID", "SERVCODE");

-- ----------------------------
-- Indexes structure for table CSB_MESSAGE
-- ----------------------------
CREATE INDEX "TESTORDER"."ORDERIDX"
ON "TESTORDER"."CSB_MESSAGE" ("DISPATCHORDERNO" ASC, "CUSTORDERNO" ASC)
LOGGING;

-- ----------------------------
-- Triggers structure for table CSB_MESSAGE
-- ----------------------------
CREATE OR REPLACE TRIGGER "TESTORDER"."TRIG_CSB_MESSAGE" AFTER INSERT ON "TESTORDER"."CSB_MESSAGE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
declare
  -- local variables here
begin
p_insert_csb_message(:old.msgid);
end TRIG_CSB_MESSAGE;

-- ----------------------------
-- Checks structure for table CSB_MESSAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_MESSAGE" ADD CHECK ("MSGID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_MESSAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_MESSAGE" ADD PRIMARY KEY ("MSGID");

-- ----------------------------
-- Indexes structure for table CSB_NOTICE_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table CSB_NOTICE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("MSGID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("CUSTORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("DISPATCHORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD CHECK ("RECEIVED_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_NOTICE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_NOTICE_INFO" ADD PRIMARY KEY ("CUSTORDERID", "DISPATCHORDERNO", "PRODINSTID", "PRODUCTITEMID", "STATUSTYPE", "WORKORDERID");

-- ----------------------------
-- Indexes structure for table CSB_ORDER_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IDX_ORDER_MSGID"
ON "TESTORDER"."CSB_ORDER_INFO" ("MSGID" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."LASTPK"
ON "TESTORDER"."CSB_ORDER_INFO" ("LASTCUSTORDERNO" ASC)
LOGGING;

-- ----------------------------
-- Triggers structure for table CSB_ORDER_INFO
-- ----------------------------
CREATE OR REPLACE TRIGGER "TESTORDER"."TRIG_SOP_CSB_ORDER" BEFORE INSERT ON "TESTORDER"."CSB_ORDER_INFO" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
declare
  -- local variables here
begin
insert into csb_message values(
:new.custorderno||'_'||:new.prodinstid||'_'||to_char(sysdate,'yyyymmddhh24miss'),  'DK2019'||SUBSTR(:new.Prodinstid,1,5)||','||'DK2019111111'||','||'DK201922222',:new.custorderno,:new.prodinstid,'WOPDKNotify',null,sysdate,'WOP-DK生成通知');

end trig_sop_csb_order;

-- ----------------------------
-- Checks structure for table CSB_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD CHECK ("WORKORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD CHECK ("DISPATCHORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD CHECK ("CUSTORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_ORDER_INFO" ADD PRIMARY KEY ("DISPATCHORDERNO", "CUSTORDERNO", "PRODUCTITEMID", "PRODINSTID", "WORKORDERID");

-- ----------------------------
-- Indexes structure for table CSB_RELATED_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."LAST_RELAT_PK"
ON "TESTORDER"."CSB_RELATED_INFO" ("CUSTORDERNO" ASC)
LOGGING;

-- ----------------------------
-- Uniques structure for table CSB_RELATED_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD UNIQUE ("DISPATCHORDERNO", "PRODUCTITEMID", "PRODINSTID", "RE_CRM_ORDER_NUMBER", "RE_CRM_LINE_NUMBER", "RE_CRM_VERSION", "LASTCUSTORDERNO");

-- ----------------------------
-- Checks structure for table CSB_RELATED_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("DISPATCHORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("RE_CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("RE_CRM_LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_RELATED_INFO" ADD CHECK ("RE_CRM_VERSION" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table CSB_TASK_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."PK_CUSTORDERID"
ON "TESTORDER"."CSB_TASK_INFO" ("CUSTORDERNO" ASC, "PRODINSTID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table CSB_TASK_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("CUSTORDERNO" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("WORKORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD CHECK ("STATUSTYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CSB_TASK_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."CSB_TASK_INFO" ADD PRIMARY KEY ("TASK_ID");

-- ----------------------------
-- Indexes structure for table CUSTOMER
-- ----------------------------

-- ----------------------------
-- Checks structure for table CUSTOMER
-- ----------------------------
ALTER TABLE "TESTORDER"."CUSTOMER" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CUSTOMER" ADD CHECK ("COMPANY_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."CUSTOMER" ADD CHECK ("SHARDING_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table CUSTOMER
-- ----------------------------
ALTER TABLE "TESTORDER"."CUSTOMER" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table DCOOS_NOTICE_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IND_DCOOS_NTC01"
ON "TESTORDER"."DCOOS_NOTICE_INFO" ("CUSTORDERNO" ASC, "PRODINSTID" ASC, "PRODUCTITEMID" ASC, "STATUSTYPE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table DCOOS_NOTICE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."DCOOS_NOTICE_INFO" ADD CHECK ("CUSTORDERID" IS NOT NULL);
ALTER TABLE "TESTORDER"."DCOOS_NOTICE_INFO" ADD CHECK ("PRODINSTID" IS NOT NULL);
ALTER TABLE "TESTORDER"."DCOOS_NOTICE_INFO" ADD CHECK ("PRODUCTITEMID" IS NOT NULL);
ALTER TABLE "TESTORDER"."DCOOS_NOTICE_INFO" ADD CHECK ("STATUSTYPE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table IDC_QUERY_SCHEDULE
-- ----------------------------
CREATE INDEX "TESTORDER"."PK_IDCQUERY_INX01"
ON "TESTORDER"."IDC_QUERY_SCHEDULE" ("CRM_ORDER_NUMBER" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."PK_IDCQUERY_INX02"
ON "TESTORDER"."IDC_QUERY_SCHEDULE" ("IDC_ORDER_ID" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."PK_IDCQUERY_INX03"
ON "TESTORDER"."IDC_QUERY_SCHEDULE" ("WORKID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table IDC_QUERY_SCHEDULE
-- ----------------------------
ALTER TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" ADD CHECK ("LINE_NUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table IDC_QUERY_SCHEDULE
-- ----------------------------
ALTER TABLE "TESTORDER"."IDC_QUERY_SCHEDULE" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table JT_CONFIG_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table JT_CONFIG_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."JT_CONFIG_INFO" ADD CHECK ("FIELD" IS NOT NULL);
ALTER TABLE "TESTORDER"."JT_CONFIG_INFO" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table JT_CONFIG_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."JT_CONFIG_INFO" ADD PRIMARY KEY ("FIELD", "NAME");

-- ----------------------------
-- Indexes structure for table ORIGIN_ORDER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD CHECK ("TOTAL_PAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION");

-- ----------------------------
-- Indexes structure for table ORIGIN_ORDER_INFO_OLD
-- ----------------------------

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_INFO_OLD
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD CHECK ("TOTAL_PAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_ORDER_INFO_OLD
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_INFO_OLD" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION");

-- ----------------------------
-- Indexes structure for table ORIGIN_ORDER_LINEITEM
-- ----------------------------
CREATE INDEX "TESTORDER"."ORIGIN_ORDER_LINEITEM_IDX_P"
ON "TESTORDER"."ORIGIN_ORDER_LINEITEM" ("CRM_ORDER_NUMBER" ASC)
PARALLEL 10
NOLOGGING;

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_LINEITEM
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("PRODUCT_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD CHECK ("SUB_ACTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_ORDER_LINEITEM
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_ID");

-- ----------------------------
-- Indexes structure for table ORIGIN_ORDER_LINEITEM_OLD
-- ----------------------------

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_LINEITEM_OLD
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("PRODUCT_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD CHECK ("SUB_ACTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_ORDER_LINEITEM_OLD
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_LINEITEM_OLD" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_ID");

-- ----------------------------
-- Indexes structure for table ORIGIN_ORDER_PAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_PAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE" ADD CHECK ("CURRENT_PAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_ORDER_PAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "CURRENT_PAGE");

-- ----------------------------
-- Checks structure for table ORIGIN_ORDER_PAGE_NEW
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE_NEW" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE_NEW" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_ORDER_PAGE_NEW" ADD CHECK ("CURRENT_PAGE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table ORIGIN_PROMOTION_LINEITEM
-- ----------------------------

-- ----------------------------
-- Checks structure for table ORIGIN_PROMOTION_LINEITEM
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("SHCTPROMSUBTYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("SUB_ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD CHECK ("AID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ORIGIN_PROMOTION_LINEITEM
-- ----------------------------
ALTER TABLE "TESTORDER"."ORIGIN_PROMOTION_LINEITEM" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_ID");

-- ----------------------------
-- Indexes structure for table P6_CANCELORDER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_CANCELORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_CANCELORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CANCELORDER_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table P6_CONFIG_DATAMAPPING
-- ----------------------------
CREATE INDEX "TESTORDER"."IND_DATAMAPPING_NAMESPACE"
ON "TESTORDER"."P6_CONFIG_DATAMAPPING" ("NAMESPACE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table P6_CONFIG_DATAMAPPING
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("SOURCE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("NAMESPACE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("FIELD_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("FROM_VALUE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("TO_VALUE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_CONFIG_DATAMAPPING
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_DATAMAPPING" ADD PRIMARY KEY ("NAMESPACE", "VERSION", "SOURCE", "TYPE", "FIELD_NAME", "FROM_VALUE");

-- ----------------------------
-- Indexes structure for table P6_CONFIG_PRODUCT
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_CONFIG_PRODUCT
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_PRODUCT" ADD CHECK ("PRODUCT_GROUP" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_PRODUCT" ADD CHECK ("NAMESPACE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_PRODUCT" ADD CHECK ("SOURCE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_PRODUCT" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_CONFIG_PRODUCT
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_PRODUCT" ADD PRIMARY KEY ("PRODUCT_GROUP");

-- ----------------------------
-- Indexes structure for table P6_CONFIG_XSLT
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_CONFIG_XSLT
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD CHECK ("NAMESPACE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD CHECK ("SOURCE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD CHECK ("XSLT_PATH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_CONFIG_XSLT
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_CONFIG_XSLT" ADD PRIMARY KEY ("SOURCE", "TYPE", "NAMESPACE", "VERSION");

-- ----------------------------
-- Indexes structure for table P6_ORDER_INFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IDX_ORDER_AID"
ON "TESTORDER"."P6_ORDER_INFO" ("CRM_ORDER_NUMBER" ASC, "AID" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."IDX_ORDER_ID"
ON "TESTORDER"."P6_ORDER_INFO" ("P6_ORDER_ID" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."IND_CRM_P6"
ON "TESTORDER"."P6_ORDER_INFO" ("CRM_ORDER_NUMBER" ASC, "VERSION" ASC, "P6_ORDER_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table P6_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("LINE_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("PRODUCT_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("SUB_ACTION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("ROOT_LINE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("ROOT_AID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD CHECK ("ORDER_LEVEL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_ORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_ORDER_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION", "LINE_NUMBER");

-- ----------------------------
-- Indexes structure for table P6_ORDERSET_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_ORDERSET_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_ORDERSET_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "VERSION");

-- ----------------------------
-- Checks structure for table P6_ORDERSET_INFO_NEW
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO_NEW" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO_NEW" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_ORDERSET_INFO_NEW" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Checks structure for table P6_PASSORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_PASSORDER_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table P6_SCREENORDER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_SCREENORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_SCREENORDER_INFO" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_SCREENORDER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_SCREENORDER_INFO" ADD PRIMARY KEY ("CRM_ORDER_NUMBER");

-- ----------------------------
-- Indexes structure for table P6_STATUS_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table P6_STATUS_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD CHECK ("MESSAGE_TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD CHECK ("MESSAGE_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD CHECK ("PROCESSED" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table P6_STATUS_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_STATUS_INFO" ADD PRIMARY KEY ("P6_ORDER_ID", "MESSAGE_TIME", "MESSAGE_TYPE", "VERSION");

-- ----------------------------
-- Checks structure for table P6_STATUS_INFO_NEW
-- ----------------------------
ALTER TABLE "TESTORDER"."P6_STATUS_INFO_NEW" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO_NEW" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO_NEW" ADD CHECK ("MESSAGE_TYPE" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO_NEW" ADD CHECK ("MESSAGE_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."P6_STATUS_INFO_NEW" ADD CHECK ("PROCESSED" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table PAL_CANCEL_REQUEST
-- ----------------------------

-- ----------------------------
-- Checks structure for table PAL_CANCEL_REQUEST
-- ----------------------------
ALTER TABLE "TESTORDER"."PAL_CANCEL_REQUEST" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."PAL_CANCEL_REQUEST" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PAL_CANCEL_REQUEST" ADD CHECK ("STATUS_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PAL_CANCEL_REQUEST
-- ----------------------------
ALTER TABLE "TESTORDER"."PAL_CANCEL_REQUEST" ADD PRIMARY KEY ("CRM_ORDER_NUMBER", "P6_ORDER_ID");

-- ----------------------------
-- Indexes structure for table PERMISSION
-- ----------------------------

-- ----------------------------
-- Checks structure for table PERMISSION
-- ----------------------------
ALTER TABLE "TESTORDER"."PERMISSION" ADD CHECK ("PERMISSION_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PERMISSION" ADD CHECK ("PERMISSION_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PERMISSION
-- ----------------------------
ALTER TABLE "TESTORDER"."PERMISSION" ADD PRIMARY KEY ("PERMISSION_ID");

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_DATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table PLSQL_PROFILER_DATA
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_DATA" ADD CHECK ("LINE#" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_DATA
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_DATA" ADD PRIMARY KEY ("RUNID", "UNIT_NUMBER", "LINE#");

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_RUNS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_RUNS
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_RUNS" ADD PRIMARY KEY ("RUNID");

-- ----------------------------
-- Indexes structure for table PLSQL_PROFILER_UNITS
-- ----------------------------

-- ----------------------------
-- Checks structure for table PLSQL_PROFILER_UNITS
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_UNITS" ADD CHECK ("TOTAL_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PLSQL_PROFILER_UNITS
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_UNITS" ADD PRIMARY KEY ("RUNID", "UNIT_NUMBER");

-- ----------------------------
-- Indexes structure for table PRODUCT_PROM
-- ----------------------------

-- ----------------------------
-- Checks structure for table PRODUCT_PROM
-- ----------------------------
ALTER TABLE "TESTORDER"."PRODUCT_PROM" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."PRODUCT_PROM" ADD CHECK ("SHCT_PROMOTION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PRODUCT_PROM
-- ----------------------------
ALTER TABLE "TESTORDER"."PRODUCT_PROM" ADD PRIMARY KEY ("PRODUCT_CODE", "SHCT_PROMOTION_ID");

-- ----------------------------
-- Checks structure for table PROM_ASSET_MAPPING
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_ASSET_MAPPING" ADD CHECK ("PAID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_ASSET_MAPPING" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_ASSET_MAPPING" ADD CHECK ("AID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_ASSET_MAPPING" ADD CHECK ("PARTNUMBER" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table PROM_PROD_MAPPING
-- ----------------------------
CREATE INDEX "TESTORDER"."PROM_PROD_PP_PK"
ON "TESTORDER"."PROM_PROD_MAPPING" ("PRODUCT_CODE" ASC, "PROMOTION_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table PROM_PROD_MAPPING
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING" ADD CHECK ("PROMOTION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PROM_PROD_MAPPING
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table PROM_PROD_MAPPING_TEMP
-- ----------------------------
CREATE INDEX "TESTORDER"."PROM_PROD_PP_PK_TEMP"
ON "TESTORDER"."PROM_PROD_MAPPING_TEMP" ("PRODUCT_CODE" ASC, "PROMOTION_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table PROM_PROD_MAPPING_TEMP
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP" ADD CHECK ("PROMOTION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PROM_PROD_MAPPING_TEMP
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING_TEMP" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table PROM_PROD_MAPPING1
-- ----------------------------
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING1" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING1" ADD CHECK ("PRODUCT_CODE" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROM_PROD_MAPPING1" ADD CHECK ("PROMOTION_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table PROMOTION_MESSAGE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table PROMOTION_MESSAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."PROMOTION_MESSAGE" ADD PRIMARY KEY ("MESSAGE_ID");

-- ----------------------------
-- Indexes structure for table PROMOTION_ORDER_SENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table PROMOTION_ORDER_SENT
-- ----------------------------
ALTER TABLE "TESTORDER"."PROMOTION_ORDER_SENT" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PROMOTION_ORDER_SENT
-- ----------------------------
ALTER TABLE "TESTORDER"."PROMOTION_ORDER_SENT" ADD PRIMARY KEY ("CRM_ORDER_NUMBER");

-- ----------------------------
-- Indexes structure for table PROMOTIONINFO
-- ----------------------------
CREATE INDEX "TESTORDER"."IND_CRM_ORDER_NUMBER"
ON "TESTORDER"."PROMOTIONINFO" ("CRM_ORDER_NUMBER" ASC)
PARALLEL 5
LOGGING;
CREATE INDEX "TESTORDER"."IND_PHONE_NO"
ON "TESTORDER"."PROMOTIONINFO" ("PHONE_NO" ASC, "UNIQUETRACKNUMBER" ASC)
LOGGING;
CREATE INDEX "TESTORDER"."IND_STATUS"
ON "TESTORDER"."PROMOTIONINFO" ("STATUS" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table PROMOTIONINFO
-- ----------------------------
ALTER TABLE "TESTORDER"."PROMOTIONINFO" ADD CHECK ("MESSAGE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROMOTIONINFO" ADD CHECK ("PHONE_NO" IS NOT NULL);
ALTER TABLE "TESTORDER"."PROMOTIONINFO" ADD CHECK ("PARTNUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PROMOTIONINFO
-- ----------------------------
ALTER TABLE "TESTORDER"."PROMOTIONINFO" ADD PRIMARY KEY ("MESSAGE_ID");

-- ----------------------------
-- Indexes structure for table RECEIVED_MESSAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table RECEIVED_MESSAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."RECEIVED_MESSAGE" ADD CHECK ("MESSAGE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."RECEIVED_MESSAGE" ADD CHECK ("MESSAGE_BODY" IS NOT NULL);
ALTER TABLE "TESTORDER"."RECEIVED_MESSAGE" ADD CHECK ("RECEIVED_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."RECEIVED_MESSAGE" ADD CHECK ("MESSAGE_SOURCE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table RECEIVED_MESSAGE
-- ----------------------------
ALTER TABLE "TESTORDER"."RECEIVED_MESSAGE" ADD PRIMARY KEY ("MESSAGE_ID");

-- ----------------------------
-- Indexes structure for table ROLE_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table ROLE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."ROLE_INFO" ADD CHECK ("ROLE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ROLE_INFO" ADD CHECK ("ROLE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ROLE_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."ROLE_INFO" ADD PRIMARY KEY ("ROLE_ID");

-- ----------------------------
-- Indexes structure for table ROLE_PERMISSION
-- ----------------------------

-- ----------------------------
-- Checks structure for table ROLE_PERMISSION
-- ----------------------------
ALTER TABLE "TESTORDER"."ROLE_PERMISSION" ADD CHECK ("ROLE_PERMISSION_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ROLE_PERMISSION" ADD CHECK ("ROLE_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."ROLE_PERMISSION" ADD CHECK ("PERMISSION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ROLE_PERMISSION
-- ----------------------------
ALTER TABLE "TESTORDER"."ROLE_PERMISSION" ADD PRIMARY KEY ("ROLE_PERMISSION_ID");

-- ----------------------------
-- Indexes structure for table SERVICE_ORDER_SENT
-- ----------------------------
CREATE INDEX "TESTORDER"."INDEX_SO"
ON "TESTORDER"."SERVICE_ORDER_SENT" ("CRM_ORDER_NUMBER" ASC, "SO_VERSION" ASC, "LINENO" ASC)
PARALLEL 5
LOGGING;

-- ----------------------------
-- Checks structure for table SERVICE_ORDER_SENT
-- ----------------------------
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT" ADD CHECK ("CRM_ORDER_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT" ADD CHECK ("SO_BODY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SERVICE_ORDER_SENT
-- ----------------------------
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SERVICE_ORDER_SENT_PART
-- ----------------------------

-- ----------------------------
-- Checks structure for table SERVICE_ORDER_SENT_PART
-- ----------------------------
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" ADD CHECK ("CRM_ORDER_VERSION" IS NOT NULL);
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" ADD CHECK ("SO_BODY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SERVICE_ORDER_SENT_PART
-- ----------------------------
ALTER TABLE "TESTORDER"."SERVICE_ORDER_SENT_PART" ADD PRIMARY KEY ("ID", "SAVED_TIME");

-- ----------------------------
-- Indexes structure for table SIB000
-- ----------------------------
CREATE INDEX "TESTORDER"."SIB000STREAMIX"
ON "TESTORDER"."SIB000" ("STREAM_ID" ASC, "SEQUENCE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table SIB000
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB000" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB000" ADD CHECK ("STREAM_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB000" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB000" ADD CHECK ("DATA_SIZE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIB000
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB000" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SIB001
-- ----------------------------
CREATE INDEX "TESTORDER"."SIB001STREAMIX"
ON "TESTORDER"."SIB001" ("STREAM_ID" ASC, "SEQUENCE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table SIB001
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB001" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB001" ADD CHECK ("STREAM_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB001" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB001" ADD CHECK ("DATA_SIZE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIB001
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB001" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SIB002
-- ----------------------------
CREATE INDEX "TESTORDER"."SIB002STREAMIX"
ON "TESTORDER"."SIB002" ("STREAM_ID" ASC, "SEQUENCE" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table SIB002
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB002" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB002" ADD CHECK ("STREAM_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB002" ADD CHECK ("CLASS_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIB002" ADD CHECK ("DATA_SIZE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIB002
-- ----------------------------
ALTER TABLE "TESTORDER"."SIB002" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SIBCLASSMAP
-- ----------------------------

-- ----------------------------
-- Checks structure for table SIBCLASSMAP
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBCLASSMAP" ADD CHECK ("CLASSID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIBCLASSMAP" ADD CHECK ("URI" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIBCLASSMAP
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBCLASSMAP" ADD PRIMARY KEY ("CLASSID");

-- ----------------------------
-- Indexes structure for table SIBKEYS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SIBKEYS
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBKEYS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIBKEYS" ADD CHECK ("LAST_KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIBKEYS
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBKEYS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SIBLISTING
-- ----------------------------

-- ----------------------------
-- Checks structure for table SIBLISTING
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBLISTING" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIBLISTING" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIBLISTING" ADD CHECK ("TABLE_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIBLISTING
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBLISTING" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SIBXACTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SIBXACTS
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBXACTS" ADD CHECK ("XID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SIBXACTS" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SIBXACTS
-- ----------------------------
ALTER TABLE "TESTORDER"."SIBXACTS" ADD PRIMARY KEY ("XID");

-- ----------------------------
-- Indexes structure for table SYSTEM_LOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table SYSTEM_LOG
-- ----------------------------
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("CLASS_LOADER" IS NOT NULL);
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("LOG_TIME" IS NOT NULL);
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("LOG_LEVEL" IS NOT NULL);
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("LOG" IS NOT NULL);
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD CHECK ("LOG_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SYSTEM_LOG
-- ----------------------------
ALTER TABLE "TESTORDER"."SYSTEM_LOG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Triggers structure for table TEST
-- ----------------------------
CREATE OR REPLACE TRIGGER "TESTORDER"."AUD_TEST" AFTER DELETE OR UPDATE OF "TEST2" ON "TESTORDER"."TEST" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
begin 
      insert   into   aud_test   
      (  id                            ,
                 TERMINAL           ,                                                                
                 SESSIONID          ,                                                                
                 CURRENT_USER       ,                                                                
                 CURRENT_USERID     ,                                                                
                 SESSION_USER       ,                                                                
                 SESSION_USERID     ,                                                                
                 PROXY_USER         ,                                                                
                 PROXY_USERID       ,                                                                
                 DB_NAME            ,                                                                
                 HOST               ,                                                                
                 OS_USER            ,                                                                
                 IP_ADDRESS         ,    
                 time                      ,
                 dowhat                         ,
                 newvalue                        ,
                 oldvalue                        
            )
      select 
        SEQ_AUD_ID.nextval,
                 SYS_CONTEXT('USERENV','TERMINAL') terminal, 
                 SYS_CONTEXT('USERENV','SESSIONID') sessionid, 
                 SYS_CONTEXT('USERENV','CURRENT_USER') current_user, 
                 SYS_CONTEXT('USERENV','CURRENT_USERID') current_userid, 
                 SYS_CONTEXT('USERENV','SESSION_USER') session_user, 
                 SYS_CONTEXT('USERENV','SESSION_USERID') session_userid, 
                 SYS_CONTEXT('USERENV','PROXY_USER') proxy_user, 
                 SYS_CONTEXT('USERENV','PROXY_USERID') proxy_userid, 
                 SYS_CONTEXT('USERENV','DB_NAME') db_name, 
                 SYS_CONTEXT('USERENV','HOST') host, 
                 SYS_CONTEXT('USERENV','OS_USER') os_user, 
                 SYS_CONTEXT('USERENV','IP_ADDRESS') ip_address,
                 sysdate,
                 '',
                 :new.test2,
                 :old.test2
                from dual
                ; 
                
                 
                 
   end   aud_test_update; 
  
  
  
  
  
  
  
  
  
/*

CREATE TABLE AUD_TEST
(
  id                            number,
  TERMINAL        VARCHAR2(256 BYTE),
  SESSIONID       VARCHAR2(256 BYTE),
  CURRENT_USER    VARCHAR2(256 BYTE),
  CURRENT_USERID  VARCHAR2(256 BYTE),
  SESSION_USER    VARCHAR2(256 BYTE),
  SESSION_USERID  VARCHAR2(256 BYTE),
  PROXY_USER      VARCHAR2(256 BYTE),
  PROXY_USERID    VARCHAR2(256 BYTE),
  DB_NAME         VARCHAR2(256 BYTE),
  HOST            VARCHAR2(256 BYTE),
  OS_USER         VARCHAR2(256 BYTE),
  IP_ADDRESS      VARCHAR2(256 BYTE),
  time            date                            ,
  dowhat          varchar2(4000),
  newvalue        varchar2(4000),
  oldvalue        varchar2(4000)
 
)
 
CREATE SEQUENCE SEQ_AUD_ID
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999
NOCACHE 
CYCLE 

*/ ;

-- ----------------------------
-- Indexes structure for table USER_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table USER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."USER_INFO" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "TESTORDER"."USER_INFO" ADD CHECK ("USER_NAME" IS NOT NULL);
ALTER TABLE "TESTORDER"."USER_INFO" ADD CHECK ("USER_PWD" IS NOT NULL);
ALTER TABLE "TESTORDER"."USER_INFO" ADD CHECK ("USER_ROLE" IS NOT NULL);
ALTER TABLE "TESTORDER"."USER_INFO" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table USER_INFO
-- ----------------------------
ALTER TABLE "TESTORDER"."USER_INFO" ADD PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Foreign Key structure for table "TESTORDER"."PLSQL_PROFILER_DATA"
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_DATA" ADD FOREIGN KEY ("RUNID", "UNIT_NUMBER") REFERENCES "TESTORDER"."PLSQL_PROFILER_UNITS" ("RUNID", "UNIT_NUMBER");

-- ----------------------------
-- Foreign Key structure for table "TESTORDER"."PLSQL_PROFILER_UNITS"
-- ----------------------------
ALTER TABLE "TESTORDER"."PLSQL_PROFILER_UNITS" ADD FOREIGN KEY ("RUNID") REFERENCES "TESTORDER"."PLSQL_PROFILER_RUNS" ("RUNID");
