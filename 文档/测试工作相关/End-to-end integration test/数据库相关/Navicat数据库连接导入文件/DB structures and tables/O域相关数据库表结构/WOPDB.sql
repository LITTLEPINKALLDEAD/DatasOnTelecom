/*
Navicat Oracle Data Transfer
Oracle Client Version : 11.2.0.4.0

Source Server         : WOPTest
Source Server Version : 100200
Source Host           : 10.145.206.4:1521
Source Schema         : WOPDB

Target Server Type    : ORACLE
Target Server Version : 100200
File Encoding         : 65001

Date: 2019-10-25 11:00:44
*/


-- ----------------------------
-- Table structure for DDL_OPER_LOG
-- ----------------------------
DROP TABLE "WOPDB"."DDL_OPER_LOG";
CREATE TABLE "WOPDB"."DDL_OPER_LOG" (
"DB_OBJ_NAME" VARCHAR2(20 BYTE) NULL ,
"DB_OBJ_TYPE" VARCHAR2(20 BYTE) NULL ,
"OPER_ACTION" VARCHAR2(20 BYTE) NULL ,
"OPER_USER" VARCHAR2(20 BYTE) NULL ,
"OPER_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for GG_NO
-- ----------------------------
DROP TABLE "WOPDB"."GG_NO";
CREATE TABLE "WOPDB"."GG_NO" (
"GTN_TELEPHONE" VARCHAR2(20 BYTE) NOT NULL ,
"GTN_STATUS" VARCHAR2(2 BYTE) NULL ,
"GTN_DATE" DATE NULL ,
"GTN_TYPE" VARCHAR2(2 BYTE) NULL ,
"GTN_FEE_STANDARD" VARCHAR2(20 BYTE) NULL ,
"HLR_ID" NUMBER NULL ,
"GTN_ISPREACTIVED" VARCHAR2(2 BYTE) NULL ,
"GTN_EESN" VARCHAR2(20 BYTE) NULL ,
"GTN_SALESGROUPNO" VARCHAR2(20 BYTE) NULL ,
"BILLINGAREA_ID" NUMBER NULL ,
"GTN_SELECT_FLAG" NUMBER(2) NULL ,
"GTN_IMSI" VARCHAR2(20 BYTE) NULL ,
"HLR_CODE" VARCHAR2(50 BYTE) NULL ,
"HLR_NAME" VARCHAR2(50 BYTE) NULL ,
"HLR_VENDER" VARCHAR2(50 BYTE) NULL ,
"AREA_CODE" VARCHAR2(100 BYTE) NULL ,
"AREA_NAME" VARCHAR2(100 BYTE) NULL ,
"SCP_CODE" VARCHAR2(50 BYTE) NULL ,
"GTN_ISPREPAID" VARCHAR2(10 BYTE) NULL ,
"GTN_RESERVE_CODE" VARCHAR2(20 BYTE) NULL ,
"GTN_RESERVE_OPER" VARCHAR2(20 BYTE) NULL ,
"GTN_CW_FLAG" VARCHAR2(20 BYTE) NULL ,
"GTN_CLASS" VARCHAR2(50 BYTE) NULL ,
"GTN_NOTE" VARCHAR2(200 BYTE) NULL ,
"GTN_USER_FLAG" VARCHAR2(10 BYTE) NULL ,
"GTN_SELECT_ID" VARCHAR2(20 BYTE) NULL ,
"GTN_IMS_CODE" VARCHAR2(50 BYTE) NULL ,
"GTN_RESERVE1" VARCHAR2(500 BYTE) NULL ,
"GTN_RESERVE2" VARCHAR2(500 BYTE) NULL ,
"GTN_RESERVE3" VARCHAR2(200 BYTE) NULL ,
"GTN_RESERVE4" VARCHAR2(200 BYTE) NULL ,
"GTN_RESERVE5" VARCHAR2(200 BYTE) NULL ,
"GTN_YZ_SERIAL" VARCHAR2(50 BYTE) NULL ,
"GTN_YZ_DATE" DATE NULL ,
"GTN_YC_SERIAL" VARCHAR2(50 BYTE) NULL ,
"GTN_YC_DATE" DATE NULL ,
"GTN_YC_ISPREPAID" VARCHAR2(10 BYTE) NULL ,
"GTN_LEVEL" VARCHAR2(50 BYTE) NULL ,
"GTN_SET_CLASSLEVEL" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KHXX_BYDKCODE_GCFA_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."KHXX_BYDKCODE_GCFA_VIEW";
CREATE TABLE "WOPDB"."KHXX_BYDKCODE_GCFA_VIEW" (
"PKSEQ" VARCHAR2(200 BYTE) NOT NULL ,
"GCLX" VARCHAR2(200 BYTE) NULL ,
"AZFS" VARCHAR2(200 BYTE) NULL ,
"SL" VARCHAR2(200 BYTE) NULL ,
"DW" VARCHAR2(200 BYTE) NULL ,
"SBBH" VARCHAR2(200 BYTE) NULL ,
"SBDZ" VARCHAR2(200 BYTE) NULL ,
"GCMS" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KHXX_BYDKCODE_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."KHXX_BYDKCODE_VIEW";
CREATE TABLE "WOPDB"."KHXX_BYDKCODE_VIEW" (
"PK_SEQ" VARCHAR2(200 BYTE) NOT NULL ,
"CUSTOMER_CODE" VARCHAR2(200 BYTE) NULL ,
"CUSTOMER_NAME" VARCHAR2(200 BYTE) NULL ,
"PEOPLE_NAME" VARCHAR2(200 BYTE) NULL ,
"PEOPLE_TEL" VARCHAR2(200 BYTE) NULL ,
"MANAGER" VARCHAR2(200 BYTE) NULL ,
"MANAGER_TEL" VARCHAR2(200 BYTE) NULL ,
"KHJLSSBM" VARCHAR2(200 BYTE) NULL ,
"SN" VARCHAR2(200 BYTE) NULL ,
"SJJD" VARCHAR2(200 BYTE) NULL ,
"KHZCJL" VARCHAR2(200 BYTE) NULL ,
"KHZCJL_TEL" VARCHAR2(200 BYTE) NULL ,
"TOPENGIEER" VARCHAR2(200 BYTE) NULL ,
"TOPENGINEER_TEL" VARCHAR2(200 BYTE) NULL ,
"JT_CODE" VARCHAR2(200 BYTE) NULL ,
"CODE" VARCHAR2(200 BYTE) NULL ,
"PROJECT_STARTDATE" VARCHAR2(200 BYTE) NULL ,
"OPERARORNAME" VARCHAR2(200 BYTE) NULL ,
"SENDER_TEL" VARCHAR2(200 BYTE) NULL ,
"CUSTOMER_TYPE" VARCHAR2(200 BYTE) NULL ,
"DWHDJ" VARCHAR2(200 BYTE) NULL ,
"YWKTDJ" VARCHAR2(200 BYTE) NULL ,
"KHFWDJ" VARCHAR2(200 BYTE) NULL ,
"DATE_ON_DEMAND" VARCHAR2(200 BYTE) NULL ,
"PROSTARTDATE" VARCHAR2(200 BYTE) NULL ,
"IS_URGE" VARCHAR2(200 BYTE) NULL ,
"SZQJ" VARCHAR2(200 BYTE) NULL ,
"ZJ_ADDRESS" VARCHAR2(200 BYTE) NULL ,
"YWXQ" VARCHAR2(200 BYTE) NULL ,
"BZ1" VARCHAR2(200 BYTE) NULL ,
"PROJECT_NAME" VARCHAR2(200 BYTE) NULL ,
"GSXMJINGLI" VARCHAR2(200 BYTE) NULL ,
"QJXMJINGLI" VARCHAR2(200 BYTE) NULL ,
"FAZDR" VARCHAR2(200 BYTE) NULL ,
"ICT_MANAGER" VARCHAR2(200 BYTE) NULL ,
"FAMS" VARCHAR2(200 BYTE) NULL ,
"DOCNAME" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for MIE_MAP
-- ----------------------------
DROP TABLE "WOPDB"."MIE_MAP";
CREATE TABLE "WOPDB"."MIE_MAP" (
"ID" NUMBER NOT NULL ,
"REQ_DATE" DATE NOT NULL ,
"ITMS_NO" VARCHAR2(50 BYTE) NULL ,
"ITMS_NO1" VARCHAR2(50 BYTE) NULL ,
"ITMS_NO2" VARCHAR2(50 BYTE) NULL ,
"REQ_CTX" VARCHAR2(2000 BYTE) NOT NULL ,
"REQ_NO" VARCHAR2(50 BYTE) NOT NULL ,
"MANTIS_NO" VARCHAR2(50 BYTE) NULL ,
"REQ_PERSON" VARCHAR2(50 BYTE) NULL ,
"REP_PERSON" VARCHAR2(50 BYTE) NULL ,
"DOMAIN" VARCHAR2(50 BYTE) NOT NULL ,
"SYSMODULE" VARCHAR2(50 BYTE) NOT NULL ,
"ARV_DATE" DATE NULL ,
"REQ_DETAIL" VARCHAR2(2000 BYTE) NULL ,
"SYS_REP_PERSON" VARCHAR2(50 BYTE) NULL ,
"SYS_DEV_PERSON" VARCHAR2(500 BYTE) NULL ,
"SYS_DESIGN" VARCHAR2(2000 BYTE) NULL ,
"SUBMIT_DATE" DATE NULL ,
"COMPL_DATE" DATE NULL ,
"EFFORT" NUMBER NULL ,
"PROJ_NO" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."ITMS_NO" IS '需求单号';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."ITMS_NO1" IS '子需求单号';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."ITMS_NO2" IS '域需求单号';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."REQ_CTX" IS '需求内容';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."REQ_NO" IS '系统需求单号';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."MANTIS_NO" IS 'mantis号';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."REQ_PERSON" IS '需求发起人';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."REP_PERSON" IS '需求负责人';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."DOMAIN" IS '域';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."SYSMODULE" IS '系统模块';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."ARV_DATE" IS '下达时间';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."REQ_DETAIL" IS '需求分解内容';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."SYS_REP_PERSON" IS '系统负责人';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."SYS_DEV_PERSON" IS '开发负责人';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."SYS_DESIGN" IS '系统设计';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."SUBMIT_DATE" IS '提交时间';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."COMPL_DATE" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."EFFORT" IS '工作量（人天）';
COMMENT ON COLUMN "WOPDB"."MIE_MAP"."PROJ_NO" IS '项目编号';

-- ----------------------------
-- Table structure for NGI
-- ----------------------------
DROP TABLE "WOPDB"."NGI";
CREATE TABLE "WOPDB"."NGI" (
"NGI_SEQUENCE_NO" VARCHAR2(20 BYTE) NOT NULL ,
"NGI_SERIAL_NO" VARCHAR2(17 BYTE) NOT NULL ,
"NGI_RBR_BRA_CODE" VARCHAR2(10 BYTE) NOT NULL ,
"NGI_ORDER" VARCHAR2(2 BYTE) NOT NULL ,
"NGI_PROCESS_TYPE" VARCHAR2(2 BYTE) NOT NULL ,
"NGI_PROCESS_DESC" VARCHAR2(20 BYTE) NULL ,
"NGI_WP_TYPE" VARCHAR2(2 BYTE) NOT NULL ,
"NGI_SERVICE_TYPE" VARCHAR2(20 BYTE) NULL ,
"NGI_SERVICE_ID" VARCHAR2(20 BYTE) NULL ,
"NGI_CREATE_DATE" DATE NULL ,
"NGI_MODIFY_DATE" DATE NULL ,
"NGI_FINISH_DATE" DATE NULL ,
"NGI_STATUS" VARCHAR2(2 BYTE) NULL ,
"NGI_ERROR" VARCHAR2(200 BYTE) NULL ,
"NGI_DO_STATUS" VARCHAR2(2 BYTE) NULL ,
"NGI_DO_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NO_ONU_OLT
-- ----------------------------
DROP TABLE "WOPDB"."NO_ONU_OLT";
CREATE TABLE "WOPDB"."NO_ONU_OLT" (
"OLT_DEVICE_ID" VARCHAR2(20 BYTE) NOT NULL ,
"OLT_DEVICE_NAME" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NPI
-- ----------------------------
DROP TABLE "WOPDB"."NPI";
CREATE TABLE "WOPDB"."NPI" (
"NPI_SEQUENCE_NO" VARCHAR2(20 BYTE) NOT NULL ,
"NPI_NEWOLD_FLAG" VARCHAR2(4 BYTE) NOT NULL ,
"NPI_PARAMETER" VARCHAR2(40 BYTE) NULL ,
"NPI_CONTENT" VARCHAR2(200 BYTE) NULL ,
"NPI_CREATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PINGTAI_CONFIG_INFO
-- ----------------------------
DROP TABLE "WOPDB"."PINGTAI_CONFIG_INFO";
CREATE TABLE "WOPDB"."PINGTAI_CONFIG_INFO" (
"PINGTAI_CODE" VARCHAR2(40 BYTE) NOT NULL ,
"PINGTAI_NAME" VARCHAR2(40 BYTE) NOT NULL ,
"PINGTAI_CDMA" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."PINGTAI_CONFIG_INFO"."PINGTAI_CDMA" IS '1为移动 0为非移动';

-- ----------------------------
-- Table structure for TBL_CDMA_CRBT_BUNDLETYPE
-- ----------------------------
DROP TABLE "WOPDB"."TBL_CDMA_CRBT_BUNDLETYPE";
CREATE TABLE "WOPDB"."TBL_CDMA_CRBT_BUNDLETYPE" (
"BUNDLE_TYPE" NVARCHAR2(100) NULL ,
"RINGID" NVARCHAR2(100) NULL ,
"RINGTYPE" NVARCHAR2(100) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TC_CREATE_INFO
-- ----------------------------
DROP TABLE "WOPDB"."TC_CREATE_INFO";
CREATE TABLE "WOPDB"."TC_CREATE_INFO" (
"TAOCANID" VARCHAR2(100 BYTE) NULL ,
"CREATENAME" VARCHAR2(100 BYTE) NULL ,
"CREATEDATE" DATE NULL ,
"UPDAATEDATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."TC_CREATE_INFO"."TAOCANID" IS '套餐ID';
COMMENT ON COLUMN "WOPDB"."TC_CREATE_INFO"."CREATENAME" IS '套餐创建配置人员';
COMMENT ON COLUMN "WOPDB"."TC_CREATE_INFO"."CREATEDATE" IS '套餐创建时间';
COMMENT ON COLUMN "WOPDB"."TC_CREATE_INFO"."UPDAATEDATE" IS '修改时间';

-- ----------------------------
-- Table structure for TEMP_WP_USER
-- ----------------------------
DROP TABLE "WOPDB"."TEMP_WP_USER";
CREATE TABLE "WOPDB"."TEMP_WP_USER" (
"ADMIN_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_NAME" VARCHAR2(100 BYTE) NULL ,
"ADMIN_NAME" VARCHAR2(50 BYTE) NULL ,
"ADMIN_PWD" VARCHAR2(10 BYTE) NULL ,
"DEPT_ID" VARCHAR2(50 BYTE) NULL ,
"DEPT_NAME" VARCHAR2(100 BYTE) NULL ,
"WORK_STATION" VARCHAR2(100 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"CONTACT_TEL" VARCHAR2(50 BYTE) NULL ,
"CONTACT_PHS" VARCHAR2(50 BYTE) NULL ,
"CONTACT_MOBILE" VARCHAR2(50 BYTE) NULL ,
"E_MAIL" VARCHAR2(100 BYTE) NULL ,
"CREATE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"FUNCTION_SET" VARCHAR2(100 BYTE) NULL ,
"TASK_SET" VARCHAR2(100 BYTE) NULL ,
"DISTRICT_SET" VARCHAR2(100 BYTE) NULL ,
"FLEX_RULE" VARCHAR2(100 BYTE) NULL ,
"REMARK0" VARCHAR2(100 BYTE) NULL ,
"REMARK1" VARCHAR2(100 BYTE) NULL ,
"REMARK2" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_WP_USER_CRYPT
-- ----------------------------
DROP TABLE "WOPDB"."TEMP_WP_USER_CRYPT";
CREATE TABLE "WOPDB"."TEMP_WP_USER_CRYPT" (
"ADMIN_ID" VARCHAR2(50 BYTE) NOT NULL ,
"ADMIN_PWD" VARCHAR2(10 BYTE) NULL ,
"DECRYPT" VARCHAR2(100 BYTE) NULL ,
"ENCRYPT" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for USER_CONFIG_LOG
-- ----------------------------
DROP TABLE "WOPDB"."USER_CONFIG_LOG";
CREATE TABLE "WOPDB"."USER_CONFIG_LOG" (
"USERNAME" NVARCHAR2(100) NULL ,
"UPDATEDATE" DATE NULL ,
"ACTION" NVARCHAR2(200) NULL ,
"OLDINFO" NVARCHAR2(200) NULL ,
"NEWINFO" NVARCHAR2(200) NULL ,
"UPDATEID" NVARCHAR2(100) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."USER_CONFIG_LOG"."OLDINFO" IS '原数据';
COMMENT ON COLUMN "WOPDB"."USER_CONFIG_LOG"."NEWINFO" IS '新数据';

-- ----------------------------
-- Table structure for WF_ABILITY
-- ----------------------------
DROP TABLE "WOPDB"."WF_ABILITY";
CREATE TABLE "WOPDB"."WF_ABILITY" (
"ABI_ID" NUMBER(5) NOT NULL ,
"ABI_TAG" VARCHAR2(200 BYTE) NOT NULL ,
"ABI_DESC" VARCHAR2(200 BYTE) NULL ,
"DOM_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"BUZ_TYPE" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ABILITY"."ABI_ID" IS '能力标签ID';
COMMENT ON COLUMN "WOPDB"."WF_ABILITY"."ABI_TAG" IS '能力标签名';
COMMENT ON COLUMN "WOPDB"."WF_ABILITY"."ABI_DESC" IS '能力标签说明';

-- ----------------------------
-- Table structure for WF_ACT_ORD
-- ----------------------------
DROP TABLE "WOPDB"."WF_ACT_ORD";
CREATE TABLE "WOPDB"."WF_ACT_ORD" (
"ORD_ID" NUMBER(10) NOT NULL ,
"ORD_VER" NUMBER(3) NOT NULL ,
"FO_ID" NUMBER(10) NULL ,
"REF_ID" VARCHAR2(200 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(200 BYTE) NOT NULL ,
"PROC_STA" NUMBER(3) NOT NULL ,
"STATUS" NUMBER(3) NOT NULL ,
"ACT_MODE" NUMBER(3) NOT NULL ,
"ACT_TYPE" VARCHAR2(200 BYTE) NULL ,
"ACT_REMARK" VARCHAR2(2000 BYTE) NULL ,
"OWNER" VARCHAR2(200 BYTE) NOT NULL ,
"SUBMIT_DTS" TIMESTAMP(6)  NULL ,
"REQUEST_DTS" TIMESTAMP(6)  NULL ,
"RETURN_DTS" TIMESTAMP(6)  NULL ,
"FINISH_DTS" TIMESTAMP(6)  NULL ,
"ORD_RMK1" VARCHAR2(200 BYTE) NULL ,
"ORD_RMK2" VARCHAR2(200 BYTE) NULL ,
"ORD_RMK3" VARCHAR2(200 BYTE) NULL ,
"ORD_RMK4" VARCHAR2(200 BYTE) NULL ,
"ORD_RMK5" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ACT_ORD_PARAM
-- ----------------------------
DROP TABLE "WOPDB"."WF_ACT_ORD_PARAM";
CREATE TABLE "WOPDB"."WF_ACT_ORD_PARAM" (
"ORD_ID" NUMBER(10) NOT NULL ,
"ORD_VER" NUMBER(3) NOT NULL ,
"PARAM_TYPE" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_VALUE" VARCHAR2(2000 BYTE) NULL ,
"PARAM_VALUE_OLD" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_DTS" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ACT_ORD_PARAM_HIST
-- ----------------------------
DROP TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST";
CREATE TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" (
"ORD_ID" NUMBER(10) NOT NULL ,
"ORD_VER" NUMBER(3) NOT NULL ,
"PARAM_TYPE" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_VALUE" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_TYPE" NUMBER(3) NOT NULL ,
"UPDATE_DTS" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ASSESSMENT
-- ----------------------------
DROP TABLE "WOPDB"."WF_ASSESSMENT";
CREATE TABLE "WOPDB"."WF_ASSESSMENT" (
"FO_ID" NUMBER(10) NOT NULL ,
"DK_NO" VARCHAR2(50 BYTE) NOT NULL ,
"RF_NO" VARCHAR2(200 BYTE) NULL ,
"AS_OBJ" VARCHAR2(50 BYTE) NOT NULL ,
"AS_VER" NUMBER(3) NOT NULL ,
"AS_LEVEL" NUMBER(1) NOT NULL ,
"AS_REASON" VARCHAR2(200 BYTE) NULL ,
"AS_REMARK" VARCHAR2(2000 BYTE) NULL ,
"AS_STAGE" VARCHAR2(200 BYTE) NULL ,
"AS_TIME" TIMESTAMP(6)  NOT NULL ,
"OWNER" VARCHAR2(50 BYTE) NOT NULL ,
"CONTACT" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_AUTH_BUZ
-- ----------------------------
DROP TABLE "WOPDB"."WF_AUTH_BUZ";
CREATE TABLE "WOPDB"."WF_AUTH_BUZ" (
"AUTH_ID" NUMBER(10) NOT NULL ,
"BUZ_KEY" VARCHAR2(500 BYTE) NOT NULL ,
"BUZ_VAL" VARCHAR2(500 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_AUTH_FUNC
-- ----------------------------
DROP TABLE "WOPDB"."WF_AUTH_FUNC";
CREATE TABLE "WOPDB"."WF_AUTH_FUNC" (
"AUTH_ID" NUMBER(10) NOT NULL ,
"FUNC_ID" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_AUTH_ORG
-- ----------------------------
DROP TABLE "WOPDB"."WF_AUTH_ORG";
CREATE TABLE "WOPDB"."WF_AUTH_ORG" (
"AUTH_ID" NUMBER(10) NOT NULL ,
"ORG_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_AUTH_TASK
-- ----------------------------
DROP TABLE "WOPDB"."WF_AUTH_TASK";
CREATE TABLE "WOPDB"."WF_AUTH_TASK" (
"AUTH_ID" NUMBER(10) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_AUTHORIZATION
-- ----------------------------
DROP TABLE "WOPDB"."WF_AUTHORIZATION";
CREATE TABLE "WOPDB"."WF_AUTHORIZATION" (
"AUTH_ID" NUMBER(10) NOT NULL ,
"AUTH_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"AUTH_TYPE" NUMBER(3) NOT NULL ,
"AUTH_RULE" VARCHAR2(2000 BYTE) NULL ,
"AUTH_REFERENCE" VARCHAR2(2000 BYTE) NULL ,
"ANNOTATION" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_AUTHORIZATION"."AUTH_DESC" IS '权限说明';
COMMENT ON COLUMN "WOPDB"."WF_AUTHORIZATION"."AUTH_TYPE" IS '权限类型 缺省0';
COMMENT ON COLUMN "WOPDB"."WF_AUTHORIZATION"."AUTH_RULE" IS '规则';
COMMENT ON COLUMN "WOPDB"."WF_AUTHORIZATION"."AUTH_REFERENCE" IS '参考';
COMMENT ON COLUMN "WOPDB"."WF_AUTHORIZATION"."ANNOTATION" IS '备注';

-- ----------------------------
-- Table structure for WF_BUSINESS_CONFIG
-- ----------------------------
DROP TABLE "WOPDB"."WF_BUSINESS_CONFIG";
CREATE TABLE "WOPDB"."WF_BUSINESS_CONFIG" (
"BUZ_ID" VARCHAR2(50 BYTE) NOT NULL ,
"BUZ_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"BUZ_KEY" VARCHAR2(200 BYTE) NOT NULL ,
"BUZ_VAL" VARCHAR2(2000 BYTE) NOT NULL ,
"SERV_CATE" VARCHAR2(20 BYTE) NOT NULL ,
"USE_FLAG" NUMBER(2) NOT NULL ,
"SET_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_BUSINESS_CONFIG"."USE_FLAG" IS '0-USE 1-NOUSE';

-- ----------------------------
-- Table structure for WF_BUZOPT_CONTRACT
-- ----------------------------
DROP TABLE "WOPDB"."WF_BUZOPT_CONTRACT";
CREATE TABLE "WOPDB"."WF_BUZOPT_CONTRACT" (
"OPT_ID" VARCHAR2(200 BYTE) NOT NULL ,
"CONTRACT_NO" VARCHAR2(200 BYTE) NOT NULL ,
"SIGN_DATE" DATE NULL ,
"CONTRACT_ST" DATE NULL ,
"CONTRACT_ET" DATE NULL ,
"CONTRACT_AMOUNT" VARCHAR2(200 BYTE) NULL ,
"YEARLY_INCOME" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."CONTRACT_NO" IS '合同编号';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."SIGN_DATE" IS '签约日期';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."CONTRACT_ST" IS '合同开始时间';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."CONTRACT_ET" IS '合同终止日期';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."CONTRACT_AMOUNT" IS '合同总金额';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_CONTRACT"."YEARLY_INCOME" IS '年化收入';

-- ----------------------------
-- Table structure for WF_BUZOPT_PROD
-- ----------------------------
DROP TABLE "WOPDB"."WF_BUZOPT_PROD";
CREATE TABLE "WOPDB"."WF_BUZOPT_PROD" (
"OPT_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PROD_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PROD_NAME" VARCHAR2(200 BYTE) NULL ,
"PROD_LABEL" VARCHAR2(2000 BYTE) NULL ,
"USER_NUM" NUMBER NULL ,
"FEE_ONCE" NUMBER NULL ,
"FEE_MONTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_PROD"."PROD_LABEL" IS '多个标签；用“|”分隔';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_PROD"."USER_NUM" IS '预测数量';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_PROD"."FEE_ONCE" IS '预测一次性收入';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_PROD"."FEE_MONTH" IS '预测月租收入';

-- ----------------------------
-- Table structure for WF_BUZOPT_REQ
-- ----------------------------
DROP TABLE "WOPDB"."WF_BUZOPT_REQ";
CREATE TABLE "WOPDB"."WF_BUZOPT_REQ" (
"OPT_ID" VARCHAR2(200 BYTE) NOT NULL ,
"OPT_NAME" VARCHAR2(2000 BYTE) NULL ,
"DISC_PLACE_CODE" VARCHAR2(200 BYTE) NULL ,
"DISC_PLACE" VARCHAR2(2000 BYTE) NULL ,
"CUST_ID" VARCHAR2(200 BYTE) NULL ,
"CUST_NAME" VARCHAR2(2000 BYTE) NULL ,
"CUST_INDU_ID" VARCHAR2(200 BYTE) NULL ,
"CUST_INDU" VARCHAR2(2000 BYTE) NULL ,
"CUST_TYPE" VARCHAR2(200 BYTE) NULL ,
"CUSTMGR_A" VARCHAR2(200 BYTE) NULL ,
"CUSTMGR_A_TEL" VARCHAR2(200 BYTE) NULL ,
"CUSTMGR_B" VARCHAR2(200 BYTE) NULL ,
"CUSTMGR_B_TEL" VARCHAR2(200 BYTE) NULL ,
"LOCIMGR" VARCHAR2(200 BYTE) NULL ,
"PROIMGR" VARCHAR2(200 BYTE) NULL ,
"CUST_STAF_NUM" VARCHAR2(200 BYTE) NULL ,
"OPT_PHASE" VARCHAR2(200 BYTE) NULL ,
"BUZ_AREA" VARCHAR2(200 BYTE) NULL ,
"OPT_IMP" VARCHAR2(200 BYTE) NULL ,
"OPT_REGI_TIME" DATE NULL ,
"OPT_SIGN_DATE" DATE NULL ,
"STAFF_ID" VARCHAR2(200 BYTE) NULL ,
"STAFF_NAME" VARCHAR2(200 BYTE) NULL ,
"JTAUDI" VARCHAR2(200 BYTE) NULL ,
"JTAUDI_DESC" VARCHAR2(2000 BYTE) NULL ,
"PROAUDI" VARCHAR2(200 BYTE) NULL ,
"PROAUDI_DESC" VARCHAR2(2000 BYTE) NULL ,
"LOCAUDI" VARCHAR2(200 BYTE) NULL ,
"LOCAUDI_DESC" VARCHAR2(2000 BYTE) NULL ,
"BUZOPT_REMARK" VARCHAR2(4000 BYTE) NULL ,
"SUP_STA" NUMBER(1) DEFAULT 0  NULL ,
"SUP_DESC" VARCHAR2(2000 BYTE) NULL ,
"QUERY_DESC" VARCHAR2(2000 CHAR) NULL ,
"QUERY_TIME" DATE NULL ,
"QUERY_RESULT" NUMBER(1) NULL ,
"CREATE_TIME" DATE NOT NULL ,
"YEARLY_INCOME" LONG NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_ID" IS '商机编号';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_NAME" IS '商机名称';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."DISC_PLACE_CODE" IS '覆盖地区编码';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."DISC_PLACE" IS '覆盖地区';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_ID" IS '客户编码';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_NAME" IS '客户名';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_INDU_ID" IS '所属行业编码';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_INDU" IS '所属行业';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_TYPE" IS '客户类型 字典';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUSTMGR_A" IS '客户经理A';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUSTMGR_A_TEL" IS '客户经理A联系方式';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUSTMGR_B" IS '客户经理B';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUSTMGR_B_TEL" IS '客户经理B联系方式';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."LOCIMGR" IS '地市经理';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."PROIMGR" IS '省经理';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CUST_STAF_NUM" IS '客户员工数';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_PHASE" IS '商机状态 字典';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."BUZ_AREA" IS '业务覆盖地域id';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_IMP" IS '重要程度 字典';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_REGI_TIME" IS '登记时间';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."OPT_SIGN_DATE" IS '转化时间';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."STAFF_ID" IS '创建人id';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."STAFF_NAME" IS '创建人';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."JTAUDI" IS '集团审核意见';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."JTAUDI_DESC" IS '集团审核不通过原因';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."PROAUDI" IS '省审核意见';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."PROAUDI_DESC" IS '省审核不通过原因';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."LOCAUDI" IS '本地网审核意见';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."LOCAUDI_DESC" IS '本地网审核不通过原因';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."BUZOPT_REMARK" IS '商机信息';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."SUP_STA" IS '1售前支撑 2售前完成 3售中支撑 4售中完成 5已关闭';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."SUP_DESC" IS '支撑说明';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."QUERY_DESC" IS '查询错误描述';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."QUERY_TIME" IS '查询时间(初次查询的时间或者复查时间)';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."QUERY_RESULT" IS '查询结果，0：查询成功；1：查询未返回； 5：查询报错';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."CREATE_TIME" IS '入库时间';
COMMENT ON COLUMN "WOPDB"."WF_BUZOPT_REQ"."YEARLY_INCOME" IS '年化收入';

-- ----------------------------
-- Table structure for WF_DATA_ATTR
-- ----------------------------
DROP TABLE "WOPDB"."WF_DATA_ATTR";
CREATE TABLE "WOPDB"."WF_DATA_ATTR" (
"ATTR_TYPE_ID" NUMBER(2) NOT NULL ,
"ATTR_TYPE_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"ATTR_CAPACITY" VARCHAR2(200 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_DATA_ATTR"."ATTR_TYPE_ID" IS '属性类型：0 text 1 texttable 2 number 3 date 4 lookup 5 sublayer 6 XML';
COMMENT ON COLUMN "WOPDB"."WF_DATA_ATTR"."ATTR_TYPE_DESC" IS '属性类型描述';
COMMENT ON COLUMN "WOPDB"."WF_DATA_ATTR"."ATTR_CAPACITY" IS 'String Numeric Clob';

-- ----------------------------
-- Table structure for WF_DATA_DICT
-- ----------------------------
DROP TABLE "WOPDB"."WF_DATA_DICT";
CREATE TABLE "WOPDB"."WF_DATA_DICT" (
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"DICT_TAG" VARCHAR2(200 BYTE) NOT NULL ,
"ATTR_TYPE" NUMBER(2) NOT NULL ,
"ATTR_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"ATTR_LENGTH" NUMBER(10) NULL ,
"ATTR_MASK" VARCHAR2(200 BYTE) NULL ,
"ENCRYPTED" VARCHAR2(20 BYTE) NULL ,
"ANNOTATION" VARCHAR2(200 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_DATA_LOOKUP
-- ----------------------------
DROP TABLE "WOPDB"."WF_DATA_LOOKUP";
CREATE TABLE "WOPDB"."WF_DATA_LOOKUP" (
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"DATA_CODE" VARCHAR2(500 BYTE) NOT NULL ,
"DATA_DESC" VARCHAR2(500 BYTE) NOT NULL ,
"NOTE" VARCHAR2(500 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_EVA_CFG
-- ----------------------------
DROP TABLE "WOPDB"."WF_EVA_CFG";
CREATE TABLE "WOPDB"."WF_EVA_CFG" (
"SERV_SOURCE" VARCHAR2(10 BYTE) NOT NULL ,
"SERV_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"EVA_DESC" VARCHAR2(200 BYTE) NULL ,
"DIMENTION" VARCHAR2(10 BYTE) NOT NULL ,
"EVA_INDEX" VARCHAR2(100 BYTE) NOT NULL ,
"EVA_WEIGHT" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_EVA_ITEM
-- ----------------------------
DROP TABLE "WOPDB"."WF_EVA_ITEM";
CREATE TABLE "WOPDB"."WF_EVA_ITEM" (
"BEID" NUMBER NOT NULL ,
"BUZ_NO" VARCHAR2(100 BYTE) NULL ,
"SUB_BUZ_NO" VARCHAR2(100 BYTE) NULL ,
"REF_NO" VARCHAR2(100 BYTE) NULL ,
"SYS_SOURCE" VARCHAR2(20 BYTE) NOT NULL ,
"FLOW_TYPE" CHAR(1 BYTE) NOT NULL ,
"AREA_TYPE" CHAR(1 BYTE) DEFAULT 0  NOT NULL ,
"PROD_TYPE" CHAR(1 BYTE) NOT NULL ,
"PROD_RATE" CHAR(1 BYTE) NOT NULL ,
"BUZOPT_SN" VARCHAR2(100 BYTE) NULL ,
"BUZOPT_NAME" VARCHAR2(500 BYTE) NULL ,
"CUST_NAME" VARCHAR2(500 BYTE) NULL ,
"CUST_NO" VARCHAR2(100 BYTE) NULL ,
"BUZ_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"BUZ_PROP" VARCHAR2(50 BYTE) NOT NULL ,
"BUZ_DESC" VARCHAR2(2000 BYTE) NULL ,
"START_DTS" DATE NOT NULL ,
"COMP_DTS" DATE NOT NULL ,
"SEND_DTS" DATE NOT NULL ,
"PROC_DTS" DATE NOT NULL ,
"EVAL" NUMBER NULL ,
"CONS_FLAG" CHAR(1 BYTE) NULL ,
"FEE_ONCE" NUMBER NULL ,
"FEE_MONTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."BEID" IS '唯一键';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."BUZ_NO" IS '政企编号 主合同号';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."SUB_BUZ_NO" IS '分合同号 DK编号';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."REF_NO" IS '参考编号 集团流水';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."SYS_SOURCE" IS 'BOS';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."FLOW_TYPE" IS '0-本地 1-集团（本地) 2-集团（集团）3-产品部';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."AREA_TYPE" IS '地域类型 0-本地 1-国内 2-国际';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."PROD_TYPE" IS '产品类型 0-传输 1-交换 2-接入';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."PROD_RATE" IS '速率类型 0-小于100M 1-100M到1G间 2-大于1G';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."BUZ_TYPE" IS '业务类型';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."BUZ_PROP" IS '业务属性';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."BUZ_DESC" IS '业务说明';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."EVAL" IS '评估值';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."CONS_FLAG" IS '是否工程 0-否 1-是';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."FEE_ONCE" IS '一次性收入';
COMMENT ON COLUMN "WOPDB"."WF_EVA_ITEM"."FEE_MONTH" IS '月租收入';

-- ----------------------------
-- Table structure for WF_EVA_MEMBER
-- ----------------------------
DROP TABLE "WOPDB"."WF_EVA_MEMBER";
CREATE TABLE "WOPDB"."WF_EVA_MEMBER" (
"BEID" NUMBER NOT NULL ,
"USR_ID" VARCHAR2(50 BYTE) NOT NULL ,
"ROLE" VARCHAR2(10 BYTE) NOT NULL ,
"TASK" VARCHAR2(50 BYTE) NULL ,
"ACCEPT_DTS" DATE NULL ,
"WORK_DAYS" NUMBER(3) NULL ,
"EVAL" NUMBER NULL ,
"IVAL" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_EVA_MEMBER"."BEID" IS 'FK';
COMMENT ON COLUMN "WOPDB"."WF_EVA_MEMBER"."ROLE" IS '0客户经理 1法务经理 2业务经理(1 2集团审核 3集团转订) 3工程经理 4方案经理 5项目经理';
COMMENT ON COLUMN "WOPDB"."WF_EVA_MEMBER"."EVAL" IS '项目用户评估值';
COMMENT ON COLUMN "WOPDB"."WF_EVA_MEMBER"."IVAL" IS '项目收入评估值';

-- ----------------------------
-- Table structure for WF_EVALUATION
-- ----------------------------
DROP TABLE "WOPDB"."WF_EVALUATION";
CREATE TABLE "WOPDB"."WF_EVALUATION" (
"EVA_ITEM" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"LEV1_DESC" VARCHAR2(200 BYTE) NULL ,
"LEV2_DESC" VARCHAR2(200 BYTE) NULL ,
"LEV3_DESC" VARCHAR2(200 BYTE) NULL ,
"LEV4_DESC" VARCHAR2(200 BYTE) NULL ,
"LEV5_DESC" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_FLOW
-- ----------------------------
DROP TABLE "WOPDB"."WF_FLOW";
CREATE TABLE "WOPDB"."WF_FLOW" (
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"FLOW_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"FLOW_DESC" VARCHAR2(200 BYTE) NULL ,
"FLOW_TYPE" CHAR(1 BYTE) NOT NULL ,
"EXPECT_DURATION" NUMBER NULL ,
"ENTRY_NODE_ID" NUMBER(10) NULL ,
"ENTRY_NODE_TYPE" CHAR(1 BYTE) NULL ,
"PRIORITY" NUMBER(2) NOT NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."FLOW_ID" IS '流ID';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."FLOW_VER" IS '流版本';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."FLOW_NAME" IS '流名称';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."FLOW_DESC" IS '流描述';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."FLOW_TYPE" IS '流类型';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."EXPECT_DURATION" IS '期望完工时间';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."ENTRY_NODE_ID" IS '流启动节点';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."ENTRY_NODE_TYPE" IS '流启动节点类型';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."PRIORITY" IS '优先级 default 5';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."SERV_TYPE" IS '服务类型';
COMMENT ON COLUMN "WOPDB"."WF_FLOW"."SERV_CATEGORY" IS '服务目录';

-- ----------------------------
-- Table structure for WF_FLOW_JUMP
-- ----------------------------
DROP TABLE "WOPDB"."WF_FLOW_JUMP";
CREATE TABLE "WOPDB"."WF_FLOW_JUMP" (
"NODE_STATUS" NUMBER(2) NOT NULL ,
"NODE_ID" NUMBER(10) NOT NULL ,
"NODE_ID_TO" NUMBER(10) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"CHECK_TYPE" NUMBER(2) DEFAULT 0  NOT NULL ,
"REPORT_STATUS" NUMBER(2) DEFAULT 0  NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_FLOW_JUMP"."CHECK_TYPE" IS '0 no check 1 check';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_JUMP"."REPORT_STATUS" IS '0 no report  !0 report ord status';

-- ----------------------------
-- Table structure for WF_FLOW_LINK
-- ----------------------------
DROP TABLE "WOPDB"."WF_FLOW_LINK";
CREATE TABLE "WOPDB"."WF_FLOW_LINK" (
"NODE_STATUS" NUMBER(2) NOT NULL ,
"NODE_ID" NUMBER(10) NOT NULL ,
"NODE_ID_TO" NUMBER(10) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"CHECK_TYPE" NUMBER(2) DEFAULT 0  NOT NULL ,
"REPORT_STATUS" NUMBER(2) DEFAULT 0  NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_FLOW_LINK"."CHECK_TYPE" IS '0 no check 1 check';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_LINK"."REPORT_STATUS" IS '0 no report  !0 report ord status';

-- ----------------------------
-- Table structure for WF_FLOW_NODE
-- ----------------------------
DROP TABLE "WOPDB"."WF_FLOW_NODE";
CREATE TABLE "WOPDB"."WF_FLOW_NODE" (
"NODE_ID" NUMBER(10) NOT NULL ,
"NODE_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"NODE_TYPE" CHAR(1 BYTE) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NOT NULL ,
"INPUT_WAIT_TYPE" NUMBER(2) DEFAULT 0  NOT NULL ,
"JUMP_TYPE" NUMBER(2) DEFAULT 0  NOT NULL ,
"SHOW_TYPE" NUMBER(2) DEFAULT 1  NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_FLOW_NODE"."NODE_NAME" IS '流节点名';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_NODE"."NODE_TYPE" IS 'B 起始 E 结束 S 中间 M 多实例';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_NODE"."INPUT_WAIT_TYPE" IS '进入等待：0 any ,1 all';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_NODE"."JUMP_TYPE" IS '跳转类型：0 No , 1 Yes';
COMMENT ON COLUMN "WOPDB"."WF_FLOW_NODE"."SHOW_TYPE" IS '历史显示：0 No,  1 Yes';

-- ----------------------------
-- Table structure for WF_FLOW_STATUS
-- ----------------------------
DROP TABLE "WOPDB"."WF_FLOW_STATUS";
CREATE TABLE "WOPDB"."WF_FLOW_STATUS" (
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"STATUS_ID" NUMBER(2) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_FUNCTION
-- ----------------------------
DROP TABLE "WOPDB"."WF_FUNCTION";
CREATE TABLE "WOPDB"."WF_FUNCTION" (
"FUNC_ID" VARCHAR2(50 BYTE) NOT NULL ,
"FUNC_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"FUNC_TYPE" NUMBER(3) NOT NULL ,
"FUNC_CTX" VARCHAR2(2000 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_FUNCTION"."FUNC_DESC" IS '功能名';
COMMENT ON COLUMN "WOPDB"."WF_FUNCTION"."FUNC_TYPE" IS '缺省 0';
COMMENT ON COLUMN "WOPDB"."WF_FUNCTION"."FUNC_CTX" IS '功能内容';

-- ----------------------------
-- Table structure for WF_HOLIDAY
-- ----------------------------
DROP TABLE "WOPDB"."WF_HOLIDAY";
CREATE TABLE "WOPDB"."WF_HOLIDAY" (
"HL_DATE" DATE NOT NULL ,
"HL_DESC" VARCHAR2(500 BYTE) NOT NULL ,
"HL_FLAG" NUMBER(1) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_HOLIDAY"."HL_DATE" IS '日期';
COMMENT ON COLUMN "WOPDB"."WF_HOLIDAY"."HL_DESC" IS '说明';
COMMENT ON COLUMN "WOPDB"."WF_HOLIDAY"."HL_FLAG" IS '0-休息日 1-工作日';

-- ----------------------------
-- Table structure for WF_IMPLEMENT
-- ----------------------------
DROP TABLE "WOPDB"."WF_IMPLEMENT";
CREATE TABLE "WOPDB"."WF_IMPLEMENT" (
"IMPL_ID" NUMBER(10) NOT NULL ,
"IMPL_DESC" VARCHAR2(200 BYTE) NULL ,
"IMPL_TYPE" NUMBER(2) NOT NULL ,
"IMPL_REFERENCE" VARCHAR2(2000 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(2000 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_IMPLEMENT"."IMPL_TYPE" IS '0 ACTPROC';
COMMENT ON COLUMN "WOPDB"."WF_IMPLEMENT"."IMPL_REFERENCE" IS 'class path';

-- ----------------------------
-- Table structure for WF_INTERACT_CTX
-- ----------------------------
DROP TABLE "WOPDB"."WF_INTERACT_CTX";
CREATE TABLE "WOPDB"."WF_INTERACT_CTX" (
"WTX_ID" VARCHAR2(30 BYTE) NOT NULL ,
"WO_ID" VARCHAR2(30 BYTE) NOT NULL ,
"WO_VER" NUMBER(2) NOT NULL ,
"FO_ID" NUMBER(15) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_NAME" VARCHAR2(200 BYTE) NULL ,
"ACT_MODE" NUMBER(2) NOT NULL ,
"REFERENCE" VARCHAR2(200 BYTE) NULL ,
"REQ_DTS" DATE NOT NULL ,
"RET_DTS" DATE NULL ,
"STATE" NUMBER(2) NOT NULL ,
"REMARK" VARCHAR2(200 BYTE) NULL ,
"REQ_CTX" CLOB NULL ,
"RET_CTX" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_KNOWLEDGE
-- ----------------------------
DROP TABLE "WOPDB"."WF_KNOWLEDGE";
CREATE TABLE "WOPDB"."WF_KNOWLEDGE" (
"KID" NUMBER(5) NOT NULL ,
"TITLE" VARCHAR2(200 BYTE) NOT NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"LINK" VARCHAR2(2000 BYTE) NULL ,
"OWNER" VARCHAR2(200 BYTE) NOT NULL ,
"UPD_DTS" DATE NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_KNOWLEDGE_STRUCT
-- ----------------------------
DROP TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT";
CREATE TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" (
"KS_ID" NUMBER(5) NOT NULL ,
"KS_PID" NUMBER(5) NOT NULL ,
"KS_TYPE" NUMBER(5) NOT NULL ,
"KNAME" VARCHAR2(200 BYTE) NOT NULL ,
"KDESC" VARCHAR2(2000 BYTE) NULL ,
"OWNER" VARCHAR2(200 BYTE) NOT NULL ,
"UPD_DTS" DATE NOT NULL ,
"POSITION" NUMBER(5) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."KS_TYPE" IS '根0，枝干1 ，叶子2';
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."KNAME" IS '菜单名';
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."KDESC" IS '菜单说明';
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."OWNER" IS '编辑人';
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."UPD_DTS" IS '更新日期';
COMMENT ON COLUMN "WOPDB"."WF_KNOWLEDGE_STRUCT"."POSITION" IS '菜单位置(同层排序)';

-- ----------------------------
-- Table structure for WF_KX_CONST_FILTER
-- ----------------------------
DROP TABLE "WOPDB"."WF_KX_CONST_FILTER";
CREATE TABLE "WOPDB"."WF_KX_CONST_FILTER" (
"DK_NO" VARCHAR2(50 BYTE) NOT NULL ,
"NOTE" VARCHAR2(200 CHAR) NULL ,
"CREATOR" VARCHAR2(50 CHAR) NULL ,
"CREATE_DATE" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_KX_CONST_FILTER"."DK_NO" IS 'DK编号';
COMMENT ON COLUMN "WOPDB"."WF_KX_CONST_FILTER"."NOTE" IS '备注';
COMMENT ON COLUMN "WOPDB"."WF_KX_CONST_FILTER"."CREATOR" IS '创建人';
COMMENT ON COLUMN "WOPDB"."WF_KX_CONST_FILTER"."CREATE_DATE" IS '创建日期';

-- ----------------------------
-- Table structure for WF_MAIL
-- ----------------------------
DROP TABLE "WOPDB"."WF_MAIL";
CREATE TABLE "WOPDB"."WF_MAIL" (
"MAIL_ID" NUMBER(10) NOT NULL ,
"FO_ID" NUMBER(10) NULL ,
"DK_AD_NO" VARCHAR2(50 BYTE) NOT NULL ,
"SEQ_NO" NUMBER(5) NOT NULL ,
"PROC_TYPE" NUMBER(2) NOT NULL ,
"PROC_STAT" NUMBER(2) NOT NULL ,
"PROC_DTS" DATE NULL ,
"SEND_TIME" VARCHAR2(20 BYTE) NULL ,
"SENDER" VARCHAR2(500 BYTE) NOT NULL ,
"RECEIVER" VARCHAR2(2000 BYTE) NOT NULL ,
"TITLE" VARCHAR2(2000 BYTE) NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"ATTACHMENT" VARCHAR2(4000 BYTE) NULL ,
"COOKIE" VARCHAR2(4000 BYTE) NULL ,
"MEMO" VARCHAR2(4000 BYTE) NULL ,
"MAIL_SN" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_MAIL"."DK_AD_NO" IS '对应 子方案派发编号';
COMMENT ON COLUMN "WOPDB"."WF_MAIL"."SEQ_NO" IS '同一方案编号下自增序列';
COMMENT ON COLUMN "WOPDB"."WF_MAIL"."PROC_TYPE" IS '0发送 1接收';
COMMENT ON COLUMN "WOPDB"."WF_MAIL"."PROC_STAT" IS '0初始 1处理中 2已发送 3挂起
4已接收';
COMMENT ON COLUMN "WOPDB"."WF_MAIL"."MEMO" IS '备注';

-- ----------------------------
-- Table structure for WF_MAIL_ATTACH
-- ----------------------------
DROP TABLE "WOPDB"."WF_MAIL_ATTACH";
CREATE TABLE "WOPDB"."WF_MAIL_ATTACH" (
"ATTACH_ID" NUMBER(10) NOT NULL ,
"MAIL_ID" NUMBER(10) NOT NULL ,
"PROC_STAT" NUMBER(2) NOT NULL ,
"PROC_DTS" DATE NOT NULL ,
"FILE_NAME" VARCHAR2(2000 BYTE) NOT NULL ,
"FILE_LINK" VARCHAR2(2000 BYTE) NULL ,
"FILE_ID" VARCHAR2(200 BYTE) NULL ,
"CONTENT" LONG RAW NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_NOTIFY_DEF
-- ----------------------------
DROP TABLE "WOPDB"."WF_NOTIFY_DEF";
CREATE TABLE "WOPDB"."WF_NOTIFY_DEF" (
"NOTE_ID" NUMBER(10) NOT NULL ,
"NOTE_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"NOTE_DESC" VARCHAR2(50 BYTE) NULL ,
"NOTE_TYPE" NUMBER(20) NOT NULL ,
"TRIG_REF" VARCHAR2(200 BYTE) NULL ,
"IMPL_REF" VARCHAR2(200 BYTE) NULL ,
"AUTHOR" VARCHAR2(50 BYTE) NOT NULL ,
"DISPATCH_TYPE" NUMBER(2) NOT NULL ,
"DISPATCH_SOURCE" VARCHAR2(200 BYTE) NULL ,
"DISPATCH_CONTEXT" VARCHAR2(500 BYTE) NULL ,
"MAIL" VARCHAR2(200 BYTE) NULL ,
"TELE" VARCHAR2(200 BYTE) NULL ,
"RESERVE" VARCHAR2(200 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_DEF"."NOTE_TYPE" IS '0 sys 1 ord 2 task 3 data 4 user';
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_DEF"."TRIG_REF" IS '触发rule';
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_DEF"."IMPL_REF" IS '执行act';
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_DEF"."DISPATCH_TYPE" IS '0 不发送 1 web 2 mail 3 msg';

-- ----------------------------
-- Table structure for WF_NOTIFY_FILTER
-- ----------------------------
DROP TABLE "WOPDB"."WF_NOTIFY_FILTER";
CREATE TABLE "WOPDB"."WF_NOTIFY_FILTER" (
"NOTE_ID" NUMBER(10) NOT NULL ,
"TRIG_DESC" VARCHAR2(200 BYTE) NULL ,
"TRIG_TYPE" NUMBER(2) NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"TASK_ID" NUMBER(10) NULL ,
"SERV_CATE" VARCHAR2(20 BYTE) NOT NULL ,
"ON_STATE" NUMBER(2) NULL ,
"ON_STATUS" NUMBER(2) NULL ,
"CONDITION" VARCHAR2(2000 BYTE) NULL ,
"ACT_MODE_TYPE" NUMBER(2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_FILTER"."TRIG_DESC" IS '触发说明';
COMMENT ON COLUMN "WOPDB"."WF_NOTIFY_FILTER"."TRIG_TYPE" IS 'event-0 query-1';

-- ----------------------------
-- Table structure for WF_NOTIFY_QUEUE
-- ----------------------------
DROP TABLE "WOPDB"."WF_NOTIFY_QUEUE";
CREATE TABLE "WOPDB"."WF_NOTIFY_QUEUE" (
"NOTE_SN" NUMBER(10) NOT NULL ,
"NOTE_ID" NUMBER(10) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FO_ID" NUMBER(10) NOT NULL ,
"FO_SN" NUMBER(10) NULL ,
"TASK_ID" NUMBER(10) NULL ,
"PROC_TYPE" NUMBER(2) NOT NULL ,
"SOURCE" VARCHAR2(2000 BYTE) NOT NULL ,
"CONTEXT" VARCHAR2(2000 BYTE) NOT NULL ,
"PROC_STA" NUMBER(2) NOT NULL ,
"PROC_COUNT" NUMBER(2) NOT NULL ,
"ADD_DTS" DATE NOT NULL ,
"PROC_DTS" DATE NULL ,
"SCHED_DTS" DATE NULL ,
"REMARK" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD";
CREATE TABLE "WOPDB"."WF_ORD" (
"FO_ID" NUMBER(20) NOT NULL ,
"FO_VER" NUMBER(2) NOT NULL ,
"SO_ID" VARCHAR2(50 BYTE) NOT NULL ,
"SO_VER" NUMBER(2) NOT NULL ,
"SO_NO" VARCHAR2(200 BYTE) NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"FLOW_TYPE" CHAR(1 BYTE) NOT NULL ,
"FLOW_STATUS" NUMBER(2) NOT NULL ,
"FLOW_STATE" NUMBER(2) NOT NULL ,
"REFERENCE" VARCHAR2(200 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"PRIORITY" NUMBER(2) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"COMPLETE_DTS" DATE NULL ,
"EXPECT_DURATION" NUMBER NOT NULL ,
"EXPECT_COMPL_DTS" DATE NOT NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"FTX_AUTHOR" VARCHAR2(50 BYTE) NOT NULL ,
"FTX_OPERATE" VARCHAR2(200 BYTE) NULL ,
"FTX_REASON" VARCHAR2(200 BYTE) NULL ,
"FTX_OPERATE_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_ASSO
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_ASSO";
CREATE TABLE "WOPDB"."WF_ORD_ASSO" (
"FO_ID" NUMBER(10) NOT NULL ,
"DK_NO" VARCHAR2(200 BYTE) NULL ,
"RF_NO" VARCHAR2(200 BYTE) NULL ,
"ASSO_ID" NUMBER(10) NOT NULL ,
"ASSO_TYPE" NUMBER(2) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_ASSO"."FO_ID" IS '父单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_ASSO"."ASSO_ID" IS '子单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_ASSO"."ASSO_TYPE" IS '0 流程级联 1 定单级联';

-- ----------------------------
-- Table structure for WF_ORD_EVA
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_EVA";
CREATE TABLE "WOPDB"."WF_ORD_EVA" (
"FO_ID" NUMBER(10) NOT NULL ,
"USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_DTS" DATE NOT NULL ,
"EVA_USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_REMARK" VARCHAR2(2000 BYTE) NULL ,
"EVA_MAIN" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_ITEM1" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM2" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM3" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM4" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM5" VARCHAR2(200 BYTE) NULL ,
"MAIN_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM1_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM2_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM3_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM4_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM5_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"STATE" NUMBER(1) DEFAULT 0  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."USR_ID" IS '被评价人';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."TASK_ID" IS '环节';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."EVA_DTS" IS '生成时间或评价时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."EVA_USR_ID" IS '评价人';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."EVA_REMARK" IS '评价说明';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."EVA_MAIN" IS '综合评价';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."EVA_ITEM1" IS '评价分项1';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."MAIN_LEV" IS '0-未评价';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."ITEM1_LEV" IS '0-未评价';
COMMENT ON COLUMN "WOPDB"."WF_ORD_EVA"."STATE" IS '0-未评价 1-已评价';

-- ----------------------------
-- Table structure for WF_ORD_FLOW
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_FLOW";
CREATE TABLE "WOPDB"."WF_ORD_FLOW" (
"FO_SN" NUMBER(10) NOT NULL ,
"FO_ID" NUMBER(20) NOT NULL ,
"FO_VER" NUMBER(2) NOT NULL ,
"FLOW_TYPE" CHAR(1 BYTE) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"SO_ID" VARCHAR2(50 BYTE) NULL ,
"SO_VER" NUMBER(2) NULL ,
"NODE_ID" NUMBER(10) NOT NULL ,
"NODE_TYPE" CHAR(1 BYTE) NOT NULL ,
"PRE_NODE_ID" NUMBER(10) NULL ,
"PRE_NODE_STATUS" NUMBER(2) NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NOT NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"EXPECT_COMPL_DTS" DATE NULL ,
"EXPECT_DURATION" NUMBER NULL ,
"STATE" NUMBER(2) NOT NULL ,
"STATUS" NUMBER(2) NULL ,
"OWNER" VARCHAR2(50 BYTE) NOT NULL ,
"ACT_MODE" NUMBER(2) NOT NULL ,
"JUMP_FLAG" NUMBER(2) NULL ,
"PRIORITY" NUMBER(2) DEFAULT 0  NOT NULL ,
"VIEW_ID" NUMBER(10) DEFAULT 0  NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."FO_SN" IS '定单SN';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."FO_ID" IS '定单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."FO_VER" IS '定单版本';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."FLOW_TYPE" IS '定单类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."FLOW_ID" IS '流程ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."SO_ID" IS '订单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."SO_VER" IS '订单类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."NODE_ID" IS '节点ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."PRE_NODE_ID" IS '前节点ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."TASK_ID" IS '任务ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."REMARK" IS '备注';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."RECEIVE_DTS" IS '接收时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."UPDATE_DTS" IS '更新时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."COMPLETE_DTS" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."EXPECT_COMPL_DTS" IS '预期完成时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."EXPECT_DURATION" IS '预期时长';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."STATE" IS '节点状态';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."STATUS" IS '执行状态';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."OWNER" IS '所有者';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."ACT_MODE" IS '执行模式 0 D,1R, 2 U';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."JUMP_FLAG" IS '流程跳转 记录跳转类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."PRIORITY" IS '优先级';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW"."VIEW_ID" IS '任务视图ID 缺省全量视图';

-- ----------------------------
-- Table structure for WF_ORD_FLOW_ROUTE
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_FLOW_ROUTE";
CREATE TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" (
"FO_ID" NUMBER(10) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"FO_VER" NUMBER(2) NOT NULL ,
"FLOW_ID" NUMBER(10) NULL ,
"FLOW_VER" NUMBER(3) NULL ,
"NODE_ID" NUMBER(10) NOT NULL ,
"STATUS" NUMBER(2) NULL ,
"NODE_ID_TO" NUMBER(10) NOT NULL ,
"FO_SN_TO" NUMBER(10) NULL ,
"WAIT_TYPE" NUMBER(2) NOT NULL ,
"FLOW_FLAG" NUMBER(2) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW_ROUTE"."WAIT_TYPE" IS '进入等待：0 any ,1 all';
COMMENT ON COLUMN "WOPDB"."WF_ORD_FLOW_ROUTE"."FLOW_FLAG" IS '0 normal 1 revision 2 cancel 3 revision-cancel';

-- ----------------------------
-- Table structure for WF_ORD_FLOW_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_FLOW_VIEW";
CREATE TABLE "WOPDB"."WF_ORD_FLOW_VIEW" (
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"VIEW_ID" NUMBER(10) NOT NULL ,
"ANNOTATION" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_MEMBER
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_MEMBER";
CREATE TABLE "WOPDB"."WF_ORD_MEMBER" (
"FO_ID" NUMBER(10) NOT NULL ,
"USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"ROLE_ID" VARCHAR2(200 BYTE) NOT NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NULL ,
"ACCEPT_DTS" DATE NOT NULL ,
"FO_SN" NUMBER(5) NULL ,
"CONFIRM" NUMBER(1) NOT NULL ,
"SUBMIT_DTS" DATE NULL ,
"WORK_DAYS" NUMBER(3) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."FO_ID" IS '定单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."USR_ID" IS '用户ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."ROLE_ID" IS '0 发起人 1管控人 2管控人 4执行人 5支撑人';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."ACCEPT_DTS" IS '接受时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."CONFIRM" IS '1释放 2接受 4完成';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."SUBMIT_DTS" IS '提交时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_MEMBER"."WORK_DAYS" IS '工作天数';

-- ----------------------------
-- Table structure for WF_ORD_NOTIFY
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_NOTIFY";
CREATE TABLE "WOPDB"."WF_ORD_NOTIFY" (
"NOTE_ID" NUMBER(10) NOT NULL ,
"NOTE_TYPE" NUMBER(2) NOT NULL ,
"FO_ID" NUMBER(15) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"FLOW_ID" NUMBER(10) NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"CONTEXT" VARCHAR2(2000 BYTE) NULL ,
"OWNER" VARCHAR2(50 BYTE) NOT NULL ,
"REMARK" VARCHAR2(2000 BYTE) NULL ,
"ADD_DTS" DATE NOT NULL ,
"EXCEP_TYPE" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_REMARK
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_REMARK";
CREATE TABLE "WOPDB"."WF_ORD_REMARK" (
"FO_ID" NUMBER(15) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"REMARK_KEY" VARCHAR2(50 BYTE) NOT NULL ,
"REMARK_VAL" VARCHAR2(200 BYTE) NOT NULL ,
"TASK_ID" NUMBER(10) NULL ,
"OWNER" VARCHAR2(20 BYTE) NULL ,
"ADD_DTS" DATE NOT NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_REMARK_DEF
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_REMARK_DEF";
CREATE TABLE "WOPDB"."WF_ORD_REMARK_DEF" (
"REMARK_KEY" VARCHAR2(50 BYTE) NOT NULL ,
"REMARK_DESC" VARCHAR2(200 BYTE) NULL ,
"ANNOTATION" VARCHAR2(200 BYTE) NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_REPORT
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_REPORT";
CREATE TABLE "WOPDB"."WF_ORD_REPORT" (
"FO_ID" NUMBER(10) NOT NULL ,
"USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NOT NULL ,
"PROGRESS" VARCHAR2(4000 BYTE) NOT NULL ,
"PROBLEM" VARCHAR2(4000 BYTE) NULL ,
"NEXTPLAN" VARCHAR2(4000 BYTE) NULL ,
"REPORT_STAGE" VARCHAR2(200 BYTE) NULL ,
"EFFORT" NUMBER(3) NULL ,
"REPORT_DATE" DATE NULL ,
"START_STAGE" VARCHAR2(200 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(200 BYTE) NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"REPORT_SN" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."FO_ID" IS '定单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."USR_ID" IS '用户ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."TASK_ID" IS '任务ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."PROGRESS" IS '本期进展、本周进展';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."PROBLEM" IS '待解决/协调问题';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."NEXTPLAN" IS '下周计划';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."REPORT_STAGE" IS '阶段状态 售前';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."EFFORT" IS '本期工作量';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."REPORT_DATE" IS '记录时间';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."START_STAGE" IS '启动阶段';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."SERV_TYPE" IS '业务类别：ICT项目综合 大数据 医疗 制造 视频';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."REMARK" IS '备注（需协调资源）';
COMMENT ON COLUMN "WOPDB"."WF_ORD_REPORT"."REPORT_SN" IS '序列主键';

-- ----------------------------
-- Table structure for WF_ORD_RESO
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_RESO";
CREATE TABLE "WOPDB"."WF_ORD_RESO" (
"FO_ID" NUMBER(10) NOT NULL ,
"RESO_ID" VARCHAR2(50 BYTE) NOT NULL ,
"RESO_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"DATA_ID" NUMBER(10) NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"VALUE_O" VARCHAR2(2000 BYTE) NULL ,
"USE_FLAG" NUMBER(2) NOT NULL ,
"OWNER" VARCHAR2(50 BYTE) NULL ,
"UPD_DTS" DATE NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."RESO_ID" IS '资源ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."RESO_TYPE" IS '资源类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."VALUE" IS '当前值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."VALUE_O" IS '原值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."USE_FLAG" IS '0 在用 1废弃 ';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."OWNER" IS '操作人';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO"."UPD_DTS" IS '入库更新时间';

-- ----------------------------
-- Table structure for WF_ORD_RESO_HIST
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_RESO_HIST";
CREATE TABLE "WOPDB"."WF_ORD_RESO_HIST" (
"FO_ID" NUMBER(15) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"RESO_ID" VARCHAR2(50 BYTE) NOT NULL ,
"RESO_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"UPD_VER" NUMBER(3) NOT NULL ,
"UPD_TYPE" NUMBER(2) NOT NULL ,
"UPD_DTS" DATE NOT NULL ,
"OWNER" VARCHAR2(50 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO_HIST"."RESO_ID" IS '资源ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO_HIST"."RESO_TYPE" IS '资源类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO_HIST"."VALUE" IS '值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO_HIST"."UPD_VER" IS '变更版本';
COMMENT ON COLUMN "WOPDB"."WF_ORD_RESO_HIST"."UPD_TYPE" IS '变更类型：1修改 2删除';

-- ----------------------------
-- Table structure for WF_ORD_SNAP
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_SNAP";
CREATE TABLE "WOPDB"."WF_ORD_SNAP" (
"FO_SN" NUMBER(10) NOT NULL ,
"FO_ID" NUMBER(20) NOT NULL ,
"INST_ID" NUMBER(10) NOT NULL ,
"DATA_ID" NUMBER(10) NOT NULL ,
"DATA_DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"DATA_PATH" VARCHAR2(500 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"VALUE_UPD" VARCHAR2(2000 BYTE) NULL ,
"UPD_TYPE" NUMBER(2) DEFAULT 0  NOT NULL ,
"UPD_USER" VARCHAR2(50 BYTE) NULL ,
"ANNOTATION" VARCHAR2(2000 BYTE) NULL ,
"POSITION" NUMBER(5) NULL ,
"PARENT_INST_ID" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."FO_SN" IS '定单SN';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."FO_ID" IS '定单ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."INST_ID" IS '节点实例ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."DATA_ID" IS '节点ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."DATA_DICT_ID" IS '数据字典ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."DATA_PATH" IS '数据路径';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."VALUE" IS '原值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."VALUE_UPD" IS '更新值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."UPD_TYPE" IS '0-无操作 1-更新 2-删除';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."UPD_USER" IS '操作用户';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."ANNOTATION" IS '注释';
COMMENT ON COLUMN "WOPDB"."WF_ORD_SNAP"."PARENT_INST_ID" IS '父节点实例ID';

-- ----------------------------
-- Table structure for WF_ORD_STATUS
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_STATUS";
CREATE TABLE "WOPDB"."WF_ORD_STATUS" (
"STATUS_ID" NUMBER(2) NOT NULL ,
"STATUS_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"STATUS_TYPE" NUMBER(2) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_STRUCT
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_STRUCT";
CREATE TABLE "WOPDB"."WF_ORD_STRUCT" (
"DATA_ID" NUMBER(10) NOT NULL ,
"DATA_TYPE" NUMBER(2) NOT NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PATH" VARCHAR2(500 BYTE) NOT NULL ,
"POSITION" NUMBER(5) NOT NULL ,
"SIGNIFICANT" NUMBER(2) NOT NULL ,
"MULTIPLE" NUMBER(2) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"PARENT_DATA_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."DATA_ID" IS '数据节点ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."DATA_TYPE" IS '节点类型：0 root 1 sublayer 2 TBD 3 leaf';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."DICT_ID" IS '字典ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."PATH" IS 'xptah：层级节点路径';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."POSITION" IS '排列顺序号';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."SIGNIFICANT" IS '关键值： 0 否 1是';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."MULTIPLE" IS '是否多实例：0 否 1是';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."SERV_CATEGORY" IS '服务目录';
COMMENT ON COLUMN "WOPDB"."WF_ORD_STRUCT"."PARENT_DATA_ID" IS '父节点ID';

-- ----------------------------
-- Table structure for WF_ORD_TASK_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_TASK_VIEW";
CREATE TABLE "WOPDB"."WF_ORD_TASK_VIEW" (
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NOT NULL ,
"VIEW_ID" NUMBER(10) NOT NULL ,
"ANNOTATION" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_TEMPLATE
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_TEMPLATE";
CREATE TABLE "WOPDB"."WF_ORD_TEMPLATE" (
"DATA_ID" NUMBER(10) NOT NULL ,
"DATA_TYPE" NUMBER(2) NOT NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PATH" VARCHAR2(500 BYTE) NOT NULL ,
"POSITION" NUMBER(5) NOT NULL ,
"SIGNIFICANT" NUMBER(2) NOT NULL ,
"MULTIPLE" NUMBER(2) NOT NULL ,
"SERV_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"PARENT_DATA_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."DATA_ID" IS '数据节点ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."DATA_TYPE" IS '数据节点类型 ：0 root 1 sublayer 2reserved 3 leaf 4 resource';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."DICT_ID" IS '数据字典';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."PATH" IS '层级路径';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."POSITION" IS '同层级排序';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."SIGNIFICANT" IS '0 非关键 1 关键';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."MULTIPLE" IS '0 单例 1 多例';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."SERV_TYPE" IS '服务类型';
COMMENT ON COLUMN "WOPDB"."WF_ORD_TEMPLATE"."SERV_CATEGORY" IS '服务目录';

-- ----------------------------
-- Table structure for WF_ORD_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_VIEW";
CREATE TABLE "WOPDB"."WF_ORD_VIEW" (
"VIEW_ID" NUMBER(10) NOT NULL ,
"VIEW_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NULL ,
"VIEW_NAME" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORD_VIEW_DATA
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_VIEW_DATA";
CREATE TABLE "WOPDB"."WF_ORD_VIEW_DATA" (
"VIEW_ID" NUMBER(10) NOT NULL ,
"DATA_ID" NUMBER(10) NOT NULL ,
"DATA_TYPE" NUMBER(2) NOT NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PATH" VARCHAR2(500 BYTE) NOT NULL ,
"EDITABLE" NUMBER(2) NOT NULL ,
"VALIDATION" VARCHAR2(2000 BYTE) NOT NULL ,
"DEFAULT_VAL" VARCHAR2(500 BYTE) NOT NULL ,
"INSTANCE_MAX" NUMBER(3) NOT NULL ,
"INSTANCE_MIN" NUMBER(3) NOT NULL ,
"SIGNIFICANT" NUMBER(2) NOT NULL ,
"POSITION" NUMBER(5) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NOT NULL ,
"POS_ROW" NUMBER(3) NOT NULL ,
"POS_COL" NUMBER(3) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."VIEW_ID" IS '视图ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."EDITABLE" IS '0 否 1 是';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."VALIDATION" IS '校验规则';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."DEFAULT_VAL" IS '缺省值';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."INSTANCE_MAX" IS '最大实例';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."INSTANCE_MIN" IS '最少实例';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."SIGNIFICANT" IS '关键值 0 否 1是(缺省)';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."ANNOTATION" IS '提示';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."POS_ROW" IS '行号';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_DATA"."POS_COL" IS '列号';

-- ----------------------------
-- Table structure for WF_ORD_VIEW_FRAME
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORD_VIEW_FRAME";
CREATE TABLE "WOPDB"."WF_ORD_VIEW_FRAME" (
"VIEW_ID" NUMBER(10) NOT NULL ,
"DATA_ID" NUMBER(10) NOT NULL ,
"DICT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PATH" VARCHAR2(500 BYTE) NOT NULL ,
"POSITION" NUMBER(5) NOT NULL ,
"POS_ROW" NUMBER(3) NOT NULL ,
"POS_COL" NUMBER(3) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NOT NULL ,
"EDITABLE" NUMBER(2) NULL ,
"TYPE" VARCHAR2(50 BYTE) NULL ,
"VALIDATION" VARCHAR2(200 BYTE) NULL ,
"MIN" VARCHAR2(50 BYTE) NULL ,
"MAX" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."VIEW_ID" IS '视图ID';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."POS_ROW" IS '行号';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."POS_COL" IS '列号';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."ANNOTATION" IS '提示';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."EDITABLE" IS '0 否 1是';
COMMENT ON COLUMN "WOPDB"."WF_ORD_VIEW_FRAME"."TYPE" IS 'T textarea I input S select A href';

-- ----------------------------
-- Table structure for WF_ORDHIST
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORDHIST";
CREATE TABLE "WOPDB"."WF_ORDHIST" (
"FSN" VARCHAR2(50 BYTE) NOT NULL ,
"FO_ID" NUMBER(20) NOT NULL ,
"FO_VER" NUMBER(2) NOT NULL ,
"SO_ID" VARCHAR2(50 BYTE) NOT NULL ,
"SO_VER" NUMBER(2) NOT NULL ,
"SO_NO" VARCHAR2(200 BYTE) NULL ,
"FLOW_ID" NUMBER(10) NOT NULL ,
"FLOW_VER" NUMBER(3) NOT NULL ,
"FLOW_TYPE" CHAR(1 BYTE) NOT NULL ,
"FLOW_STATUS" NUMBER(2) NOT NULL ,
"FLOW_STATE" NUMBER(2) NOT NULL ,
"REFERENCE" VARCHAR2(200 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"PRIORITY" NUMBER(2) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"COMPLETE_DTS" DATE NULL ,
"EXPECT_DURATION" NUMBER NOT NULL ,
"EXPECT_COMPL_DTS" DATE NOT NULL ,
"REMARK" VARCHAR2(4000 BYTE) NULL ,
"FTX_AUTHOR" VARCHAR2(50 BYTE) NOT NULL ,
"FTX_OPERATE" VARCHAR2(200 BYTE) NULL ,
"FTX_REASON" VARCHAR2(200 BYTE) NULL ,
"FTX_OPERATE_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_ORGANIZATION
-- ----------------------------
DROP TABLE "WOPDB"."WF_ORGANIZATION";
CREATE TABLE "WOPDB"."WF_ORGANIZATION" (
"ORG_ID" NUMBER(10) NOT NULL ,
"ORG_NO" VARCHAR2(50 BYTE) NOT NULL ,
"ORG_TYPE" NUMBER(3) NOT NULL ,
"ORG_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"ORG_REFERNCE" VARCHAR2(2000 BYTE) NULL ,
"ANNOTATION" VARCHAR2(2000 BYTE) NULL ,
"ANCES_ORG_ID" NUMBER(10) NULL ,
"HIER_DEPTH" NUMBER(3) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ORG_NO" IS '组织编号';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ORG_TYPE" IS '组织类型 0 区域';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ORG_NAME" IS '组织名称';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ORG_REFERNCE" IS '参考';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ANNOTATION" IS '备注';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."ANCES_ORG_ID" IS '上层组织ID';
COMMENT ON COLUMN "WOPDB"."WF_ORGANIZATION"."HIER_DEPTH" IS '层级号 0 顶级';

-- ----------------------------
-- Table structure for WF_ROLE_EVA
-- ----------------------------
DROP TABLE "WOPDB"."WF_ROLE_EVA";
CREATE TABLE "WOPDB"."WF_ROLE_EVA" (
"ROLE_IO" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_ITEM1" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM2" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM3" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM4" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM5" VARCHAR2(200 BYTE) NULL ,
"DEPT_NO" VARCHAR2(200 BYTE) NULL ,
"FLOW_ID" NUMBER(5) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_RULE
-- ----------------------------
DROP TABLE "WOPDB"."WF_RULE";
CREATE TABLE "WOPDB"."WF_RULE" (
"RULE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"RULE_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"RULE_INPUT" VARCHAR2(4000 BYTE) NOT NULL ,
"RULE_CONTEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(50 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(4000 BYTE) NULL ,
"PROC_TYPE" NUMBER(2) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_RULE"."PROC_TYPE" IS '0 DATA';

-- ----------------------------
-- Table structure for WF_SERV
-- ----------------------------
DROP TABLE "WOPDB"."WF_SERV";
CREATE TABLE "WOPDB"."WF_SERV" (
"SO_ID" NUMBER(10) NOT NULL ,
"SO_VER" NUMBER(2) NOT NULL ,
"SO_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SO_SOURCE" VARCHAR2(20 BYTE) NOT NULL ,
"SO_NO" VARCHAR2(200 BYTE) NOT NULL ,
"REF_NO" VARCHAR2(200 BYTE) NULL ,
"REL_NO" VARCHAR2(200 BYTE) NULL ,
"CREATE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"STATE" NUMBER(2) NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL ,
"CONTEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"CONTENT" VARCHAR2(4000 BYTE) NULL ,
"OWNER" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_SERV_REQ
-- ----------------------------
DROP TABLE "WOPDB"."WF_SERV_REQ";
CREATE TABLE "WOPDB"."WF_SERV_REQ" (
"SO_SN" NUMBER(5) NOT NULL ,
"SO_ID" NUMBER(10) NOT NULL ,
"SO_VER" NUMBER(2) NOT NULL ,
"SO_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"SO_SOURCE" VARCHAR2(20 BYTE) NOT NULL ,
"SO_NO" VARCHAR2(200 BYTE) NOT NULL ,
"REF_NO" VARCHAR2(200 BYTE) NULL ,
"REL_NO" VARCHAR2(200 BYTE) NULL ,
"WFO_NUM" VARCHAR2(50 BYTE) NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"PROCESS_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"PROC_STATE" NUMBER(2) NOT NULL ,
"PROC_STATUS" NUMBER(2) NOT NULL ,
"ORD_TARGET" VARCHAR2(50 BYTE) NOT NULL ,
"REQ_CONTEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"RET_CONTEXT" VARCHAR2(4000 BYTE) NULL ,
"REMARK" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_SIMU_ORD
-- ----------------------------
DROP TABLE "WOPDB"."WF_SIMU_ORD";
CREATE TABLE "WOPDB"."WF_SIMU_ORD" (
"SN" NUMBER(10) NOT NULL ,
"TYPE" NUMBER(2) NOT NULL ,
"BAT_NO" VARCHAR2(20 BYTE) NOT NULL ,
"IMP_DTS" TIMESTAMP(6)  NOT NULL ,
"PROC_STA" NUMBER(2) NOT NULL ,
"ORD_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ID" VARCHAR2(50 BYTE) NULL ,
"CREATE_DATE" TIMESTAMP(6)  NOT NULL ,
"FINISH_DATE" TIMESTAMP(6)  NULL ,
"PROD_CODE" VARCHAR2(50 BYTE) NULL ,
"PROD_NAME" VARCHAR2(500 BYTE) NULL ,
"ACCEPT_DEPT" VARCHAR2(50 BYTE) NULL ,
"CUST_ID" VARCHAR2(500 BYTE) NULL ,
"CUST_NAME" VARCHAR2(500 BYTE) NOT NULL ,
"CUST_CONT" VARCHAR2(500 BYTE) NOT NULL ,
"CUST_CONT_TEL" VARCHAR2(500 BYTE) NOT NULL ,
"CUST_MGR" VARCHAR2(500 BYTE) NOT NULL ,
"CUST_MGR_TEL" VARCHAR2(500 BYTE) NOT NULL ,
"CUST_DEMAND" VARCHAR2(500 BYTE) NULL ,
"SP01" VARCHAR2(500 BYTE) NULL ,
"SP02" VARCHAR2(500 BYTE) NULL ,
"SP03" VARCHAR2(500 BYTE) NULL ,
"SP04" VARCHAR2(500 BYTE) NULL ,
"SP05" VARCHAR2(500 BYTE) NULL ,
"SP06" VARCHAR2(500 BYTE) NULL ,
"SP07" VARCHAR2(500 BYTE) NULL ,
"SP08" VARCHAR2(500 BYTE) NULL ,
"SP09" VARCHAR2(500 BYTE) NULL ,
"SP10" VARCHAR2(500 BYTE) NULL ,
"SP11" VARCHAR2(500 BYTE) NULL ,
"SP12" VARCHAR2(500 BYTE) NULL ,
"SP13" VARCHAR2(500 BYTE) NULL ,
"SP14" VARCHAR2(500 BYTE) NULL ,
"SP15" VARCHAR2(500 BYTE) NULL ,
"SP16" VARCHAR2(500 BYTE) NULL ,
"SP17" VARCHAR2(500 BYTE) NULL ,
"SP18" VARCHAR2(500 BYTE) NULL ,
"SP19" VARCHAR2(500 BYTE) NULL ,
"SP20" VARCHAR2(500 BYTE) NULL ,
"SP21" VARCHAR2(500 BYTE) NULL ,
"SP22" VARCHAR2(500 BYTE) NULL ,
"SP23" VARCHAR2(500 BYTE) NULL ,
"SP24" VARCHAR2(500 BYTE) NULL ,
"SP25" VARCHAR2(500 BYTE) NULL ,
"SP26" VARCHAR2(500 BYTE) NULL ,
"SP27" VARCHAR2(500 BYTE) NULL ,
"SP28" VARCHAR2(500 BYTE) NULL ,
"SP29" VARCHAR2(500 BYTE) NULL ,
"SP30" VARCHAR2(500 BYTE) NULL ,
"SP31" VARCHAR2(500 BYTE) NULL ,
"SP32" VARCHAR2(500 BYTE) NULL ,
"SP33" VARCHAR2(500 BYTE) NULL ,
"SP34" VARCHAR2(500 BYTE) NULL ,
"SP35" VARCHAR2(500 BYTE) NULL ,
"SP36" VARCHAR2(500 BYTE) NULL ,
"SP37" VARCHAR2(500 BYTE) NULL ,
"SP38" VARCHAR2(500 BYTE) NULL ,
"SP39" VARCHAR2(500 BYTE) NULL ,
"SP40" VARCHAR2(500 BYTE) NULL ,
"SP41" VARCHAR2(500 BYTE) NULL ,
"SP42" VARCHAR2(500 BYTE) NULL ,
"SP43" VARCHAR2(500 BYTE) NULL ,
"SP44" VARCHAR2(500 BYTE) NULL ,
"SP45" VARCHAR2(500 BYTE) NULL ,
"SP46" VARCHAR2(500 BYTE) NULL ,
"SP47" VARCHAR2(500 BYTE) NULL ,
"SP48" VARCHAR2(500 BYTE) NULL ,
"SP49" VARCHAR2(500 BYTE) NULL ,
"SP50" VARCHAR2(500 BYTE) NULL ,
"SP51" VARCHAR2(500 BYTE) NULL ,
"SP52" VARCHAR2(500 BYTE) NULL ,
"SP53" VARCHAR2(500 BYTE) NULL ,
"SP54" VARCHAR2(500 BYTE) NULL ,
"SP55" VARCHAR2(500 BYTE) NULL ,
"SP56" VARCHAR2(500 BYTE) NULL ,
"SP57" VARCHAR2(500 BYTE) NULL ,
"SP58" VARCHAR2(500 BYTE) NULL ,
"SP59" VARCHAR2(500 BYTE) NULL ,
"SP60" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SN" IS '序列号';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."TYPE" IS '类型';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."BAT_NO" IS '批号 yyyymmdd';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."IMP_DTS" IS '导入时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."PROC_STA" IS '处理状态 0 初始 1 待补充 2 处理中 4 完成';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."ORD_ID" IS '业务单号 执行单号 SHSH';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CRM_ID" IS 'CRM订单号';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CREATE_DATE" IS '订单创建时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."FINISH_DATE" IS '订单完工时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."PROD_CODE" IS '产品代码';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."PROD_NAME" IS '产品名称';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."ACCEPT_DEPT" IS '受理单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_ID" IS '客户id';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_NAME" IS '客户名';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_CONT" IS '客户联系人';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_CONT_TEL" IS '客户联系人电话';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_MGR" IS '客户经理';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_MGR_TEL" IS '客户经理电话';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."CUST_DEMAND" IS '客户需求';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP01" IS '售前支撑责任单位 --1~10为售前字段';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP02" IS '联系人';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP03" IS '联系方式';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP04" IS '是否有合作单位(SI)支撑';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP05" IS '合作单位(SI)';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP06" IS '合作单位(SI)联系人';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP07" IS '联系方式';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP08" IS '合作单位(SI)承担工作';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP09" IS '其他情况说明';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP10" IS 'TBD';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP11" IS '售中实施责任单位 11~30为售中字段';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP12" IS '项目要求完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP13" IS '项目经理';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP14" IS '联系方式';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP15" IS '平台数据配置单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP16" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP17" IS '应用系统安装单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP18" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP19" IS '线路提供单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP20" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP21" IS '终端供货单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP22" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP23" IS '机具安装单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP24" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP25" IS '其他环节';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP26" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP27" IS '验收竣工时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP28" IS '参与验收单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP29" IS '其他情况说明';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP30" IS 'TBD';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP31" IS '售后服务责任单位 31~60为售后字段';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP32" IS '售后交付时间';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP33" IS '产品维护经理/客户工程师';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP34" IS '联系方式';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP35" IS '平台维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP36" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP37" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP38" IS '应用系统维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP39" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP40" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP41" IS '线路维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP42" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP43" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP44" IS '终端维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP45" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP46" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP47" IS '机具维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP48" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP49" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP50" IS '其他维护单位';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP51" IS '维保期';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP52" IS '成本来源';
COMMENT ON COLUMN "WOPDB"."WF_SIMU_ORD"."SP53" IS '其他情况说明';

-- ----------------------------
-- Table structure for WF_STAT_AI
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_AI";
CREATE TABLE "WOPDB"."WF_STAT_AI" (
"FO_ID" NUMBER NULL ,
"FLOW_STATE" VARCHAR2(10 BYTE) NULL ,
"CREATE_DTS" VARCHAR2(25 BYTE) NULL ,
"COMPLETE_DTS" VARCHAR2(25 BYTE) NULL ,
"EXPECT_COMPL_DTS" VARCHAR2(25 BYTE) NULL ,
"REFNO" VARCHAR2(25 BYTE) NULL ,
"PROJNO" VARCHAR2(25 BYTE) NULL ,
"PROJNAME" VARCHAR2(2000 BYTE) NULL ,
"OOWNER" VARCHAR2(25 BYTE) NULL ,
"ORG_NAME" VARCHAR2(25 BYTE) NULL ,
"CUST" VARCHAR2(250 BYTE) NULL ,
"CUSTPM" VARCHAR2(25 BYTE) NULL ,
"DPPM" VARCHAR2(100 BYTE) NULL ,
"ONEDEPT" VARCHAR2(25 BYTE) NULL ,
"EXPM" VARCHAR2(25 BYTE) NULL ,
"WF_ORGANIZATION" VARCHAR2(25 BYTE) NULL ,
"FCOUNT" VARCHAR2(25 BYTE) NULL ,
"BUZOPT_REMARK" VARCHAR2(4000 BYTE) NULL ,
"OPT_PHASE" VARCHAR2(100 BYTE) NULL ,
"OPT_SIGN_DATE" VARCHAR2(25 BYTE) NULL ,
"CONTRACT_NO" VARCHAR2(100 BYTE) NULL ,
"SIGN_DATE" VARCHAR2(25 BYTE) NULL ,
"CONTRACT_ST" VARCHAR2(25 BYTE) NULL ,
"CONTRACT_ET" VARCHAR2(25 BYTE) NULL ,
"CONTRACT_AMOUNT" VARCHAR2(25 BYTE) NULL ,
"YEARLY_INCOME" VARCHAR2(25 BYTE) NULL ,
"ONE_LVE" VARCHAR2(25 BYTE) NULL ,
"TWO_LEV" VARCHAR2(25 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STAT_DSJ
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_DSJ";
CREATE TABLE "WOPDB"."WF_STAT_DSJ" (
"FOID" NVARCHAR2(20) NOT NULL ,
"STIME" NVARCHAR2(14) NOT NULL ,
"STATE" CHAR(1 BYTE) NOT NULL ,
"TYPE" NUMBER NOT NULL ,
"FDESC" VARCHAR2(1000 BYTE) NULL ,
"INT_REQUEST" CLOB NULL ,
"INT_RESPONSE" CLOB NULL ,
"CREATE_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_STAT_DSJ"."TYPE" IS '22小微 17原接口 18五星评价';
COMMENT ON COLUMN "WOPDB"."WF_STAT_DSJ"."FDESC" IS '失败描述';
COMMENT ON COLUMN "WOPDB"."WF_STAT_DSJ"."INT_REQUEST" IS '请求报文';
COMMENT ON COLUMN "WOPDB"."WF_STAT_DSJ"."INT_RESPONSE" IS '反馈报文';
COMMENT ON COLUMN "WOPDB"."WF_STAT_DSJ"."CREATE_TIME" IS '生成时间';

-- ----------------------------
-- Table structure for WF_STAT_OP0
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_OP0";
CREATE TABLE "WOPDB"."WF_STAT_OP0" (
"ST_NO" NUMBER(10) NOT NULL ,
"ST_DT" DATE NOT NULL ,
"ST_TP" NUMBER(3) NOT NULL ,
"ST_ST" NUMBER(3) NOT NULL ,
"STDT01" VARCHAR2(500 BYTE) NULL ,
"STDT02" VARCHAR2(500 BYTE) NULL ,
"STDT03" VARCHAR2(500 BYTE) NULL ,
"STDT04" VARCHAR2(500 BYTE) NULL ,
"STDT05" VARCHAR2(500 BYTE) NULL ,
"STDT06" VARCHAR2(500 BYTE) NULL ,
"STDT07" VARCHAR2(500 BYTE) NULL ,
"STDT08" VARCHAR2(500 BYTE) NULL ,
"STDT09" VARCHAR2(500 BYTE) NULL ,
"STDT10" VARCHAR2(500 BYTE) NULL ,
"STDT11" VARCHAR2(500 BYTE) NULL ,
"STDT12" VARCHAR2(500 BYTE) NULL ,
"STDT13" VARCHAR2(500 BYTE) NULL ,
"STDT14" VARCHAR2(500 BYTE) NULL ,
"STDT15" VARCHAR2(500 BYTE) NULL ,
"STDT16" VARCHAR2(500 BYTE) NULL ,
"STDT17" VARCHAR2(500 BYTE) NULL ,
"STDT18" VARCHAR2(500 BYTE) NULL ,
"STDT19" VARCHAR2(500 BYTE) NULL ,
"STDT20" VARCHAR2(500 BYTE) NULL ,
"STDT21" VARCHAR2(500 BYTE) NULL ,
"STDT22" VARCHAR2(500 BYTE) NULL ,
"STDT23" VARCHAR2(500 BYTE) NULL ,
"STDT24" VARCHAR2(500 BYTE) NULL ,
"STDT25" VARCHAR2(500 BYTE) NULL ,
"STDT26" VARCHAR2(500 BYTE) NULL ,
"STDT27" VARCHAR2(500 BYTE) NULL ,
"STDT28" VARCHAR2(500 BYTE) NULL ,
"STDT29" VARCHAR2(500 BYTE) NULL ,
"STDT30" VARCHAR2(500 BYTE) NULL ,
"STDT31" VARCHAR2(500 BYTE) NULL ,
"STDT32" VARCHAR2(500 BYTE) NULL ,
"STDT33" VARCHAR2(500 BYTE) NULL ,
"STDT34" VARCHAR2(500 BYTE) NULL ,
"STDT35" VARCHAR2(500 BYTE) NULL ,
"STDT36" VARCHAR2(500 BYTE) NULL ,
"STDT37" VARCHAR2(500 BYTE) NULL ,
"STDT38" VARCHAR2(500 BYTE) NULL ,
"STDT39" VARCHAR2(500 BYTE) NULL ,
"STDT40" VARCHAR2(500 BYTE) NULL ,
"STDT41" VARCHAR2(500 BYTE) NULL ,
"STDT42" VARCHAR2(500 BYTE) NULL ,
"STDT43" VARCHAR2(500 BYTE) NULL ,
"STDT44" VARCHAR2(500 BYTE) NULL ,
"STDT45" VARCHAR2(500 BYTE) NULL ,
"STDT46" VARCHAR2(500 BYTE) NULL ,
"STDT47" VARCHAR2(500 BYTE) NULL ,
"STDT48" VARCHAR2(500 BYTE) NULL ,
"STDT49" VARCHAR2(500 BYTE) NULL ,
"STDT50" VARCHAR2(500 BYTE) NULL ,
"STDT51" VARCHAR2(500 BYTE) NULL ,
"STDT52" VARCHAR2(500 BYTE) NULL ,
"STDT53" VARCHAR2(500 BYTE) NULL ,
"STDT54" VARCHAR2(500 BYTE) NULL ,
"STDT55" VARCHAR2(500 BYTE) NULL ,
"STDT56" VARCHAR2(500 BYTE) NULL ,
"STDT57" VARCHAR2(500 BYTE) NULL ,
"STDT58" VARCHAR2(500 BYTE) NULL ,
"STDT59" VARCHAR2(500 BYTE) NULL ,
"STDT60" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STAT_OP1
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_OP1";
CREATE TABLE "WOPDB"."WF_STAT_OP1" (
"ST_NO" NUMBER(10) NOT NULL ,
"ST_DT" DATE NOT NULL ,
"ST_TP" NUMBER(3) NOT NULL ,
"ST_ST" NUMBER(3) NOT NULL ,
"STDT01" VARCHAR2(500 BYTE) NULL ,
"STDT02" VARCHAR2(500 BYTE) NULL ,
"STDT03" VARCHAR2(500 BYTE) NULL ,
"STDT04" VARCHAR2(500 BYTE) NULL ,
"STDT05" VARCHAR2(500 BYTE) NULL ,
"STDT06" VARCHAR2(500 BYTE) NULL ,
"STDT07" VARCHAR2(500 BYTE) NULL ,
"STDT08" VARCHAR2(500 BYTE) NULL ,
"STDT09" VARCHAR2(500 BYTE) NULL ,
"STDT10" VARCHAR2(500 BYTE) NULL ,
"STDT11" VARCHAR2(500 BYTE) NULL ,
"STDT12" VARCHAR2(500 BYTE) NULL ,
"STDT13" VARCHAR2(500 BYTE) NULL ,
"STDT14" VARCHAR2(500 BYTE) NULL ,
"STDT15" VARCHAR2(500 BYTE) NULL ,
"STDT16" VARCHAR2(500 BYTE) NULL ,
"STDT17" VARCHAR2(500 BYTE) NULL ,
"STDT18" VARCHAR2(500 BYTE) NULL ,
"STDT19" VARCHAR2(500 BYTE) NULL ,
"STDT20" VARCHAR2(500 BYTE) NULL ,
"STDT21" VARCHAR2(500 BYTE) NULL ,
"STDT22" VARCHAR2(500 BYTE) NULL ,
"STDT23" VARCHAR2(500 BYTE) NULL ,
"STDT24" VARCHAR2(500 BYTE) NULL ,
"STDT25" VARCHAR2(500 BYTE) NULL ,
"STDT26" VARCHAR2(500 BYTE) NULL ,
"STDT27" VARCHAR2(500 BYTE) NULL ,
"STDT28" VARCHAR2(500 BYTE) NULL ,
"STDT29" VARCHAR2(500 BYTE) NULL ,
"STDT30" VARCHAR2(500 BYTE) NULL ,
"STDT31" VARCHAR2(500 BYTE) NULL ,
"STDT32" VARCHAR2(500 BYTE) NULL ,
"STDT33" VARCHAR2(500 BYTE) NULL ,
"STDT34" VARCHAR2(500 BYTE) NULL ,
"STDT35" VARCHAR2(500 BYTE) NULL ,
"STDT36" VARCHAR2(500 BYTE) NULL ,
"STDT37" VARCHAR2(500 BYTE) NULL ,
"STDT38" VARCHAR2(500 BYTE) NULL ,
"STDT39" VARCHAR2(500 BYTE) NULL ,
"STDT40" VARCHAR2(500 BYTE) NULL ,
"STDT41" VARCHAR2(500 BYTE) NULL ,
"STDT42" VARCHAR2(500 BYTE) NULL ,
"STDT43" VARCHAR2(500 BYTE) NULL ,
"STDT44" VARCHAR2(500 BYTE) NULL ,
"STDT45" VARCHAR2(500 BYTE) NULL ,
"STDT46" VARCHAR2(500 BYTE) NULL ,
"STDT47" VARCHAR2(500 BYTE) NULL ,
"STDT48" VARCHAR2(500 BYTE) NULL ,
"STDT49" VARCHAR2(500 BYTE) NULL ,
"STDT50" VARCHAR2(500 BYTE) NULL ,
"STDT51" VARCHAR2(500 BYTE) NULL ,
"STDT52" VARCHAR2(500 BYTE) NULL ,
"STDT53" VARCHAR2(500 BYTE) NULL ,
"STDT54" VARCHAR2(500 BYTE) NULL ,
"STDT55" VARCHAR2(500 BYTE) NULL ,
"STDT56" VARCHAR2(500 BYTE) NULL ,
"STDT57" VARCHAR2(500 BYTE) NULL ,
"STDT58" VARCHAR2(500 BYTE) NULL ,
"STDT59" VARCHAR2(500 BYTE) NULL ,
"STDT60" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STAT_RECORD
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_RECORD";
CREATE TABLE "WOPDB"."WF_STAT_RECORD" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"RECEIVE_DTS" DATE NULL ,
"PRINT_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"TOTAL_HOURS" NUMBER NULL ,
"TOTAL_HOURS_P1" NUMBER NULL ,
"TOTAL_HOURS_P2" NUMBER NULL ,
"WORK_HOURS" NUMBER NULL ,
"WORK_HOURS_P1" NUMBER NULL ,
"WORK_HOURS_P2" NUMBER NULL ,
"IS_DELETE" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STAT_SC0
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_SC0";
CREATE TABLE "WOPDB"."WF_STAT_SC0" (
"ST_NO" NUMBER(10) NOT NULL ,
"ST_DT" DATE NOT NULL ,
"PLANE_TYPE" NVARCHAR2(10) NOT NULL ,
"ORDER_NUM" NUMBER(10) DEFAULT 0  NOT NULL ,
"AVG_TOTAL_HOURS" NUMBER NOT NULL ,
"AVG_TOTAL_HOURS_P1" NUMBER NULL ,
"AVG_TOTAL_HOURS_P2" NUMBER NULL ,
"AVG_WORK_HOURS" NUMBER NULL ,
"AVG_WORK_HOURS_P1" NUMBER NULL ,
"AVG_WORK_HOURS_P2" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STAT_TMP
-- ----------------------------
DROP TABLE "WOPDB"."WF_STAT_TMP";
CREATE TABLE "WOPDB"."WF_STAT_TMP" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"RECEIVE_DTS" DATE NULL ,
"PRINT_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"TOTAL_HOURS" NUMBER NULL ,
"TOTAL_HOURS_P1" NUMBER NULL ,
"TOTAL_HOURS_P2" NUMBER NULL ,
"WORK_HOURS" NUMBER NULL ,
"WORK_HOURS_P1" NUMBER NULL ,
"WORK_HOURS_P2" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_STATUS
-- ----------------------------
DROP TABLE "WOPDB"."WF_STATUS";
CREATE TABLE "WOPDB"."WF_STATUS" (
"STATUS_ID" NUMBER(2) NOT NULL ,
"STATUS_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"STATUS_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"STATUS_TYPE" NUMBER(2) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"ANNOTATION" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_TASK
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK";
CREATE TABLE "WOPDB"."WF_TASK" (
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NOT NULL ,
"TASK_DESC" VARCHAR2(200 BYTE) NULL ,
"TASK_STATUS" VARCHAR2(200 BYTE) NULL ,
"EXPECT_DURATION" NUMBER DEFAULT 86400  NOT NULL ,
"AMEND_TYPE" NUMBER(2) NOT NULL ,
"CANCEL_TYPE" NUMBER(2) NOT NULL ,
"PRIORITY" NUMBER(2) NOT NULL ,
"RULE_REF" VARCHAR2(200 BYTE) DEFAULT 0000  NOT NULL ,
"IMPL_REF" VARCHAR2(200 BYTE) DEFAULT 0000  NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_TASK"."TASK_TYPE" IS 'C 创建 A 自动 M 人工 K 控制';
COMMENT ON COLUMN "WOPDB"."WF_TASK"."EXPECT_DURATION" IS '1DAY';
COMMENT ON COLUMN "WOPDB"."WF_TASK"."AMEND_TYPE" IS '0 ignore 1redo ';
COMMENT ON COLUMN "WOPDB"."WF_TASK"."CANCEL_TYPE" IS '0 ignore 2undo';
COMMENT ON COLUMN "WOPDB"."WF_TASK"."RULE_REF" IS 'rule refer';
COMMENT ON COLUMN "WOPDB"."WF_TASK"."IMPL_REF" IS 'implement refer';

-- ----------------------------
-- Table structure for WF_TASK_ASSIGN
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_ASSIGN";
CREATE TABLE "WOPDB"."WF_TASK_ASSIGN" (
"ASSIGN_SN" NUMBER(10) NOT NULL ,
"FO_ID" NUMBER(15) NOT NULL ,
"FO_SN" NUMBER(10) NOT NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"FLOW_ID" NUMBER(10) NULL ,
"ASSIGN_TYPE" NUMBER(2) NOT NULL ,
"ASSIGN_DESC" VARCHAR2(200 BYTE) NULL ,
"ASSIGN_DTS" TIMESTAMP(6)  NOT NULL ,
"ASSIGNER" VARCHAR2(200 BYTE) NOT NULL ,
"ASSIGNER_DEPT" VARCHAR2(200 BYTE) NULL ,
"DOER" VARCHAR2(200 BYTE) NOT NULL ,
"DOER_DEPT" VARCHAR2(200 BYTE) NULL ,
"ASSIGN_COMMENT" VARCHAR2(2000 BYTE) NULL ,
"EXCEP_TYPE" NUMBER(2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_TASK_IMPL
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_IMPL";
CREATE TABLE "WOPDB"."WF_TASK_IMPL" (
"TASK_ID" NUMBER(10) NOT NULL ,
"IMPL_ID" NUMBER(10) NOT NULL ,
"ENABLED" NUMBER(2) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_TASK_IMPL"."ENABLED" IS '0 不启用 1 启用';

-- ----------------------------
-- Table structure for WF_TASK_ROLE
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_ROLE";
CREATE TABLE "WOPDB"."WF_TASK_ROLE" (
"TASK_ID" NUMBER(10) NOT NULL ,
"ROLE" VARCHAR2(50 BYTE) NOT NULL ,
"FLOW_ID" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_TASK_RULE
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_RULE";
CREATE TABLE "WOPDB"."WF_TASK_RULE" (
"TASK_ID" NUMBER(10) NOT NULL ,
"RULE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"ENABLED" NUMBER(2) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_TASK_RULE"."ENABLED" IS '0 不启用 1 启用';

-- ----------------------------
-- Table structure for WF_TASK_SCHED
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_SCHED";
CREATE TABLE "WOPDB"."WF_TASK_SCHED" (
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NULL ,
"SCHED_DESC" VARCHAR2(200 BYTE) NOT NULL ,
"SCHED_TYPE" NUMBER(2) NOT NULL ,
"MAX_DURATION" NUMBER NOT NULL ,
"ACT_INTERVAL" NUMBER NOT NULL ,
"ACT_IMPL" VARCHAR2(200 BYTE) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_TASK_STATUS
-- ----------------------------
DROP TABLE "WOPDB"."WF_TASK_STATUS";
CREATE TABLE "WOPDB"."WF_TASK_STATUS" (
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_TYPE" CHAR(1 BYTE) NOT NULL ,
"STATUS_ID" NUMBER(2) NOT NULL ,
"SERV_CATEGORY" VARCHAR2(20 BYTE) NOT NULL ,
"STATUS_DESC" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_USER_AUTH
-- ----------------------------
DROP TABLE "WOPDB"."WF_USER_AUTH";
CREATE TABLE "WOPDB"."WF_USER_AUTH" (
"USER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"AUTH_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_USER_ORG
-- ----------------------------
DROP TABLE "WOPDB"."WF_USER_ORG";
CREATE TABLE "WOPDB"."WF_USER_ORG" (
"USER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"ORG_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_USR_ABILITY
-- ----------------------------
DROP TABLE "WOPDB"."WF_USR_ABILITY";
CREATE TABLE "WOPDB"."WF_USR_ABILITY" (
"USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"ABI_ID" NUMBER(5) NOT NULL ,
"ADD_DTS" DATE NULL ,
"ABI_RMK" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WF_USR_ACCOUNT
-- ----------------------------
DROP TABLE "WOPDB"."WF_USR_ACCOUNT";
CREATE TABLE "WOPDB"."WF_USR_ACCOUNT" (
"USER_ID" VARCHAR2(200 BYTE) NOT NULL ,
"ACCOUNT" VARCHAR2(200 BYTE) NULL ,
"MAIL" VARCHAR2(200 BYTE) NULL ,
"PHONE" VARCHAR2(200 BYTE) NULL ,
"DEPT" VARCHAR2(200 BYTE) NULL ,
"TYPE" NUMBER(2) NOT NULL ,
"PHOTO" LONG RAW NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_USR_ACCOUNT"."DEPT" IS '1 ict-mail 2 ict-sr-dept-resp 4 lot-resp';

-- ----------------------------
-- Table structure for WF_USR_EVA
-- ----------------------------
DROP TABLE "WOPDB"."WF_USR_EVA";
CREATE TABLE "WOPDB"."WF_USR_EVA" (
"ESN" NUMBER(10) NOT NULL ,
"USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"ROLE_ID" VARCHAR2(200 BYTE) NOT NULL ,
"GEN_DTA" DATE NOT NULL ,
"EVA_DTS" DATE NULL ,
"EVA_USR_ID" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_REMARK" VARCHAR2(2000 BYTE) NULL ,
"EVA_MAIN" VARCHAR2(200 BYTE) NOT NULL ,
"EVA_ITEM1" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM2" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM3" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM4" VARCHAR2(200 BYTE) NULL ,
"EVA_ITEM5" VARCHAR2(200 BYTE) NULL ,
"MAIN_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM1_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM2_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM3_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM4_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"ITEM5_LEV" NUMBER(1) DEFAULT 0  NOT NULL ,
"STATE" NUMBER(1) DEFAULT 0  NOT NULL ,
"EVA_DUR" VARCHAR2(200 BYTE) NULL ,
"EVA_REF" NUMBER NULL ,
"EVA_SUM" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."USR_ID" IS '被评价人';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."ROLE_ID" IS '评价人角色';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_DTS" IS '评价时间';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_USR_ID" IS '评价人';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_REMARK" IS '评价说明';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_MAIN" IS '综合评价';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_ITEM1" IS '评价分项1';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."MAIN_LEV" IS '0-未评价';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."ITEM1_LEV" IS '0-未评价';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."STATE" IS '0-未评价 1-已评价';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_DUR" IS '考评时段';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_REF" IS '考评参考分';
COMMENT ON COLUMN "WOPDB"."WF_USR_EVA"."EVA_SUM" IS '考评数';

-- ----------------------------
-- Table structure for WFS_PRODUCT_DEPT
-- ----------------------------
DROP TABLE "WOPDB"."WFS_PRODUCT_DEPT";
CREATE TABLE "WOPDB"."WFS_PRODUCT_DEPT" (
"PRODUCTNAME" VARCHAR2(100 BYTE) NULL ,
"DEPTNAME" VARCHAR2(100 BYTE) NULL ,
"QUANTITY" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_PRODUCT_VIEW
-- ----------------------------
DROP TABLE "WOPDB"."WFS_PRODUCT_VIEW";
CREATE TABLE "WOPDB"."WFS_PRODUCT_VIEW" (
"PRODUCTNAME" VARCHAR2(200 BYTE) NULL ,
"MONEYSUM" NUMBER NULL ,
"QUANTITY" NUMBER NULL ,
"TARGET" VARCHAR2(10 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WFS_PRODUCT_VIEW"."PRODUCTNAME" IS '产品名称';
COMMENT ON COLUMN "WOPDB"."WFS_PRODUCT_VIEW"."MONEYSUM" IS '单价';
COMMENT ON COLUMN "WOPDB"."WFS_PRODUCT_VIEW"."QUANTITY" IS '数量';

-- ----------------------------
-- Table structure for WL_LLR_OSM0101
-- ----------------------------
DROP TABLE "WOPDB"."WL_LLR_OSM0101";
CREATE TABLE "WOPDB"."WL_LLR_OSM0101" (
"XIDSTR" VARCHAR2(40 BYTE) NOT NULL ,
"POOLNAMESTR" VARCHAR2(64 BYTE) NULL ,
"RECORDSTR" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ATM_INTF
-- ----------------------------
DROP TABLE "WOPDB"."WP_ATM_INTF";
CREATE TABLE "WOPDB"."WP_ATM_INTF" (
"PROC_SN" VARCHAR2(30 BYTE) NOT NULL ,
"PROC_DTS" DATE NOT NULL ,
"PROC_FLAG" CHAR(1 BYTE) NOT NULL ,
"PROC_TYPE" CHAR(3 BYTE) NOT NULL ,
"ORDER_NO" VARCHAR2(50 BYTE) NOT NULL ,
"ORDER_TYPE" VARCHAR2(10 BYTE) NULL ,
"INV_SN" VARCHAR2(50 BYTE) NULL ,
"NB_NO" VARCHAR2(50 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"CUSTOMER" VARCHAR2(500 BYTE) NULL ,
"CREATE_DTS" DATE NULL ,
"UPDATE_DTS" DATE NULL ,
"RETURN_DTS" DATE NULL ,
"REL_ORDER_NO" VARCHAR2(50 BYTE) NULL ,
"REL_INV_SN" VARCHAR2(50 BYTE) NULL ,
"REL_NB_NO" VARCHAR2(50 BYTE) NULL ,
"REMARK0" VARCHAR2(500 BYTE) NULL ,
"REMARK1" VARCHAR2(500 BYTE) NULL ,
"REMARK2" VARCHAR2(500 BYTE) NULL ,
"REMARK3" VARCHAR2(500 BYTE) NULL ,
"REMARK4" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_AUTH_CLIENT
-- ----------------------------
DROP TABLE "WOPDB"."WP_AUTH_CLIENT";
CREATE TABLE "WOPDB"."WP_AUTH_CLIENT" (
"USER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CLIENT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CLIENT_SECRET" VARCHAR2(50 BYTE) NOT NULL ,
"CREATE_DTS" DATE NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_CFT_CRM
-- ----------------------------
DROP TABLE "WOPDB"."WP_CFT_CRM";
CREATE TABLE "WOPDB"."WP_CFT_CRM" (
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_VER" NUMBER NOT NULL ,
"CRM_LINE_ITEM_NO" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"PRODUCT_ID" VARCHAR2(20 BYTE) NOT NULL ,
"ITEM_PRICE" NUMBER(16,2) NULL ,
"DERATE_PRICE" NUMBER(16,2) NULL ,
"PAID_PRICE" NUMBER(16,2) NULL ,
"CHARGE_DATE" VARCHAR2(20 BYTE) NULL ,
"PROCESS_DATE" DATE NULL ,
"WOP_PROCESS_FLAG" CHAR(1 BYTE) NULL ,
"WOP_PROCSS_DATE" DATE NULL ,
"REMARK" VARCHAR2(200 BYTE) NULL ,
"ITEM_FEE" NUMBER(16,2) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_CFT_P6
-- ----------------------------
DROP TABLE "WOPDB"."WP_CFT_P6";
CREATE TABLE "WOPDB"."WP_CFT_P6" (
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_VER" NUMBER NOT NULL ,
"CRM_LINE_ITEM_NO" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"DEVICE_NO" VARCHAR2(100 BYTE) NULL ,
"SERVICE_ACCOUNT" VARCHAR2(100 BYTE) NULL ,
"INSTALL_ADDRESS" VARCHAR2(500 BYTE) NULL ,
"COMPLETE_DATE" VARCHAR2(100 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"MONTHLY_FEE" NUMBER NULL ,
"REMARK" VARCHAR2(200 BYTE) NULL ,
"PROCESS_FLAG" CHAR(1 BYTE) NULL ,
"PROCESS_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_DATA_ELEMENT
-- ----------------------------
DROP TABLE "WOPDB"."WP_DATA_ELEMENT";
CREATE TABLE "WOPDB"."WP_DATA_ELEMENT" (
"ID" VARCHAR2(50 BYTE) NOT NULL ,
"PRP_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"PRP_DESC" VARCHAR2(1000 BYTE) NULL ,
"DATA_TYPE" CHAR(1 BYTE) NOT NULL ,
"DATA_CODE" VARCHAR2(100 BYTE) NOT NULL ,
"DATA_VALUE" VARCHAR2(1000 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLATF_TYPE" VARCHAR2(10 BYTE) NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."ID" IS 'name + serv_type';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."PRP_NAME" IS 'P6 request param name';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."DATA_TYPE" IS 'l lookup,n numeric, t text';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."DATA_CODE" IS 'param value';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."DATA_VALUE" IS 'param view value';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."SERV_TYPE" IS 'service_type';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."PLATF_TYPE" IS 'platform_type';
COMMENT ON COLUMN "WOPDB"."WP_DATA_ELEMENT"."TASK_ID" IS 'task_id';

-- ----------------------------
-- Table structure for WP_HL_ORDER
-- ----------------------------
DROP TABLE "WOPDB"."WP_HL_ORDER";
CREATE TABLE "WOPDB"."WP_HL_ORDER" (
"SEQUENCE_NUM" VARCHAR2(200 BYTE) NOT NULL ,
"ACCOUNT_ID" VARCHAR2(50 BYTE) NULL ,
"OPERATE_TYPE" VARCHAR2(50 BYTE) NULL ,
"PRODUCT_ID" VARCHAR2(50 BYTE) NULL ,
"DEVICE_ID" VARCHAR2(50 BYTE) NULL ,
"USER_TYPE" VARCHAR2(50 BYTE) NULL ,
"SPEED_UP" VARCHAR2(50 BYTE) NULL ,
"SPEED_DOWN" VARCHAR2(50 BYTE) NULL ,
"RATE" VARCHAR2(50 BYTE) NULL ,
"ZONE" VARCHAR2(50 BYTE) NULL ,
"SCHOOL" VARCHAR2(50 BYTE) NULL ,
"ITMS" VARCHAR2(50 BYTE) NULL ,
"PIN" VARCHAR2(50 BYTE) NULL ,
"ITMS_ORDER" VARCHAR2(50 BYTE) NULL ,
"NOTE" VARCHAR2(500 BYTE) NULL ,
"CREATEDTS" DATE NOT NULL ,
"RESULT_CODE" VARCHAR2(50 BYTE) NULL ,
"RESULT_MSG" VARCHAR2(50 BYTE) NULL ,
"USER_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_IODEBUG_LOG
-- ----------------------------
DROP TABLE "WOPDB"."WP_IODEBUG_LOG";
CREATE TABLE "WOPDB"."WP_IODEBUG_LOG" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"GEN_DTS" DATE NULL ,
"P6REQ_DATA" CLOB NULL ,
"P6REP_DATA" CLOB NULL ,
"EXTREQ_DATA" CLOB NULL ,
"EXTREP_DATA" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_OAUTH_CODE
-- ----------------------------
DROP TABLE "WOPDB"."WP_OAUTH_CODE";
CREATE TABLE "WOPDB"."WP_OAUTH_CODE" (
"CLIENT_ID" VARCHAR2(50 BYTE) NULL ,
"USER_ID" VARCHAR2(50 BYTE) NULL ,
"CODE" VARCHAR2(50 BYTE) NOT NULL ,
"CREATE_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORDER
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORDER";
CREATE TABLE "WOPDB"."WP_ORDER" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"INV_SERIAL_NO" VARCHAR2(50 BYTE) NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_VER" NUMBER NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" NUMBER NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" NUMBER NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE" NUMBER NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"ORDER_CONTEXT" VARCHAR2(4000 BYTE) NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"STATUS" NUMBER NOT NULL ,
"SCHEDULE_DTS" DATE NULL ,
"REQUEST_DTS" DATE NULL ,
"RESPONSE_DTS" DATE NULL ,
"PROC_FLAG" CHAR(3 BYTE) NULL ,
"PROC_COMMENT" VARCHAR2(500 BYTE) NULL ,
"BUREAU_ID" VARCHAR2(500 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(500 BYTE) NULL ,
"SITE_ID" VARCHAR2(500 BYTE) NULL ,
"USER_ID" VARCHAR2(500 BYTE) NULL ,
"PARAM_KEY0" VARCHAR2(500 BYTE) NULL ,
"PARAM_KEY1" VARCHAR2(500 BYTE) NULL ,
"PARAM_KEY2" VARCHAR2(500 BYTE) NULL ,
"PARAM_KEY3" VARCHAR2(500 BYTE) NULL ,
"PARAM_KEY4" VARCHAR2(500 BYTE) NULL ,
"PAYLOAD" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORDER_LOG
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORDER_LOG";
CREATE TABLE "WOPDB"."WP_ORDER_LOG" (
"OPER_ID" VARCHAR2(25 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(100 BYTE) NOT NULL ,
"WOP_ORDER_VER" NUMBER NULL ,
"CURR_SERIAL_NO" VARCHAR2(100 BYTE) NOT NULL ,
"PREV_SERIAL_NO" VARCHAR2(100 BYTE) NULL ,
"CURR_STATE" NUMBER NOT NULL ,
"PREV_STATE" NUMBER NULL ,
"OPER_TYPE" VARCHAR2(200 BYTE) NOT NULL ,
"OPERATOR" VARCHAR2(500 BYTE) NULL ,
"OPERATION" VARCHAR2(1000 BYTE) NULL ,
"OPER_DTS" DATE NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" NUMBER NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORDER_PARAM
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORDER_PARAM";
CREATE TABLE "WOPDB"."WP_ORDER_PARAM" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"PARAM_TYPE" NUMBER NOT NULL ,
"PARAM_SUBTYPE" NUMBER NULL ,
"PRODUCT_ID" VARCHAR2(100 BYTE) NULL ,
"PRODUCT_SUBPATH" VARCHAR2(100 BYTE) NULL ,
"PARAM_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"PARAM_VALUE" VARCHAR2(500 BYTE) NULL ,
"NEW_OLD" NUMBER NOT NULL ,
"PARAM_VALUE_ORIG" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_BUREAU
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_BUREAU";
CREATE TABLE "WOPDB"."WP_ORG_BUREAU" (
"BUREAU_ID" VARCHAR2(100 BYTE) NOT NULL ,
"BUREAU_NAME" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_SITE
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_SITE";
CREATE TABLE "WOPDB"."WP_ORG_SITE" (
"SITE_ID" VARCHAR2(100 BYTE) NOT NULL ,
"SITE_NAME" VARCHAR2(200 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(100 BYTE) NOT NULL ,
"REL_ID" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_SUBBUREAU
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_SUBBUREAU";
CREATE TABLE "WOPDB"."WP_ORG_SUBBUREAU" (
"SUB_BUREAU_ID" VARCHAR2(100 BYTE) NOT NULL ,
"SUB_BUREAU_NAME" VARCHAR2(200 BYTE) NULL ,
"BUREAU_ID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_USR_BUREAU
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_USR_BUREAU";
CREATE TABLE "WOPDB"."WP_ORG_USR_BUREAU" (
"ADMIN_ID" VARCHAR2(100 BYTE) NULL ,
"BUREAU_ID" VARCHAR2(100 BYTE) NULL ,
"REL_TYPE" CHAR(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_WCOMPANY
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_WCOMPANY";
CREATE TABLE "WOPDB"."WP_ORG_WCOMPANY" (
"WCOMPANY_ID" VARCHAR2(100 BYTE) NOT NULL ,
"WCOMPANY_NAME" VARCHAR2(200 BYTE) NULL ,
"WTEAM_ID" VARCHAR2(100 BYTE) NULL ,
"WCOMPANY_REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_WTEAM
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_WTEAM";
CREATE TABLE "WOPDB"."WP_ORG_WTEAM" (
"WTEAM_ID" VARCHAR2(100 BYTE) NOT NULL ,
"WTEAM_NAME" VARCHAR2(200 BYTE) NULL ,
"WTEAM_REMARK" VARCHAR2(500 BYTE) NULL ,
"WCOMPANY" VARCHAR2(200 BYTE) NULL ,
"ID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ORG_WTEAM_ABILITY
-- ----------------------------
DROP TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY";
CREATE TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY" (
"WTEAM_ID" VARCHAR2(100 BYTE) NOT NULL ,
"ABILITY_TYPE" VARCHAR2(100 BYTE) NOT NULL ,
"ABILITY_1" NUMBER NOT NULL ,
"ABILITY_2" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_P6_DELAYTASK
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_DELAYTASK";
CREATE TABLE "WOPDB"."WP_P6_DELAYTASK" (
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_VER" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"P6_TASK_MNEMONIC" VARCHAR2(200 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_P6_ORDHIST
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_ORDHIST";
CREATE TABLE "WOPDB"."WP_P6_ORDHIST" (
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"SETHIST_DTS" DATE NOT NULL ,
"SETHIST_FLAG" CHAR(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_P6_REQ
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_REQ";
CREATE TABLE "WOPDB"."WP_P6_REQ" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_PRINT_NO" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER(2) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"WGROUP_ID" VARCHAR2(500 BYTE) NULL ,
"PROCESS_STATUS" NUMBER(3) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"APPOINT_INS_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"WOP_RETURN" VARCHAR2(200 BYTE) NULL ,
"WOP_REASON" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_DTS" DATE NULL ,
"BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"P6_REQ_CONTENT" CLOB NULL ,
"P6_RET_CONTENT" CLOB NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_P6_REQ"."CRM_ORDER_VER" IS '新crm类型 0 原 1新 对应组合 crm ver 0-1 1-2 + 原ver 行程组合数字，如 21 代表新crm 版本 1';

-- ----------------------------
-- Table structure for WP_P6_REQ_TMP
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_REQ_TMP";
CREATE TABLE "WOPDB"."WP_P6_REQ_TMP" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_PRINT_NO" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER(2) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"WGROUP_ID" VARCHAR2(500 BYTE) NULL ,
"PROCESS_STATUS" NUMBER(3) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"APPOINT_INS_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"WOP_RETURN" VARCHAR2(200 BYTE) NULL ,
"WOP_REASON" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_DTS" DATE NULL ,
"BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"P6_REQ_CONTENT" CLOB NULL ,
"P6_RET_CONTENT" CLOB NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_P6_RET
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_RET";
CREATE TABLE "WOPDB"."WP_P6_RET" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_PRINT_NO" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NOT NULL ,
"WOP_RETURN" VARCHAR2(200 BYTE) NULL ,
"WOP_REASON" VARCHAR2(2000 BYTE) NOT NULL ,
"COMPLETE_DTS" DATE NULL ,
"RETURN_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_P6_RETTASK
-- ----------------------------
DROP TABLE "WOPDB"."WP_P6_RETTASK";
CREATE TABLE "WOPDB"."WP_P6_RETTASK" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"P6_TASK_MNEMONIC" VARCHAR2(200 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_PAL_ORD
-- ----------------------------
DROP TABLE "WOPDB"."WP_PAL_ORD";
CREATE TABLE "WOPDB"."WP_PAL_ORD" (
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"PAL_ORDER_ID" VARCHAR2(100 BYTE) NOT NULL ,
"TARGET" VARCHAR2(20 BYTE) NOT NULL ,
"EXE_MODE" VARCHAR2(10 BYTE) NOT NULL ,
"RECEIVE_TIME" DATE NULL ,
"COMPLETE_TIME" DATE NULL ,
"PROCESS_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PROCESS_STATE" VARCHAR2(20 BYTE) NULL ,
"PROCESS_COMMENT" VARCHAR2(2000 BYTE) NULL ,
"REQUEST_CONTENT" CLOB NULL ,
"REMARK_CONTENT" CLOB NULL ,
"BUREAU_CODE" VARCHAR2(10 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(10 BYTE) NULL ,
"PLATFORM" VARCHAR2(10 BYTE) NULL ,
"PROCESS_FLAG" CHAR(1 BYTE) NULL ,
"PROCESS_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."P6_ORDER_ID" IS 'P6定单号';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."CRM_ORDER_ID" IS 'CRM订单号';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."CRM_ORDER_VER" IS 'CRM订单版本';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."PAL_ORDER_ID" IS '内部工单号';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."TARGET" IS '网元';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."EXE_MODE" IS '工单类型：1正常，2修订，3取消';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."RECEIVE_TIME" IS '开始时间';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."COMPLETE_TIME" IS '完成时间';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."PROCESS_TYPE" IS '处理类型(0服务查询线对有误 ，1激活退单失败)';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."PROCESS_STATE" IS '处理状态';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."PROCESS_COMMENT" IS '处理描述';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."REQUEST_CONTENT" IS '工单内容';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."REMARK_CONTENT" IS '备注内容';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."BUREAU_CODE" IS '区局';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."SUB_BUREAU_CODE" IS '分局';
COMMENT ON COLUMN "WOPDB"."WP_PAL_ORD"."PLATFORM" IS '平台(pai/asap/97)';

-- ----------------------------
-- Table structure for WP_PORTAL_OPTION
-- ----------------------------
DROP TABLE "WOPDB"."WP_PORTAL_OPTION";
CREATE TABLE "WOPDB"."WP_PORTAL_OPTION" (
"SELECT_ID" VARCHAR2(20 BYTE) NOT NULL ,
"OPTION_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"OPTION_VALUE" VARCHAR2(200 BYTE) NULL ,
"RELATED_ID" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_PRINT_REQ
-- ----------------------------
DROP TABLE "WOPDB"."WP_PRINT_REQ";
CREATE TABLE "WOPDB"."WP_PRINT_REQ" (
"PRINT_NO" VARCHAR2(50 BYTE) NOT NULL ,
"PRINT_DESTID" VARCHAR2(100 BYTE) NOT NULL ,
"PRINT_TYPE" CHAR(1 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PRINT_FLAG" CHAR(1 BYTE) NOT NULL ,
"PRINT_DTS" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_PRINT_REQ"."PRINT_NO" IS 'system gen';
COMMENT ON COLUMN "WOPDB"."WP_PRINT_REQ"."PRINT_DESTID" IS 'client ip+ userid';
COMMENT ON COLUMN "WOPDB"."WP_PRINT_REQ"."PRINT_TYPE" IS '0 workform,1 brief form';
COMMENT ON COLUMN "WOPDB"."WP_PRINT_REQ"."PRINT_FLAG" IS '0 not print,1 printed';
COMMENT ON COLUMN "WOPDB"."WP_PRINT_REQ"."PRINT_DTS" IS 'webservice invoke dts';

-- ----------------------------
-- Table structure for WP_PRINTMAP_CONFIG
-- ----------------------------
DROP TABLE "WOPDB"."WP_PRINTMAP_CONFIG";
CREATE TABLE "WOPDB"."WP_PRINTMAP_CONFIG" (
"ID" VARCHAR2(20 BYTE) NOT NULL ,
"POSITION" VARCHAR2(10 BYTE) NOT NULL ,
"PRP_NAME" VARCHAR2(500 BYTE) NOT NULL ,
"PRINT_SEQ" NUMBER NOT NULL ,
"PRINT_TYPE" CHAR(1 BYTE) NOT NULL ,
"PRINT_RULE" VARCHAR2(2000 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PLAT_TYPE" VARCHAR2(10 BYTE) NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NULL ,
"PRINT_NAME" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_PROMOT_MATERIAL
-- ----------------------------
DROP TABLE "WOPDB"."WP_PROMOT_MATERIAL";
CREATE TABLE "WOPDB"."WP_PROMOT_MATERIAL" (
"CATEGORY" CHAR(5 BYTE) NOT NULL ,
"ACTION_TYPE" CHAR(5 BYTE) NOT NULL ,
"PROMOT_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"PRINT_NOTE" VARCHAR2(1000 BYTE) NOT NULL ,
"SERV_TYPE" VARCHAR2(50 BYTE) NULL ,
"SHEET_NO" NUMBER NULL ,
"ACT_FLAG" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."CATEGORY" IS '类型（T：直线；B：宽带）';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."ACTION_TYPE" IS '操作类型';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."PROMOT_CODE" IS '营销代码';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."PRINT_NOTE" IS '备注打印内容';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."SERV_TYPE" IS '服务类型';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."SHEET_NO" IS '工单联号';
COMMENT ON COLUMN "WOPDB"."WP_PROMOT_MATERIAL"."ACT_FLAG" IS '是否有效';

-- ----------------------------
-- Table structure for WP_PROV_TEMPLATE
-- ----------------------------
DROP TABLE "WOPDB"."WP_PROV_TEMPLATE";
CREATE TABLE "WOPDB"."WP_PROV_TEMPLATE" (
"TEMPLATE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"TEMPLATE_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"SERVICE_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" VARCHAR2(1 BYTE) NULL ,
"SYS_ENTRANCE" VARCHAR2(500 BYTE) NULL ,
"OWNER" VARCHAR2(50 BYTE) NOT NULL ,
"RELATE_ID" VARCHAR2(50 BYTE) NULL ,
"RELATE_RULE" VARCHAR2(500 BYTE) NULL ,
"CREATE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"ORDER_CONTEXT" CLOB NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_REPORT
-- ----------------------------
DROP TABLE "WOPDB"."WP_REPORT";
CREATE TABLE "WOPDB"."WP_REPORT" (
"REP_SN" NUMBER NOT NULL ,
"NAME_SPACE" VARCHAR2(50 BYTE) NOT NULL ,
"SOURCE_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"PROV_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"PROV_ORDER_VER" NUMBER NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" NUMBER NULL ,
"REFERENCE_NO" VARCHAR2(500 BYTE) NULL ,
"REFERENCE_VAL" VARCHAR2(500 BYTE) NULL ,
"ORDER_TYPE" NUMBER NOT NULL ,
"ACTION_CODE" VARCHAR2(50 BYTE) NULL ,
"SUB_ACTION_CODE" VARCHAR2(50 BYTE) NULL ,
"PROV_TASK" VARCHAR2(500 BYTE) NULL ,
"CREATE_DTS" DATE NOT NULL ,
"PROCESS_DTS" DATE NULL ,
"UPDATE_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"STATUS" NUMBER NOT NULL ,
"PROCESS_STATUS" NUMBER NULL ,
"PROCESS_COMMENT" VARCHAR2(500 BYTE) NULL ,
"REMARK0" VARCHAR2(500 BYTE) NULL ,
"REMARK1" VARCHAR2(500 BYTE) NULL ,
"REMARK2" VARCHAR2(500 BYTE) NULL ,
"REMARK3" VARCHAR2(500 BYTE) NULL ,
"REMARK4" VARCHAR2(500 BYTE) NULL ,
"REMARK5" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REP_SN" IS '记录流水
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."NAME_SPACE" IS '命名空间
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."SOURCE_TYPE" IS '定单来源
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROV_ORDER_ID" IS '定单序号
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROV_ORDER_VER" IS '定单版本
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."CRM_ORDER_ID" IS '订单序号
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."CRM_ORDER_VER" IS '订单版本
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REFERENCE_NO" IS '参考编号
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REFERENCE_VAL" IS '参考值
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."ORDER_TYPE" IS '工单类型
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."ACTION_CODE" IS '操作代码
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."SUB_ACTION_CODE" IS '子操作代码
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROV_TASK" IS '流程任务
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."CREATE_DTS" IS '创建时间
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROCESS_DTS" IS '处理时间
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."UPDATE_DTS" IS '更新时间
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."COMPLETE_DTS" IS '完成时间
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."STATUS" IS '状态
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROCESS_STATUS" IS '处理状态
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."PROCESS_COMMENT" IS '处理说明
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK0" IS '扩展标识
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK1" IS '扩展标识
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK2" IS '扩展标识
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK3" IS '扩展标识
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK4" IS '扩展标识
';
COMMENT ON COLUMN "WOPDB"."WP_REPORT"."REMARK5" IS '扩展标识
';

-- ----------------------------
-- Table structure for WP_RETURN_ATTACH
-- ----------------------------
DROP TABLE "WOPDB"."WP_RETURN_ATTACH";
CREATE TABLE "WOPDB"."WP_RETURN_ATTACH" (
"ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WORK_PAPER_ID" VARCHAR2(50 BYTE) NULL ,
"ATTACH_ID" VARCHAR2(50 BYTE) NULL ,
"ATTACH_NAME" VARCHAR2(500 BYTE) NOT NULL ,
"ATTACH_PATH" VARCHAR2(500 BYTE) NULL ,
"OPERATOR" VARCHAR2(50 BYTE) NULL ,
"UPLOAD_DTS" DATE NULL ,
"IS_SIGNED" CHAR(1 BYTE) NULL ,
"NOSIGN_REASON" VARCHAR2(500 BYTE) NULL ,
"NOTE" VARCHAR2(2000 BYTE) NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_RETURN_PARAM
-- ----------------------------
DROP TABLE "WOPDB"."WP_RETURN_PARAM";
CREATE TABLE "WOPDB"."WP_RETURN_PARAM" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PARAM_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"PARAM_VALUE" VARCHAR2(4000 BYTE) NULL ,
"PARAM_XPATH" VARCHAR2(400 BYTE) NOT NULL ,
"NEW_OLD" CHAR(1 BYTE) NOT NULL ,
"ACTION" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_RIGHT
-- ----------------------------
DROP TABLE "WOPDB"."WP_RIGHT";
CREATE TABLE "WOPDB"."WP_RIGHT" (
"RIGHT_ID" VARCHAR2(50 BYTE) NOT NULL ,
"RIGHT_FUNCTION" VARCHAR2(200 BYTE) NOT NULL ,
"RIGHT_REMARK" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_ROLE
-- ----------------------------
DROP TABLE "WOPDB"."WP_ROLE";
CREATE TABLE "WOPDB"."WP_ROLE" (
"ROLE_ID" VARCHAR2(100 BYTE) NOT NULL ,
"ROLE_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"ROLE_RIGHT" VARCHAR2(500 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SECURITY_GROUP
-- ----------------------------
DROP TABLE "WOPDB"."WP_SECURITY_GROUP";
CREATE TABLE "WOPDB"."WP_SECURITY_GROUP" (
"GROUP_ID" VARCHAR2(100 BYTE) NOT NULL ,
"GROUP_DESC" VARCHAR2(500 BYTE) NULL ,
"BUREAU_SET" VARCHAR2(4000 BYTE) NULL ,
"SUBBUREAU_SET" VARCHAR2(4000 BYTE) NULL ,
"PLATFORM_SET" VARCHAR2(4000 BYTE) NULL ,
"FLEX_RULE_SET" VARCHAR2(4000 BYTE) NULL ,
"TASK_SET" VARCHAR2(4000 BYTE) NULL ,
"FUNCTION_SET" VARCHAR2(4000 BYTE) NULL ,
"GROUP_TYPE" CHAR(1 BYTE) NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SESSIONS
-- ----------------------------
DROP TABLE "WOPDB"."WP_SESSIONS";
CREATE TABLE "WOPDB"."WP_SESSIONS" (
"ID" VARCHAR2(200 BYTE) NOT NULL ,
"SSESSION" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SRQ
-- ----------------------------
DROP TABLE "WOPDB"."WP_SRQ";
CREATE TABLE "WOPDB"."WP_SRQ" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_VER" NUMBER NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_VER" NUMBER NOT NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" NUMBER NULL ,
"WORK_ID" VARCHAR2(50 BYTE) NULL ,
"WORK_SERIAL_NO" VARCHAR2(500 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"STATUS" NUMBER NOT NULL ,
"PROCESS_FLAG" VARCHAR2(3 BYTE) NULL ,
"SCHEDULE_DTS" DATE NULL ,
"REMARK0" VARCHAR2(500 BYTE) NULL ,
"REMARK1" VARCHAR2(500 BYTE) NULL ,
"REMARK2" VARCHAR2(2000 BYTE) NULL ,
"REMARK3" VARCHAR2(500 BYTE) NULL ,
"REMARK4" VARCHAR2(500 BYTE) NULL ,
"REMARK5" VARCHAR2(500 BYTE) NULL ,
"REMARK6" VARCHAR2(500 BYTE) NULL ,
"REMARK7" VARCHAR2(500 BYTE) NULL ,
"REMARK8" VARCHAR2(500 BYTE) NULL ,
"REMARK9" VARCHAR2(500 BYTE) NULL ,
"REMARK10" VARCHAR2(500 BYTE) NULL ,
"REMARK11" VARCHAR2(500 BYTE) NULL ,
"REMARK12" VARCHAR2(500 BYTE) NULL ,
"REMARK13" VARCHAR2(500 BYTE) NULL ,
"REMARK14" VARCHAR2(500 BYTE) NULL ,
"REMARK15" VARCHAR2(500 BYTE) NULL ,
"REMARK16" VARCHAR2(500 BYTE) NULL ,
"REMARK17" VARCHAR2(500 BYTE) NULL ,
"REMARK18" VARCHAR2(500 BYTE) NULL ,
"REMARK19" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SRQ_CTX
-- ----------------------------
DROP TABLE "WOPDB"."WP_SRQ_CTX";
CREATE TABLE "WOPDB"."WP_SRQ_CTX" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"CTX_N" CLOB NULL ,
"CTX_O" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SRQ_PARAM
-- ----------------------------
DROP TABLE "WOPDB"."WP_SRQ_PARAM";
CREATE TABLE "WOPDB"."WP_SRQ_PARAM" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"PARAM_XPATH" VARCHAR2(400 BYTE) NOT NULL ,
"PARAM_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"VALUE_NEW" VARCHAR2(4000 BYTE) NULL ,
"VALUE_OLD" VARCHAR2(4000 BYTE) NULL ,
"READ_WRITE" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SRQ_REMARK
-- ----------------------------
DROP TABLE "WOPDB"."WP_SRQ_REMARK";
CREATE TABLE "WOPDB"."WP_SRQ_REMARK" (
"WPID" VARCHAR2(50 BYTE) NOT NULL ,
"REMARK_KEY" VARCHAR2(200 BYTE) NOT NULL ,
"REMARK_VAL" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SYS_CONFIG
-- ----------------------------
DROP TABLE "WOPDB"."WP_SYS_CONFIG";
CREATE TABLE "WOPDB"."WP_SYS_CONFIG" (
"CFG_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"CFG_VALUE" VARCHAR2(1000 BYTE) NULL ,
"CFG_TYPE" VARCHAR2(100 BYTE) NULL ,
"REMARK0" VARCHAR2(100 BYTE) NULL ,
"REMARK1" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_SYS_CONFIG_BAK
-- ----------------------------
DROP TABLE "WOPDB"."WP_SYS_CONFIG_BAK";
CREATE TABLE "WOPDB"."WP_SYS_CONFIG_BAK" (
"CFG_NAME" VARCHAR2(100 BYTE) NOT NULL ,
"CFG_VALUE" VARCHAR2(1000 BYTE) NULL ,
"CFG_TYPE" VARCHAR2(100 BYTE) NULL ,
"REMARK0" VARCHAR2(100 BYTE) NULL ,
"REMARK1" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_TASK
-- ----------------------------
DROP TABLE "WOPDB"."WP_TASK";
CREATE TABLE "WOPDB"."WP_TASK" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"TASK_ID" VARCHAR2(100 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"INFO" VARCHAR2(100 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_TASK"."SERVICE_TYPE" IS '服务类型';
COMMENT ON COLUMN "WOPDB"."WP_TASK"."ACTION_TYPE" IS '操作类型';

-- ----------------------------
-- Table structure for WP_USER
-- ----------------------------
DROP TABLE "WOPDB"."WP_USER";
CREATE TABLE "WOPDB"."WP_USER" (
"ADMIN_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_NAME" VARCHAR2(100 BYTE) NULL ,
"ADMIN_NAME" VARCHAR2(50 BYTE) NULL ,
"ADMIN_PWD" VARCHAR2(50 BYTE) NULL ,
"DEPT_ID" VARCHAR2(50 BYTE) NULL ,
"DEPT_NAME" VARCHAR2(100 BYTE) NULL ,
"WORK_STATION" VARCHAR2(100 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"CONTACT_TEL" VARCHAR2(50 BYTE) NULL ,
"CONTACT_PHS" VARCHAR2(500 BYTE) NULL ,
"CONTACT_MOBILE" VARCHAR2(50 BYTE) NULL ,
"E_MAIL" VARCHAR2(100 BYTE) NULL ,
"CREATE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NULL ,
"FUNCTION_SET" VARCHAR2(100 BYTE) NULL ,
"TASK_SET" VARCHAR2(100 BYTE) NULL ,
"DISTRICT_SET" VARCHAR2(100 BYTE) NULL ,
"FLEX_RULE" VARCHAR2(100 BYTE) NULL ,
"REMARK0" VARCHAR2(100 BYTE) NULL ,
"REMARK1" VARCHAR2(100 BYTE) NULL ,
"REMARK2" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_USER_NOTIFY
-- ----------------------------
DROP TABLE "WOPDB"."WP_USER_NOTIFY";
CREATE TABLE "WOPDB"."WP_USER_NOTIFY" (
"USER_ID" VARCHAR2(100 BYTE) NOT NULL ,
"INTERVAL" NUMBER DEFAULT 0  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_USR_DISTRICT_SET
-- ----------------------------
DROP TABLE "WOPDB"."WP_USR_DISTRICT_SET";
CREATE TABLE "WOPDB"."WP_USR_DISTRICT_SET" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"INFO" VARCHAR2(100 BYTE) NULL ,
"DISTRICT_SET" VARCHAR2(2000 BYTE) NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_USR_DISTRICT_SET"."NAME" IS '0 bureau, 1 sub bureau, 2 platform';

-- ----------------------------
-- Table structure for WP_USR_FUNCTION
-- ----------------------------
DROP TABLE "WOPDB"."WP_USR_FUNCTION";
CREATE TABLE "WOPDB"."WP_USR_FUNCTION" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"INFO" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"RESTRICT" VARCHAR2(500 BYTE) NOT NULL ,
"TYPE" NUMBER NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_USR_FUNCTION"."INFO" IS '注释';
COMMENT ON COLUMN "WOPDB"."WP_USR_FUNCTION"."NAME" IS '名称';
COMMENT ON COLUMN "WOPDB"."WP_USR_FUNCTION"."RESTRICT" IS '约束';
COMMENT ON COLUMN "WOPDB"."WP_USR_FUNCTION"."TYPE" IS '0 ACTION,1 URL';

-- ----------------------------
-- Table structure for WP_USR_FUNCTION_SET
-- ----------------------------
DROP TABLE "WOPDB"."WP_USR_FUNCTION_SET";
CREATE TABLE "WOPDB"."WP_USR_FUNCTION_SET" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"INFO" VARCHAR2(100 BYTE) NULL ,
"FUNCTION_SET" VARCHAR2(2000 BYTE) NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_USR_RULE
-- ----------------------------
DROP TABLE "WOPDB"."WP_USR_RULE";
CREATE TABLE "WOPDB"."WP_USR_RULE" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"INFO" VARCHAR2(200 BYTE) NULL ,
"RULE_COND" VARCHAR2(2000 BYTE) NULL ,
"RULE_LANG" VARCHAR2(2000 BYTE) NOT NULL ,
"RULE_INPUT" VARCHAR2(1000 BYTE) NULL ,
"RULE_COLUM" VARCHAR2(1000 BYTE) NULL ,
"REMARK" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_USR_TASK_SET
-- ----------------------------
DROP TABLE "WOPDB"."WP_USR_TASK_SET";
CREATE TABLE "WOPDB"."WP_USR_TASK_SET" (
"ID" VARCHAR2(10 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"INFO" VARCHAR2(100 BYTE) NULL ,
"TASK_SET" VARCHAR2(2000 BYTE) NOT NULL ,
"REMARK" VARCHAR2(500 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(10 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_VALIDATE_CONFIG
-- ----------------------------
DROP TABLE "WOPDB"."WP_VALIDATE_CONFIG";
CREATE TABLE "WOPDB"."WP_VALIDATE_CONFIG" (
"PKID" VARCHAR2(5 BYTE) NOT NULL ,
"P_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"P_VALUE" VARCHAR2(4000 BYTE) NULL ,
"P_XPATH" VARCHAR2(2000 BYTE) NULL ,
"NEWOLD" CHAR(1 BYTE) NULL ,
"RULE" VARCHAR2(1000 BYTE) NOT NULL ,
"TASK_ID" VARCHAR2(1000 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(10 BYTE) NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER NULL ,
"REMARK0" VARCHAR2(100 BYTE) NULL ,
"REMARK1" VARCHAR2(100 BYTE) NULL ,
"REMARK2" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_VIEW_PARAM
-- ----------------------------
DROP TABLE "WOPDB"."WP_VIEW_PARAM";
CREATE TABLE "WOPDB"."WP_VIEW_PARAM" (
"VP_ID" VARCHAR2(100 BYTE) NOT NULL ,
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"VIEW_POSITION" VARCHAR2(10 BYTE) NOT NULL ,
"VIEW_NAME" VARCHAR2(500 BYTE) NOT NULL ,
"VIEW_VALUE_NEW" VARCHAR2(4000 BYTE) NULL ,
"VIEW_VALUE_OLD" VARCHAR2(4000 BYTE) NULL ,
"VIEW_TYPE" VARCHAR2(10 BYTE) NULL ,
"VIEW_ATTRIBUT" VARCHAR2(10 BYTE) NULL ,
"REMARK0" VARCHAR2(500 BYTE) NULL ,
"REMARK1" VARCHAR2(500 BYTE) NULL ,
"REMARK2" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_VIEWMAP_CONFIG
-- ----------------------------
DROP TABLE "WOPDB"."WP_VIEWMAP_CONFIG";
CREATE TABLE "WOPDB"."WP_VIEWMAP_CONFIG" (
"ID" VARCHAR2(20 BYTE) NOT NULL ,
"PRP_NAME" VARCHAR2(500 BYTE) NOT NULL ,
"VIEW_NAME" VARCHAR2(200 BYTE) NOT NULL ,
"VIEW_TYPE" VARCHAR2(20 BYTE) NULL ,
"VIEW_POSITION" VARCHAR2(10 BYTE) NOT NULL ,
"TRANS_RULE" VARCHAR2(2000 BYTE) NULL ,
"SERV_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"TASK_ID" VARCHAR2(200 BYTE) NULL ,
"REMARK0" VARCHAR2(200 BYTE) NULL ,
"REMARK1" VARCHAR2(200 BYTE) NULL ,
"REMARK2" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "WOPDB"."WP_VIEWMAP_CONFIG"."PRP_NAME" IS '请求参数id';
COMMENT ON COLUMN "WOPDB"."WP_VIEWMAP_CONFIG"."VIEW_NAME" IS '显示名称';
COMMENT ON COLUMN "WOPDB"."WP_VIEWMAP_CONFIG"."VIEW_TYPE" IS '显示类型';
COMMENT ON COLUMN "WOPDB"."WP_VIEWMAP_CONFIG"."VIEW_POSITION" IS '显示位置';
COMMENT ON COLUMN "WOPDB"."WP_VIEWMAP_CONFIG"."TRANS_RULE" IS '转换规则';

-- ----------------------------
-- Table structure for WP_WORK_ASSET
-- ----------------------------
DROP TABLE "WOPDB"."WP_WORK_ASSET";
CREATE TABLE "WOPDB"."WP_WORK_ASSET" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"ASSET_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"ASSET_TYPE" VARCHAR2(50 BYTE) NULL ,
"ASSET_DESC" VARCHAR2(200 BYTE) NULL ,
"ASSET_RESC" VARCHAR2(100 BYTE) NULL ,
"QUANTITY" NUMBER(3) NULL ,
"REMARK" VARCHAR2(200 BYTE) NULL ,
"WORK_DEPT_ID" VARCHAR2(50 BYTE) NULL ,
"WORK_DEPT" VARCHAR2(100 BYTE) NULL ,
"AUX_EQUIP_CODE" VARCHAR2(50 BYTE) NULL ,
"AUX_EQUIP_DESC" VARCHAR2(200 BYTE) NULL ,
"ASSET_SN" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_WORK_PLANE
-- ----------------------------
DROP TABLE "WOPDB"."WP_WORK_PLANE";
CREATE TABLE "WOPDB"."WP_WORK_PLANE" (
"PLANE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_NAME" VARCHAR2(100 BYTE) NULL ,
"PLANE_INFO" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WP_WORK_RETURN
-- ----------------------------
DROP TABLE "WOPDB"."WP_WORK_RETURN";
CREATE TABLE "WOPDB"."WP_WORK_RETURN" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"ORDER_TYPE" NUMBER NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"WORK_TEAM_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WORK_MEMBER" VARCHAR2(50 BYTE) NULL ,
"LAB_TEST_NO" VARCHAR2(50 BYTE) NULL ,
"APP_INS_DTS" DATE NULL ,
"ARRIVAL_DTS" DATE NULL ,
"FINISH_DTS" DATE NULL ,
"MATERIAL" VARCHAR2(10 BYTE) NULL ,
"ROLLBACK_NOTE" VARCHAR2(200 BYTE) NULL ,
"DELAY_NOTE" VARCHAR2(200 BYTE) NULL ,
"WORK_STATUS" NUMBER NULL ,
"ROLLBACK_TYPE" VARCHAR2(10 BYTE) NULL ,
"REMARK" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WPHIS_ORDER_LOG
-- ----------------------------
DROP TABLE "WOPDB"."WPHIS_ORDER_LOG";
CREATE TABLE "WOPDB"."WPHIS_ORDER_LOG" (
"OPER_ID" VARCHAR2(25 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_VER" NUMBER NULL ,
"CURR_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"PREV_SERIAL_NO" VARCHAR2(50 BYTE) NULL ,
"CURR_STATE" NUMBER NOT NULL ,
"PREV_STATE" NUMBER NULL ,
"OPER_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"OPERATOR" VARCHAR2(50 BYTE) NULL ,
"OPERATION" VARCHAR2(100 BYTE) NULL ,
"OPER_DTS" DATE NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" NUMBER NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WPHIS_P6_REQ
-- ----------------------------
DROP TABLE "WOPDB"."WPHIS_P6_REQ";
CREATE TABLE "WOPDB"."WPHIS_P6_REQ" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_PRINT_NO" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER(2) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"WGROUP_ID" VARCHAR2(50 BYTE) NULL ,
"PROCESS_STATUS" NUMBER(3) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"APPOINT_INS_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"WOP_RETURN" VARCHAR2(200 BYTE) NULL ,
"WOP_REASON" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_DTS" DATE NULL ,
"BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"P6_REQ_CONTENT" CLOB NULL ,
"P6_RET_CONTENT" CLOB NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WPHIS_P6_REQ_OLD
-- ----------------------------
DROP TABLE "WOPDB"."WPHIS_P6_REQ_OLD";
CREATE TABLE "WOPDB"."WPHIS_P6_REQ_OLD" (
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_PRINT_NO" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"P6_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" VARCHAR2(10 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER(2) NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"WGROUP_ID" VARCHAR2(50 BYTE) NULL ,
"PROCESS_STATUS" NUMBER(3) NOT NULL ,
"CREATE_DTS" DATE NOT NULL ,
"APPOINT_INS_DTS" DATE NULL ,
"COMPLETE_DTS" DATE NULL ,
"WOP_RETURN" VARCHAR2(200 BYTE) NULL ,
"WOP_REASON" VARCHAR2(2000 BYTE) NULL ,
"UPDATE_DTS" DATE NULL ,
"BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_ID" VARCHAR2(50 BYTE) NULL ,
"P6_REQ_CONTENT" CLOB NULL ,
"P6_RET_CONTENT" CLOB NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WPHIS_SRQ
-- ----------------------------
DROP TABLE "WOPDB"."WPHIS_SRQ";
CREATE TABLE "WOPDB"."WPHIS_SRQ" (
"WOP_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_SERIAL_NO" VARCHAR2(50 BYTE) NOT NULL ,
"WOP_ORDER_VER" NUMBER NOT NULL ,
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_VER" NUMBER NOT NULL ,
"P6_ORDER_HISTID" VARCHAR2(50 BYTE) NULL ,
"TASK_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NULL ,
"CRM_ORDER_VER" NUMBER NULL ,
"WORK_ID" VARCHAR2(50 BYTE) NULL ,
"WORK_SERIAL_NO" VARCHAR2(50 BYTE) NULL ,
"SERVICE_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"ORDER_TYPE" NUMBER NOT NULL ,
"ACTION_TYPE" VARCHAR2(10 BYTE) NULL ,
"RECEIVE_DTS" DATE NOT NULL ,
"UPDATE_DTS" DATE NOT NULL ,
"COMPLETE_DTS" DATE NULL ,
"STATUS" NUMBER NOT NULL ,
"PROCESS_FLAG" VARCHAR2(2 BYTE) NULL ,
"SCHEDULE_DTS" DATE NULL ,
"REMARK0" VARCHAR2(500 BYTE) NULL ,
"REMARK1" VARCHAR2(500 BYTE) NULL ,
"REMARK2" VARCHAR2(500 BYTE) NULL ,
"REMARK3" VARCHAR2(500 BYTE) NULL ,
"REMARK4" VARCHAR2(500 BYTE) NULL ,
"REMARK5" VARCHAR2(500 BYTE) NULL ,
"REMARK6" VARCHAR2(500 BYTE) NULL ,
"REMARK7" VARCHAR2(500 BYTE) NULL ,
"REMARK8" VARCHAR2(500 BYTE) NULL ,
"REMARK9" VARCHAR2(500 BYTE) NULL ,
"REMARK10" VARCHAR2(500 BYTE) NULL ,
"REMARK11" VARCHAR2(500 BYTE) NULL ,
"REMARK12" VARCHAR2(500 BYTE) NULL ,
"REMARK13" VARCHAR2(500 BYTE) NULL ,
"REMARK14" VARCHAR2(500 BYTE) NULL ,
"REMARK15" VARCHAR2(500 BYTE) NULL ,
"REMARK16" VARCHAR2(500 BYTE) NULL ,
"REMARK17" VARCHAR2(500 BYTE) NULL ,
"REMARK18" VARCHAR2(500 BYTE) NULL ,
"REMARK19" VARCHAR2(500 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- View structure for VIEW_WP_SERVICE_ORDER
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VIEW_WP_SERVICE_ORDER" AS 
select r.create_dts,
         r.wop_return,
         r.wop_reason,
         r.p6_req_content,
         r.p6_ret_content,
         s.*
    from WP_SRQ s
    inner join WP_P6_REQ r
    on s.wop_serial_no = r.wop_serial_no;

-- ----------------------------
-- View structure for VIEW_WPHIS_SERVICE_ORDER
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VIEW_WPHIS_SERVICE_ORDER" AS 
select r.create_dts,
         r.wop_return,
         r.wop_reason,
         r.p6_req_content,
         r.p6_ret_content,
         s.*
    from WPHIS_SRQ s
    inner join WPHIS_P6_REQ r
    on s.wop_serial_no = r.wop_serial_no;

-- ----------------------------
-- View structure for VWF_EVA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VWF_EVA" AS 
select t.beid,t.buz_no,t.sub_buz_no,t.ref_no,t.sys_source,t.flow_type,t.area_type,t.prod_type,t.prod_rate,t.cons_flag,
t.cust_name,t.buz_type,t.buz_prop,t.buz_desc,t.start_dts,t.comp_dts,t.proc_dts,t.eval,t.fee_once,t.fee_month,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '0')cm,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '1')lm,
(select m.eval from wf_eva_member m where m.beid = t.beid and m.role = '1')lm_eval,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '21')sm1,
(select m.eval from wf_eva_member m where m.beid = t.beid and m.role = '21')sm1_eval,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '22')sm2,
(select m.eval from wf_eva_member m where m.beid = t.beid and m.role = '22')sm2_eval,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '23')sm3,
(select m.eval from wf_eva_member m where m.beid = t.beid and m.role = '23')sm3_eval,
(select m.usr_id from wf_eva_member m where m.beid = t.beid and m.role = '3')pm,
(select m.eval from wf_eva_member m where m.beid = t.beid and m.role = '3')pm_eval
from WF_EVA_ITEM t;

-- ----------------------------
-- View structure for VWF_ORDER
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VWF_ORDER" AS 
select o."FO_ID",o."FO_VER",o."SO_ID",o."SO_VER",o."SO_NO",o."FLOW_ID",o."FLOW_VER",o."FLOW_TYPE",o."FLOW_STATUS",o."FLOW_STATE",o."REFERENCE",o."SERV_TYPE",o."SERV_CATEGORY",o."PRIORITY",o."CREATE_DTS",o."COMPLETE_DTS",o."EXPECT_DURATION",o."EXPECT_COMPL_DTS",o."REMARK",o."FTX_AUTHOR",o."FTX_OPERATE",o."FTX_REASON",o."FTX_OPERATE_DTS",
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ref_no' and r.fo_id = o.fo_id and rownum <=1) REFNO,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_source' and r.fo_id = o.fo_id and rownum <=1) OS,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'zqkh_no' and r.fo_id = o.fo_id and rownum <=1)ZQKHNO,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'proj_no' and r.fo_id = o.fo_id and rownum <=1)PROJNO,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'sf_jt_flag' and r.fo_id = o.fo_id and rownum <=1)JTFG,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'jt_no' and r.fo_id = o.fo_id and rownum <=1)JTNO,

       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_owner' and r.fo_id = o.fo_id and rownum <=1)OOWNER,--建单人
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_owner_dept' and r.fo_id = o.fo_id and rownum <=1)OOWNERDEPT,--建单人部门
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'customer_name' and r.fo_id = o.fo_id and rownum <=1) CUST,--客户
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'customer_pm' and r.fo_id = o.fo_id and rownum <=1) CUSTPM,--客户经理

       (select r.remark_val from wf_ord_remark r where r.remark_key = 'proj_name' and r.fo_id = o.fo_id and rownum <=1)PROJNAME,--项目名
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'install_address' and r.fo_id = o.fo_id and rownum <=1)ADDR,--安装地址
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'govsup_pm' and r.fo_id = o.fo_id and rownum <=1)MCPM,--管控经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'execute_pm' and r.fo_id = o.fo_id and rownum <=1)EXPM,--执行经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'dispatch_pm' and r.fo_id = o.fo_id and rownum <=1)DPPM,--派发经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'user_request_complete_date' and r.fo_id = o.fo_id and rownum <=1)URCD,--用户要求完成时间
       (select value from wf_ord_reso where fo_id = o.fo_id and reso_type = 'ServiceData' and dict_id = 'business_type'and rownum <=1)BUZTP,--业务类型
       (select value from wf_ord_reso where fo_id = o.fo_id and reso_type = 'ServiceData' and dict_id = 'urgent'and rownum <=1)URGE,--加急标识
       (select value from wf_ord_reso where fo_id = o.fo_id and dict_id = 'dept_no'and reso_type = 'ServiceData')DPPMDEPT,--一级支撑部门
       (select value from wf_ord_reso where fo_id = o.fo_id and dict_id = 'support_manager_dept')SPPMDEPT--二级支撑部门

    from wf_ord o;

-- ----------------------------
-- View structure for VWF_ORDER_FLOW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VWF_ORDER_FLOW" AS 
select
f.FO_SN, f.FO_ID, f.FO_VER, f.FLOW_TYPE, f.FLOW_ID, f.FLOW_VER, f.SO_ID, f.SO_VER, f.NODE_ID, f.NODE_TYPE, f.PRE_NODE_ID,
f.PRE_NODE_STATUS, f.TASK_ID, f.TASK_TYPE, f.REMARK, f.RECEIVE_DTS, f.UPDATE_DTS, f.COMPLETE_DTS, f.EXPECT_COMPL_DTS,
f.EXPECT_DURATION, f.STATE, f.STATUS, f.OWNER, f.ACT_MODE, f.JUMP_FLAG, f.PRIORITY, f.VIEW_ID, f.SERV_CATEGORY, f.SERV_TYPE,
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ref_no' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn) REFNO,   --DK
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_source' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn) OS,  --来源
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'zqkh_no' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)ZQKHNO,  --ZQKH
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'proj_no' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)PROJNO,  --工程编号
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'sf_jt_flag' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)JTFG, --集团标识
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'jt_no' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)JTNO,      --集团编号
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_owner' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)OOWNER,--建单人
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'ord_owner_dept' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)OOWNERDEPT,--建单人部门
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'customer_name' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn) CUST, --客户
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'customer_pm' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn) CUSTPM,  --客户经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'proj_name' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)PROJNAME,  --项目名
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'install_address' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)ADDR,--安装地址
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'govsup_pm' and r.fo_id = f.fo_id and rownum <=1)MCPM,       --管控经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'execute_pm' and r.fo_id = f.fo_id and rownum <=1)EXPM,--执行经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'dispatch_pm' and r.fo_id = f.fo_id and rownum <=1)DPPM,--派发经理
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'user_request_complete_date' and r.fo_id = f.fo_id and rownum <=1)URCD,--用户要求完成时间
       (select value from wf_ord_reso where fo_id = f.fo_id and reso_type = 'ServiceData' and dict_id = 'business_type'and rownum <=1)BUZTP,--业务类型
       (select value from wf_ord_reso where fo_id = f.fo_id and reso_type = 'ServiceData' and dict_id = 'urgent'and rownum <=1)URGE,--加急标识
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'doer' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)DOER,--接单人
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'dept_no' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)DEPT,--接单部门
       (select r.remark_val from wf_ord_remark r where r.remark_key = 'doer' and r.fo_id = f.fo_id and r.fo_sn = f.fo_sn)ASSIGNER --指派人
    from wf_ord_flow f;

-- ----------------------------
-- View structure for VWP_SRQ
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "WOPDB"."VWP_SRQ" AS 
select s."WOP_ORDER_ID",s."WOP_SERIAL_NO",s."WOP_ORDER_VER",s."P6_ORDER_ID",s."P6_ORDER_VER",s."P6_ORDER_HISTID",s."TASK_ID",s."CRM_ORDER_ID",s."CRM_ORDER_VER",s."WORK_ID",s."WORK_SERIAL_NO",s."SERVICE_TYPE",s."PLANE_TYPE",s."ORDER_TYPE",s."ACTION_TYPE",s."RECEIVE_DTS",s."UPDATE_DTS",s."COMPLETE_DTS",s."STATUS",s."PROCESS_FLAG",s."SCHEDULE_DTS",s."REMARK0",s."REMARK1",s."REMARK2",s."REMARK3",s."REMARK4",s."REMARK5",s."REMARK6",s."REMARK7",s."REMARK8",s."REMARK9",s."REMARK10",s."REMARK11",s."REMARK12",s."REMARK13",s."REMARK14",s."REMARK15",s."REMARK16",s."REMARK17",s."REMARK18",s."REMARK19",
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'ord_dept_name' and r.wpid = s.wop_order_id and rownum <=1)FQBM,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'ord_prj_mgr' and r.wpid = s.wop_order_id and rownum <=1)XMJL,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'vip_code' and r.wpid = s.wop_order_id and rownum <=1)JKBH,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'cust_type' and r.wpid = s.wop_order_id and rownum <=1)KHLX,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'jt_cz' and r.wpid = s.wop_order_id and rownum <=1)JTCZ,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'jt_fk' and r.wpid = s.wop_order_id and rownum <=1)JTFK,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'dk_no' and r.wpid = s.wop_order_id and rownum <=1)DKNO,
       (select r.remark_val from wp_srq_remark r where r.remark_key = 'jt_cz_rfdts' and r.wpid = s.wop_order_id and rownum <=1)JTFBRD
    from WP_SRQ s
where s.plane_type in ('161','188','162','224','225');

-- ----------------------------
-- Procedure structure for ARCHIVE_ORDER_DATA
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."ARCHIVE_ORDER_DATA" (vi_wop_order_id  in wopdb.wp_p6_req.wop_order_id%type,
                                                                ivk_code         out number,
                                                                ivk_desc         out varchar2
) is
BEGIN
  BEGIN

  ivk_code :=0;
  ivk_desc:= '';
  --insert into WPHIS_P6_REQ
  --       (select * from WP_P6_REQ where  WOP_ORDER_ID=vi_wop_order_id);
  --delete from WP_P6_REQ where WOP_ORDER_ID=vi_wop_order_id ;
  --insert into WPHIS_SRQ
  --       (select * from WP_SRQ where  WOP_ORDER_ID=vi_wop_order_id);
  --delete from WP_SRQ where WOP_ORDER_ID=vi_wop_order_id ;
  --insert into WPHIS_ORDER_LOG
  --       (select * from WP_ORDER_LOG where  WOP_ORDER_ID=vi_wop_order_id);
  --delete from WP_ORDER_LOG where WOP_ORDER_ID=vi_wop_order_id ;
  --commit;
  
    UPDATE WP_SRQ
    SET PROCESS_FLAG = '20'
    WHERE WOP_ORDER_ID = vi_wop_order_id ;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 300;
      ivk_desc := 'ARCHIVE_ORDER_DATA:' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  

EXCEPTION
WHEN OTHERS THEN
  ivk_code := SQLCODE;
  ivk_desc := 'SQLException!' || SUBSTR(SQLERRM, 1, 50);
  ROLLBACK;

end ARCHIVE_ORDER_DATA;

 
/

-- ----------------------------
-- Procedure structure for COPY_ASSO_ORD_SNAP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."COPY_ASSO_ORD_SNAP"(
a_fo_id            IN NUMBER, --新建foid
a_fo_sn            IN NUMBER, --新建fosn
a_reference        IN VARCHAR,
a_flow_id_org      IN NUMBER,
a_flow_id_tag      IN NUMBER
)is

v_fo_id       number;
v_fo_sn       number;
v_flag        number;
v_val         varchar(2000);

begin
           --fetch original create node fo_sn
           if a_flow_id_org in (51,26) and a_flow_id_tag in (52,11)
           then
           begin
              select fo_id into v_fo_id
              from wf_ord_reso o
              where o.reso_id = a_reference
              and o.reso_type = 'ServiceData'
              and o.use_flag = 0
              and rownum = 1;
              EXCEPTION
                      WHEN others THEN
                      DBMS_OUTPUT.PUT_LINE('查不到DK对应FOID--' || SQLCODE || '--' || SQLERRM);
           end;
           end if;
           --asso ns_psale 
           if a_flow_id_org = 51 and a_flow_id_tag = 51
           then
           begin
              select fo_id into v_fo_id
              from wf_ord_reso o
              where o.reso_id = substr(a_reference,1,12)--取主DK
              and o.reso_type = 'ServiceData'
              and o.use_flag = 0
              and rownum = 1;
              EXCEPTION
                      WHEN others THEN
                      DBMS_OUTPUT.PUT_LINE('查不到DK对应FOID--' || SQLCODE || '--' || SQLERRM);
           end;
           end if;
           begin
           select r.fo_sn into v_fo_sn
           from
             (select f.fo_sn
              from wf_ord_flow f
              where f.fo_id = v_fo_id
              and f.flow_id = a_flow_id_org
              and f.node_type = 'B'
              order by f.receive_dts desc) r
           where rownum <= 1;
           EXCEPTION
                      WHEN others THEN
                      DBMS_OUTPUT.PUT_LINE('查不到对应FOSN--' || SQLCODE || '--' || SQLERRM);
                      
           end;
                      
           DBMS_OUTPUT.PUT_LINE('ORG FO:' || v_fo_id || '--' || v_fo_sn);
            --copy wf_ord_snap
           FOR ordtmp IN (
              select data_id,data_dict_id,data_path,inst_id,position,value,value_upd
              from WF_ORD_SNAP
              where fo_id = v_fo_id
              and fo_sn = v_fo_sn
              and data_id in (1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1020,1021,1024)
           )
           LOOP
           v_flag := 0;
           v_val := '';
           if ordtmp.value_upd is not null
           then v_val := ordtmp.value_upd;
           else
                v_val := ordtmp.value;
           end if;
           --config copy param
           --.......

           if v_val is not null
           then
           DBMS_OUTPUT.PUT_LINE('UPDATE SNAP:' || ordtmp.data_dict_id || '--' || v_val);
           BEGIN
                   update WF_ORD_SNAP P
                    set P.VALUE_UPD = v_val
                    where fo_sn = a_fo_sn
                    and fo_id = a_fo_id
                    and inst_id = 0
                    and data_id = ordtmp.data_id;
                   commit;
                   EXCEPTION
                      WHEN others THEN
                      DBMS_OUTPUT.PUT_LINE('UPDATE SNAP出错--' || SQLCODE || '--' || SQLERRM);
           END;
           end if;
           END LOOP;

           --copy wf_ord_reso



end COPY_ASSO_ORD_SNAP;
/

-- ----------------------------
-- Procedure structure for CREATE_EVA_ITEM
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_EVA_ITEM" (  vi_buz_no   in varchar2,
                                              vi_sub_buz_no  in varchar2,
                                              vi_ref_no      in varchar2,
                                              vi_sys_sour    in varchar2,
                                              vi_flow_type   in  number,
                                              vi_area_type   in  number,
                                              vi_prod_type   in  number,
                                              vi_prod_rate   in  number,
                                              vi_cons_flag   in  number,
                                              vi_buzopt_sn   in  varchar2,
                                              vi_buzopt_name in  varchar2,
                                              vi_cust_no     in  varchar2,
                                              vi_cust_name   in  varchar2,
                                              vi_buz_type    in  varchar2,
                                              vi_buz_prop    in  varchar2,
                                              vi_buz_desc    in  varchar2,
                                              vi_start_dts   in  varchar2,
                                              vi_compl_dts   in  varchar2,
                                              vi_send_dts    in  varchar2,
                                              vi_cust_mgr    in  varchar2,
                                              vi_legal_mgr   in  varchar2,
                                              vi_serv_mgr    in  varchar2,
                                              vi_serv2_mgr   in  varchar2,
                                              vi_serv3_mgr   in  varchar2,
                                              vi_cons_mgr    in  varchar2,
                                              vi_fee_once    in  number,
                                              vi_fee_month   in  number,

                                              ivk_code       out number,
                                              ivk_desc       out varchar2) is
    v_beid     number(10);
    v_at       number(3);
    v_pt       number(3);
    v_pr       number(3);
    v_cf       number(3);
begin
    ivk_code := 0;
    --建立评价项，根据主合同号+分合同号，主合同号+dk编号， 主合同号+集团编号 独立区别
    --对评价项做剔重根据flow_type查询是否已有评价项
    
    if vi_area_type is null then
      v_at := 0;
    else
      v_at := vi_area_type;
    end if;
    if vi_prod_type is null then
      v_pt := 0;
    else
      v_pt := vi_prod_type;
    end if;
    if vi_prod_rate is null then
      v_pr := 0;
    else
      v_pr := vi_prod_rate;
    end if;
    if vi_cons_flag is null then
      v_cf := 0;
    else
      v_cf := vi_cons_flag;
    end if;
    
    if vi_flow_type in (0,1,3) then
      begin
       select beid into v_beid 
       from WF_EVA_ITEM where buz_no=vi_buz_no and sub_buz_no=vi_sub_buz_no and flow_type in ('0','1','3');
       EXCEPTION
       WHEN OTHERS THEN
       v_beid := -1;
      end;
    elsif vi_flow_type in (2) then
      begin
       select beid into v_beid 
       from WF_EVA_ITEM where ref_no=vi_ref_no and sub_buz_no=vi_sub_buz_no and flow_type = '2';
       EXCEPTION
       WHEN OTHERS THEN
       v_beid := -1;
      end;
    else
      v_beid := -1;
    end if;
    
    if v_beid = -1 then
    begin
     select to_char(WF_EVA_ITEM_SN.NEXTVAL)
     into v_beid from dual;
     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := 'BEID序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;
    --insert eva item
    BEGIN
    INSERT INTO WF_EVA_ITEM
     (
      BEID,
      BUZ_NO,
      SUB_BUZ_NO,
      REF_NO,
      SYS_SOURCE,
      FLOW_TYPE,
      AREA_TYPE,
      PROD_TYPE,
      PROD_RATE,
      CONS_FLAG,
      BUZOPT_SN,
      BUZOPT_NAME,
      CUST_NAME,
      CUST_NO,
      BUZ_TYPE,
      BUZ_PROP,
      BUZ_DESC,
      START_DTS,
      COMP_DTS,
      SEND_DTS,
      PROC_DTS,
      FEE_ONCE,
      FEE_MONTH
     )
    VALUES
      (v_beid,
       vi_buz_no,
       vi_sub_buz_no,
       vi_ref_no,
       vi_sys_sour,
       vi_flow_type,
       v_at,
       v_pt,
       v_pr,
       v_cf,
       vi_buzopt_sn,
       vi_buzopt_name,
       vi_cust_name,
       vi_cust_no,
       vi_buz_type,
       vi_buz_prop,
       vi_buz_desc,
       to_date(vi_start_dts,'yyyy-mm-dd hh24:mi:ss'),
       to_date(vi_compl_dts,'yyyy-mm-dd hh24:mi:ss'),
       to_date(vi_send_dts,'yyyy-mm-dd hh24:mi:ss'),
       sysdate,
       vi_fee_once,
       vi_fee_month
       );
       commit;
    EXCEPTION
      WHEN OTHERS THEN
        ivk_code := 100;
        ivk_desc := 'WF_EVA_ITEM insert-' || SQLCODE || '--' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE('插WF_EVA_ITEM表出错--' || SQLCODE || '--' || SQLERRM);
        return;
    END;
    
    else
      ivk_desc := 'EVA_ITEM update - '|| v_beid;
      --update eva item
      BEGIN
      UPDATE WF_EVA_ITEM SET 
      REF_NO=vi_ref_no,
      FLOW_TYPE=vi_flow_type,
      AREA_TYPE=v_at,
      PROD_TYPE=v_pt,
      PROD_RATE=v_pr,
      CONS_FLAG=v_cf,
      BUZOPT_SN=vi_buzopt_sn,
      BUZOPT_NAME=vi_buzopt_name,
      BUZ_TYPE=vi_buz_type,
      BUZ_PROP=vi_buz_prop,
      BUZ_DESC=vi_buz_desc,
      START_DTS=to_date(vi_start_dts,'yyyy-mm-dd hh24:mi:ss'),
      COMP_DTS=to_date(vi_compl_dts,'yyyy-mm-dd hh24:mi:ss'),
      SEND_DTS=to_date(vi_send_dts,'yyyy-mm-dd hh24:mi:ss'),
      FEE_ONCE=vi_fee_once,
      FEE_MONTH=vi_fee_month
      WHERE BEID = v_beid;
      commit;
      EXCEPTION
        WHEN OTHERS THEN
          ivk_code := 100;
          ivk_desc := 'WF_EVA_ITEM insert-' || SQLCODE || '--' || SQLERRM;
          DBMS_OUTPUT.PUT_LINE('改WF_EVA_ITEM表出错--' || SQLCODE || '--' || SQLERRM);
          return;
      END;
      
    end if;


    --客户经理只要根据政企编号生成一次，是否须剔重。
    if vi_cust_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_cust_mgr, 1, INSTR (vi_cust_mgr, '|', 1, 1) - 1),
             '0',
             '',
             sysdate,
             SUBSTR (vi_cust_mgr, INSTR (vi_cust_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_cust_mgr, 1, INSTR (vi_cust_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_cust_mgr, INSTR (vi_cust_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='0';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;

    --法务经理只要根据分合同生成一次，另须对主合同合并。
    if vi_legal_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_legal_mgr, 1, INSTR (vi_legal_mgr, '|', 1, 1) - 1),
             '1',
             '',
             sysdate,
             SUBSTR (vi_legal_mgr, INSTR (vi_legal_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_legal_mgr, 1, INSTR (vi_legal_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_legal_mgr, INSTR (vi_legal_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='1';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;

    --业务经理只要根据分合同生成一次，另须对主合同合并。
    if vi_serv_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_serv_mgr, 1, INSTR (vi_serv_mgr, '|', 1, 1) - 1),
             '21',
             '',
             sysdate,
             SUBSTR (vi_serv_mgr, INSTR (vi_serv_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_serv_mgr, 1, INSTR (vi_serv_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_serv_mgr, INSTR (vi_serv_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='21';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;
    if vi_serv2_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_serv2_mgr, 1, INSTR (vi_serv2_mgr, '|', 1, 1) - 1),
             '22',
             '',
             sysdate,
             SUBSTR (vi_serv2_mgr, INSTR (vi_serv2_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_serv2_mgr, 1, INSTR (vi_serv2_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_serv2_mgr, INSTR (vi_serv2_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='22';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;
    if vi_serv3_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_serv3_mgr, 1, INSTR (vi_serv3_mgr, '|', 1, 1) - 1),
             '23',
             '',
             sysdate,
             SUBSTR (vi_serv3_mgr, INSTR (vi_serv3_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_serv3_mgr, 1, INSTR (vi_serv2_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_serv3_mgr, INSTR (vi_serv2_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='23';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;

    --工程经理只要根据分合同生成一次，另须对主合同合并（分合同工程交付，DK工程建设）
    if vi_cons_mgr <> '|' then
        BEGIN
          INSERT INTO WF_EVA_MEMBER
           (
            BEID,
            USR_ID,
            ROLE,
            TASK,
            ACCEPT_DTS,
            WORK_DAYS,
            EVAL
           )
          VALUES
            (v_beid,
             SUBSTR (vi_cons_mgr, 1, INSTR (vi_cons_mgr, '|', 1, 1) - 1),
             '3',
             '',
             sysdate,
             SUBSTR (vi_cons_mgr, INSTR (vi_cons_mgr, '|', 1, 1) + 1),
             0
             );
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              DBMS_OUTPUT.PUT_LINE('插WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              BEGIN
                UPDATE WF_EVA_MEMBER 
                SET USR_ID=SUBSTR (vi_cons_mgr, 1, INSTR (vi_cons_mgr, '|', 1, 1) - 1),
                ACCEPT_DTS=sysdate,
                WORK_DAYS=SUBSTR (vi_cons_mgr, INSTR (vi_cons_mgr, '|', 1, 1) + 1)
                WHERE BEID=v_beid AND ROLE='3';
                commit;
                EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('改WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
              END;
          END;
    end if;


end CREATE_EVA_ITEM;
/

-- ----------------------------
-- Procedure structure for CREATE_ORD_REPT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_ORD_REPT" (vi_name_space  in varchar2,
                                               vi_source_type    in varchar2,
                                               vi_prov_order_id  in varchar2,
                                               vi_prov_order_ver in number,
                                               vi_crm_order_id   in varchar2,--GP dispath_no
                                               vi_crm_order_ver  in number,
                                               vi_ref_no         in varchar2,
                                               vi_ref_val        in varchar2,--GP crmid
                                               vi_order_type     in number,
                                               vi_act_type       in varchar2,
                                               vi_subact_type    in varchar2,
                                               vi_prov_task      in varchar2,
                                               vi_proc_dts       in date,
                                               vi_upda_dts       in date,
                                               vi_status         in number,
                                               vi_proc_sta       in number,
                                               vi_proc_com       in varchar2,
                                               vi_param0          in varchar2,
                                               vi_param1          in varchar2,
                                               vi_param2          in varchar2,
                                               vi_param3          in varchar2,
                                               vi_param4          in varchar2,
                                               vi_param5          in varchar2,
                                               ivk_code                out NUMBER,
                                               ivk_desc                out varchar2) is

v_serial_no     number;
v_status        number;
v_pf            varchar(5);
v_wpid          varchar(30);

begin
  ivk_code := 0;
  --返回码注释：
  --成功0；失败非0
  --100业务逻辑违例
  --200表操作错
  --300校验错

  --输入参数检验
  if vi_order_type is null or vi_name_space is null or vi_source_type is null
  then
    ivk_code := 300;
    ivk_desc := '关键参数不能为空!';
    RETURN;
  end if;

  --生成工单号
  begin
  select SEQ_REPORT_NO.NEXTVAL into v_serial_no
       from dual;
  EXCEPTION
    WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;

  BEGIN
    INSERT INTO WP_REPORT
     (REP_SN,
     NAME_SPACE,
     SOURCE_TYPE,
     PROV_ORDER_ID,
     PROV_ORDER_VER,
     CRM_ORDER_ID,
     CRM_ORDER_VER,
     REFERENCE_NO,
     REFERENCE_VAL,
     ORDER_TYPE,
     ACTION_CODE,
     SUB_ACTION_CODE,
     PROV_TASK,
     CREATE_DTS,
     PROCESS_DTS,
     UPDATE_DTS,
     COMPLETE_DTS,
     STATUS,
     PROCESS_STATUS,
     PROCESS_COMMENT,
     REMARK0,
     REMARK1,
     REMARK2,
     REMARK3,
     REMARK4,
     REMARK5
      )
    VALUES
      (v_serial_no,
       vi_name_space,
       vi_source_type,
       vi_prov_order_id,
       vi_prov_order_ver,
       vi_crm_order_id,
       vi_crm_order_ver,
       vi_ref_no,
       vi_ref_val,
       vi_order_type,
       vi_act_type,
       vi_subact_type,
       vi_prov_task,
       sysdate,
       vi_proc_dts,
       vi_upda_dts,
       null,
       vi_status,
       vi_proc_sta,
       vi_proc_com,
       vi_param0,
       vi_param1,
       vi_param2,
       vi_param3,
       vi_param4,
       vi_param5
       );
       COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_REPORT表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;

  if(vi_name_space = 'jthl_notify'and vi_crm_order_id is not null)
  then
      --增加重发单点报竣功能
      begin
        select wop_order_id,status, process_flag into v_wpid, v_status, v_pf from wp_srq
        where remark2 = vi_crm_order_id
        and remark5 = vi_ref_no
        and plane_type = '159';
        EXCEPTION
            WHEN OTHERS THEN
            v_wpid := null;
      end;
  
      BEGIN
          UPDATE WP_SRQ
            SET
            SCHEDULE_DTS = vi_upda_dts,
            UPDATE_DTS = sysdate
            WHERE REMARK2 = vi_crm_order_id
            AND REMARK5 = vi_ref_no;
            commit;
            EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
              RETURN;
      END;
      
      if v_wpid is not null and v_status = 105 and  v_pf = '11'
      then
        BEGIN
          UPDATE WP_SRQ
            SET
            process_flag = '07'
            WHERE
            wop_order_id = v_wpid;
            commit;
            EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
        END;
      end if;
  end if;

  if(vi_name_space = 'jthl_notify'and vi_ref_val is not null and vi_crm_order_id is null)
  then
      --增加重发单点报竣功能
      begin
        select wop_order_id,status, process_flag into v_wpid, v_status, v_pf from wp_srq
        where crm_order_id = vi_ref_val
        and remark5 = vi_ref_no
        and plane_type = '159';
        EXCEPTION
            WHEN OTHERS THEN
            v_wpid := null;
      end;  
  
      BEGIN
            UPDATE WP_SRQ
            SET
            SCHEDULE_DTS = vi_upda_dts,
            UPDATE_DTS = sysdate
            WHERE CRM_ORDER_ID = vi_ref_val
            AND REMARK5 = vi_ref_no;
            commit;
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
              RETURN;
          END;
          
      if v_wpid is not null and v_status = 105 and  v_pf = '11'
      then
        BEGIN
          UPDATE WP_SRQ
            SET
            process_flag = '07'
            WHERE
            wop_order_id = v_wpid;
            commit;
            EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
        END;
      end if;
  end if;

--catch other exception
EXCEPTION
  WHEN OTHERS THEN
    ivk_code := SQLCODE;
    ivk_desc := '其他错误!' || SUBSTR(SQLERRM, 1, 50);

end CREATE_ORD_REPT;
/

-- ----------------------------
-- Procedure structure for CREATE_ORDER_LOG
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_ORDER_LOG" (  vi_order_id  in varchar2,
                                              vi_order_ver  in number,
                                              vi_curr_serial   in varchar2,
                                              vi_prev_serial   in varchar2,
                                              vi_status        in  number,
                                              vi_prev_status   in  number,
                                              vi_operate_type  in  varchar2,
                                              vi_operator      in  varchar2,
                                              vi_operation     in  varchar2,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
    v_oper_id     varchar2(50);
    v_curr_time   varchar2(20);
begin
    --INSERT WP_ORDER_LOG
    begin
     select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;

     select to_char(SEQ_OPER_ID.NEXTVAL)
     into v_oper_id from dual;

     v_oper_id := v_curr_time || '-' || v_oper_id;

     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '日志序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;

    BEGIN
    INSERT INTO WP_ORDER_LOG
     (OPER_ID,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      CURR_SERIAL_NO,
      PREV_SERIAL_NO,
      CURR_STATE,
      PREV_STATE,
      OPER_TYPE,
      OPERATOR,
      OPERATION,
      OPER_DTS)
    VALUES
      (v_oper_id,
       vi_order_id,
       vi_order_ver,
       vi_curr_serial,
       vi_prev_serial,
       vi_status,
       vi_prev_status,
       vi_operate_type,
       vi_operator,
       vi_operation,
       sysdate
       );
       commit;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('插WP_ORDER_LOG表出错--' || SQLCODE || '--' || SQLERRM);
    END;
end CREATE_ORDER_LOG;

 
/

-- ----------------------------
-- Procedure structure for CREATE_ORDER_REQUEST
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."CREATE_ORDER_REQUEST"(vi_wop_order_id  in WOPDB.WP_P6_REQ.WOP_ORDER_ID%TYPE,
                                              vi_print_no      in WOPDB.WP_P6_REQ.WOP_PRINT_NO%TYPE,
                                              vi_p6_order_id   in WOPDB.WP_P6_REQ.P6_ORDER_ID%TYPE,
                                              vi_p6_order_ver  in WOPDB.WP_P6_REQ.P6_ORDER_VER%TYPE,
                                              vi_p6_order_histid in WOPDB.WP_P6_REQ.P6_ORDER_HISTID%TYPE,
                                              vi_task_id       in WOPDB.WP_P6_REQ.TASK_ID%TYPE,
                                              vi_crm_order_id   in WOPDB.WP_P6_REQ.CRM_ORDER_ID%TYPE,
                                              vi_crm_order_ver  in WOPDB.WP_P6_REQ.CRM_ORDER_VER%TYPE,
                                              vi_service_type  in WOPDB.WP_P6_REQ.SERVICE_TYPE%TYPE,
                                              vi_plane_type    in WOPDB.WP_P6_REQ.PLANE_TYPE%TYPE,
                                              vi_order_type    in WOPDB.WP_P6_REQ.ORDER_TYPE%TYPE,
                                              vi_action_type   in WOPDB.WP_P6_REQ.ACTION_TYPE%TYPE,
                                              vi_bureau_id     in WOPDB.WP_P6_REQ.BUREAU_ID%TYPE,
                                              vi_subbureau_id     in WOPDB.WP_P6_REQ.SUB_BUREAU_ID%TYPE,
                                              vi_wgroup_id        in WOPDB.WP_P6_REQ.WGROUP_ID%TYPE,
                                              vi_appoint_ins_dts  in varchar2,
                                              vi_request_content   in WOPDB.WP_P6_REQ.P6_REQ_CONTENT%TYPE,
                                              vo_wop_serial_no        out WOPDB.WP_P6_REQ.WOP_SERIAL_NO%TYPE,
                                              vo_wop_order_id         out WOPDB.WP_P6_REQ.WOP_ORDER_ID%TYPE,
                                              ivk_code                out NUMBER,
                                              ivk_desc                out varchar2) is

v_serial_no     varchar2(50);
v_wop_order_id  varchar2(50);
v_curr_time     varchar2(20);
row_count      number;
v_status       number;

PRAGMA AUTONOMOUS_TRANSACTION;
begin
  ivk_code := 0;
  --返回码注释：
  --成功0；失败非0
  --100业务逻辑违例
  --200表操作错
  --300校验错

  --输入参数检验
  if vi_order_type is null then
    ivk_code := 300;
    ivk_desc := 'order_type不能为null!';
    RETURN;
  end if;
  if vi_order_type <> 3 and vi_action_type is null then
    ivk_code := 300;
    ivk_desc := 'action_type不能为null!';
    RETURN;
  end if;
  if vi_order_type > 1 then
     if vi_wop_order_id is null then
        ivk_code := 300;
        ivk_desc := '工单序号不能为null!';
        RETURN;
     end if;

     begin
         select count(*) into row_count
         from WP_P6_REQ
         where WOP_ORDER_ID = vi_wop_order_id;
         EXCEPTION
               WHEN OTHERS THEN
               ivk_code := 200;
               ivk_desc := '工单序号查询出错-' || SQLCODE || '--' || SQLERRM;
               RETURN;
     end;

     if row_count = 0 then
        ivk_code := 100;
        ivk_desc := '追单：原工单序号不存在!';
        RETURN;
     end if;
  end if;

  --生成工单流水
  begin
  select to_char(sysdate,'yyyyMMddHH24miss')
     into v_curr_time from dual;
  select LPAD(TO_CHAR(SEQ_SERIAL_NO.NEXTVAL),10,'0') into v_serial_no
       from dual;
       vo_wop_serial_no := v_curr_time || 'R' || v_serial_no;
  EXCEPTION
    WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单流水生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
  --生成工单序号
  if vi_order_type = 1 then
  begin
     select to_char(sysdate,'yyyyMM')
     into v_curr_time from dual;
     v_wop_order_id := 'WP' || v_curr_time || 'R' || v_serial_no;
     vo_wop_order_id := v_wop_order_id;
     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
  else
      v_wop_order_id := vi_wop_order_id;
      begin
         select process_status into v_status
         from Wp_P6_Req
         where WOP_ORDER_ID = vi_wop_order_id and order_type = 1;
         EXCEPTION
               WHEN OTHERS THEN
               ivk_code := 200;
               ivk_desc := '工单状态查询出错-' || SQLCODE || '--' || SQLERRM;
               RETURN;
     end;
  end if;
  
  --P7压力测试旁路逻辑
  if substr(vi_crm_order_id,0,3) = 'EMU' then
     RETURN;
  end if;

  --正常单 or 修改单/注销单and状态101
  if vi_order_type = 1 or vi_order_type = 2 or (vi_order_type = 3 and v_status > 100)
  then
  BEGIN
    INSERT INTO WP_P6_REQ
     (WOP_SERIAL_NO,
      WOP_ORDER_ID,
      WOP_PRINT_NO,
      P6_ORDER_ID,
      P6_ORDER_VER,
      CRM_ORDER_ID,
      CRM_ORDER_VER,
      SERVICE_TYPE,
      PLANE_TYPE,
      ORDER_TYPE,
      ACTION_TYPE,
      WGROUP_ID,
      BUREAU_ID,
      SUB_BUREAU_ID,
      PROCESS_STATUS,
      CREATE_DTS,
      APPOINT_INS_DTS,
      COMPLETE_DTS,
      WOP_RETURN,
      WOP_REASON,
      P6_REQ_CONTENT,
      P6_ORDER_HISTID,
      TASK_ID)
    VALUES
      (vo_wop_serial_no,
       v_wop_order_id,
       vi_print_no,
       vi_p6_order_id,
       vi_p6_order_ver,
       vi_crm_order_id,
       vi_crm_order_ver,
       vi_service_type,
       vi_plane_type,
       vi_order_type,
       vi_action_type,
       vi_wgroup_id,
       vi_bureau_id,
       vi_subbureau_id,
       '100',
       SYSDATE,
       null,
       null,
       null,
       null,
       vi_request_content,
       vi_p6_order_histid,
       vi_task_id
       );
       commit;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  if vi_wgroup_id is not null
  then
    BEGIN
    INSERT INTO WP_P6_RETTASK
    VALUES
      (v_wop_order_id,
       vi_p6_order_id,
       vi_p6_order_ver,
       vi_p6_order_histid,
       vi_wgroup_id,
       vi_crm_order_id
       );
    commit;
    EXCEPTION
    WHEN OTHERS THEN
       ivk_desc := 'WP_P6_RETTASK--' || SQLCODE || '--' || SQLERRM;
  END;
  end if;
  end if;

    --修改单/注销单 状态100 -> 255
  if  v_status = 100 and  vi_order_type = 3
  then
  BEGIN
    UPDATE WP_P6_REQ
    SET PROCESS_STATUS = 255
    WHERE WOP_ORDER_ID = vi_wop_order_id AND PROCESS_STATUS = 100;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '更新WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  if vi_order_type = 3 then
     BEGIN
    INSERT INTO WP_P6_REQ
     (WOP_SERIAL_NO,
      WOP_ORDER_ID,
      ORDER_TYPE,
      PROCESS_STATUS,
      CREATE_DTS)
    VALUES
      (vo_wop_serial_no,
       v_wop_order_id,
       vi_order_type,
       '101',
       SYSDATE);
    commit;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  end if;

  end if;



--catch other exception
EXCEPTION
  WHEN OTHERS THEN
    ivk_code := SQLCODE;
    ivk_desc := '其他错误!' || SUBSTR(SQLERRM, 1, 50);

end CREATE_ORDER_REQUEST;
/

-- ----------------------------
-- Procedure structure for CREATE_ORDER_REQUEST_CDMA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."CREATE_ORDER_REQUEST_CDMA"(vi_wop_order_id  in WOPDB.WP_P6_REQ.WOP_ORDER_ID%TYPE,
                                              vi_print_no      in WOPDB.WP_P6_REQ.WOP_PRINT_NO%TYPE,
                                              vi_p6_order_id   in WOPDB.WP_P6_REQ.P6_ORDER_ID%TYPE,
                                              vi_p6_order_ver  in WOPDB.WP_P6_REQ.P6_ORDER_VER%TYPE,
                                              vi_p6_order_histid in WOPDB.WP_P6_REQ.P6_ORDER_HISTID%TYPE,
                                              vi_task_id       in WOPDB.WP_P6_REQ.TASK_ID%TYPE,
                                              vi_crm_order_id   in WOPDB.WP_P6_REQ.CRM_ORDER_ID%TYPE,
                                              vi_crm_order_ver  in WOPDB.WP_P6_REQ.CRM_ORDER_VER%TYPE,
                                              vi_service_type  in WOPDB.WP_P6_REQ.SERVICE_TYPE%TYPE,
                                              vi_plane_type    in WOPDB.WP_P6_REQ.PLANE_TYPE%TYPE,
                                              vi_order_type    in WOPDB.WP_P6_REQ.ORDER_TYPE%TYPE,
                                              vi_action_type   in WOPDB.WP_P6_REQ.ACTION_TYPE%TYPE,
                                              vi_bureau_id     in WOPDB.WP_P6_REQ.BUREAU_ID%TYPE,
                                              vi_subbureau_id     in WOPDB.WP_P6_REQ.SUB_BUREAU_ID%TYPE,
                                              vi_wgroup_id        in WOPDB.WP_P6_REQ.WGROUP_ID%TYPE,
                                              vi_appoint_ins_dts  in varchar2,
                                              vi_request_content   in varchar2,
                                              vo_wop_serial_no        out WOPDB.WP_P6_REQ.WOP_SERIAL_NO%TYPE,
                                              vo_wop_order_id         out WOPDB.WP_P6_REQ.WOP_ORDER_ID%TYPE,
                                              ivk_code                out NUMBER,
                                              ivk_desc                out varchar2) is

v_serial_no     varchar2(50);
v_wop_order_id  varchar2(50);
v_curr_time     varchar2(20);
row_count      number;
v_status       number;

begin
  ivk_code := 0;
  --返回码注释：
  --成功0；失败非0
  --100业务逻辑违例
  --200表操作错
  --300校验错

  --输入参数检验
  if vi_order_type is null then
    ivk_code := 300;
    ivk_desc := 'order_type不能为null!';
    RETURN;
  end if;
  if vi_order_type <> 3 and vi_action_type is null then
    ivk_code := 300;
    ivk_desc := 'action_type不能为null!';
    RETURN;
  end if;
  if vi_order_type > 1 then
     if vi_wop_order_id is null then
        ivk_code := 300;
        ivk_desc := '工单序号不能为null!';
        RETURN;
     end if;

     begin
         select count(*) into row_count
         from WP_P6_REQ
         where WOP_ORDER_ID = vi_wop_order_id;
         EXCEPTION
               WHEN OTHERS THEN
               ivk_code := 200;
               ivk_desc := '工单序号查询出错-' || SQLCODE || '--' || SQLERRM;
               RETURN;
     end;

     if row_count = 0 then
        ivk_code := 100;
        ivk_desc := '追单：原工单序号不存在!';
        RETURN;
     end if;
  end if;

  --生成工单流水
  begin
  select to_char(sysdate,'yyyyMMddHH24miss')
     into v_curr_time from dual;
  select LPAD(TO_CHAR(SEQ_SERIAL_NO.NEXTVAL),10,'0') into v_serial_no
       from dual;
       vo_wop_serial_no := v_curr_time || 'R' || v_serial_no;
  EXCEPTION
    WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单流水生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
  --生成工单序号
  if vi_order_type = 1 then
  begin
     select to_char(sysdate,'yyyyMM')
     into v_curr_time from dual;
     v_wop_order_id := 'WP' || v_curr_time || 'R' || v_serial_no;
     vo_wop_order_id := v_wop_order_id;
     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
  else
      v_wop_order_id := vi_wop_order_id;
      begin
         select process_status into v_status
         from Wp_P6_Req
         where WOP_ORDER_ID = vi_wop_order_id and order_type = 1;
         EXCEPTION
               WHEN OTHERS THEN
               ivk_code := 200;
               ivk_desc := '工单状态查询出错-' || SQLCODE || '--' || SQLERRM;
               RETURN;
     end;
  end if;

  --正常单 or 修改单/注销单and状态101
  if vi_order_type = 1 or vi_order_type = 2 or (vi_order_type = 3 and v_status > 100)
  then
  BEGIN
    INSERT INTO WP_P6_REQ
     (WOP_SERIAL_NO,
      WOP_ORDER_ID,
      WOP_PRINT_NO,
      P6_ORDER_ID,
      P6_ORDER_VER,
      CRM_ORDER_ID,
      CRM_ORDER_VER,
      SERVICE_TYPE,
      PLANE_TYPE,
      ORDER_TYPE,
      ACTION_TYPE,
      WGROUP_ID,
      BUREAU_ID,
      SUB_BUREAU_ID,
      PROCESS_STATUS,
      CREATE_DTS,
      APPOINT_INS_DTS,
      COMPLETE_DTS,
      WOP_RETURN,
      WOP_REASON,
      P6_REQ_CONTENT,
      P6_ORDER_HISTID,
      TASK_ID)
    VALUES
      (vo_wop_serial_no,
       v_wop_order_id,
       vi_print_no,
       vi_p6_order_id,
       vi_p6_order_ver,
       vi_crm_order_id,
       vi_crm_order_ver,
       vi_service_type,
       vi_plane_type,
       vi_order_type,
       vi_action_type,
       vi_wgroup_id,
       vi_bureau_id,
       vi_subbureau_id,
       '100',
       SYSDATE,
       null,
       null,
       null,
       null,
       vi_request_content,
       vi_p6_order_histid,
       vi_task_id
       );

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  end if;

    --修改单/注销单 状态100 -> 255
  if  v_status = 100 and vi_order_type = 3
  then
  BEGIN
    UPDATE WP_P6_REQ
    SET PROCESS_STATUS = 255
    WHERE WOP_ORDER_ID = vi_wop_order_id AND PROCESS_STATUS = 100;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '更新WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  if vi_order_type = 3 then
     BEGIN
    INSERT INTO WP_P6_REQ
     (WOP_SERIAL_NO,
      WOP_ORDER_ID,
      ORDER_TYPE,
      PROCESS_STATUS,
      CREATE_DTS)
    VALUES
      (vo_wop_serial_no,
       v_wop_order_id,
       vi_order_type,
       '101',
       SYSDATE);
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
  end if;

  end if;



--catch other exception
EXCEPTION
  WHEN OTHERS THEN
    ivk_code := SQLCODE;
    ivk_desc := '其他错误!' || SUBSTR(SQLERRM, 1, 50);

end CREATE_ORDER_REQUEST_CDMA;
/

-- ----------------------------
-- Procedure structure for CREATE_PRINT_REQUEST
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_PRINT_REQUEST" (vi_print_id      in varchar2,
                                            vi_print_type      in varchar2,
                                            vi_wop_order_id   in varchar2,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is

v_pintno   varchar2(10);

begin
  ivk_code := 0;
  BEGIN
     select to_char(SEQ_PRINT_NO.NEXTVAL)
     into v_pintno from dual;
     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '打印序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;

  BEGIN
    INSERT INTO WP_PRINT_REQ
     (PRINT_NO,
      PRINT_DESTID,
      PRINT_TYPE,
      WOP_ORDER_ID,
      PRINT_FLAG)
      values
      (v_pintno,
       vi_print_id,
       vi_print_type,
       vi_wop_order_id,
       '0');
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := '插WP_PRINT_REQ表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end CREATE_PRINT_REQUEST;

 
/

-- ----------------------------
-- Procedure structure for CREATE_SIMU_ORDER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_SIMU_ORDER" (vi_type         in number,  --1 产品类 2 非产品类
                                               vi_crm_id         in varchar2,
                                               vi_create_dts     in timestamp,
                                               vi_finish_dts     in timestamp,
                                               vi_prod_code      in varchar2,
                                               vi_prod_name      in varchar2,
                                               vi_accept_dept    in varchar2,
                                               vi_cust_id        in varchar2,
                                               vi_cust_name      in varchar2,
                                               vi_cust_cont      in varchar2,
                                               vi_cust_cont_tel  in varchar2,
                                               vi_cust_mgr       in varchar2,
                                               vi_cust_mgr_tel   in varchar2,
                                               vi_cust_demand    in varchar2,
                                               ivk_code          out NUMBER,
                                               ivk_desc          out varchar2) is

v_serial_no     varchar2(50);
v_curr_time     varchar2(20);
v_count         number;
v_ordid         varchar2(50);
v_count1d       number;
v_prodname      varchar2(200);


begin
  ivk_code := 0;
  --返回码注释：
  --成功0；失败非0
  --100业务逻辑违例
  --200表操作错


  --输入参数检验
  if vi_cust_name is null or vi_prod_code is null
  then
    ivk_code := 100;
    ivk_desc := '客户名、产品名不能为空!';
    RETURN;
  end if;

  if vi_type = '1'--非wop建单
  then
  --剔重
  select count(*) into v_count from wf_simu_ord
  where cust_name=vi_cust_name and prod_code=vi_prod_code;

  if v_count > 0
  then
     ivk_desc := '剔重插入，成功！';
     return;
  end if;
  end if;

  --生成工单号
  begin
  select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;
  select WF_SIMU_ID.NEXTVAL into v_serial_no
       from dual;
  EXCEPTION
    WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := 'SN生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
      
  select count(*) into v_count1d from wf_simu_ord
  where to_char(create_date, 'yyyyMMdd')= to_char(vi_create_dts, 'yyyyMMdd');
  
  if v_count1d = 0
  then 
     v_count1d := 1;
  else
     v_count1d := v_count1d + 1;
  end if;
  
  if v_count1d < 10 
  then
     v_ordid := '00'||v_count1d;
  elsif v_count1d < 100
  then
     v_ordid := '0'||v_count1d;  
  else
     v_ordid := v_count1d; 
  end if;

  v_ordid := 'SHSH'||to_char(vi_create_dts, 'yyMMdd')||v_ordid||'20';

  if vi_type = '1'--非wop建单
  then
  begin
    select t.buz_val into v_prodname 
           from wf_business_config t 
           where t.buz_type ='PROD_MAP' and t.buz_id = vi_prod_code;
     EXCEPTION
      WHEN OTHERS THEN
      v_prodname := 'nm-'|| vi_prod_name;
    end;
  else
    v_prodname := vi_prod_name;
  end if;
    

  --虚拟单 状态100
  BEGIN
    INSERT INTO WF_SIMU_ORD
     (SN,
      TYPE,
      BAT_NO,
      IMP_DTS,
      PROC_STA,
      ORD_ID,
      CRM_ID,
      CREATE_DATE,
      FINISH_DATE,
      PROD_CODE,
      PROD_NAME,
      ACCEPT_DEPT,
      CUST_ID,
      CUST_NAME,
      CUST_CONT,
      CUST_CONT_TEL,
      CUST_MGR,
      CUST_MGR_TEL,
      CUST_DEMAND)
    VALUES
      (v_serial_no,
       vi_type,
       v_curr_time,
       sysdate,
       1,
       v_ordid,
       vi_crm_id,
       vi_create_dts,
       vi_finish_dts,
       vi_prod_code,
       v_prodname,
       vi_accept_dept,
       vi_cust_id,
       vi_cust_name,
       vi_cust_cont,
       vi_cust_cont_tel,
       vi_cust_mgr,
       vi_cust_mgr_tel,
       vi_cust_demand
       );
       COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := 'WF_SIMU_ORD--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;

end CREATE_SIMU_ORDER;
/

-- ----------------------------
-- Procedure structure for CREATE_USR_EVA
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_USR_EVA" (  vi_sta_dt   in varchar2,
                                              vi_end_dt      in varchar2,
                                              vi_st          in varchar2,
                                              ivk_code       out number,
                                              ivk_desc       out varchar2) is
    rowcnt     number(10);
    mesn       number(10);
begin
    ivk_code := 0;
    ivk_desc := '';
    rowcnt := 0;
    begin
     select max(ESN) into mesn from WF_USR_EVA;
      EXCEPTION
        WHEN OTHERS THEN
        mesn := 0;  
    end;
    if mesn is null then
      mesn := 0; 
    end if;
    
    FOR cm
    IN (
        select t.usr_id, count(*) from wf_eva_member t where t.role = '0'
        and t.beid in (
        select i.beid from wf_eva_item i
        where to_char(i.start_dts,'yyyyMMdd') >= vi_sta_dt
        and  to_char(i.start_dts,'yyyyMMdd') <= vi_end_dt
        and i.sys_source = vi_st
        ) group by t.usr_id
    )
    LOOP

       FOR em
       IN (
        select m.usr_id, count(distinct(beid)) ct,sum(m.eval) sv,max(m.role) rid from wf_eva_member m
        where m.role <> '0' and  m.beid in (
        select t.beid from wf_eva_member t where t.usr_id = cm.usr_id
        and t.beid in (
        select i.beid from wf_eva_item i
        where to_char(i.start_dts,'yyyyMMdd') >= vi_sta_dt
        and  to_char(i.start_dts,'yyyyMMdd') <= vi_end_dt
        and i.sys_source = vi_st
        )
        )group by m.usr_id
       )
       LOOP
       rowcnt := rowcnt + 1;
       begin --获取时段内客户经理相关的评价人
        insert into WF_USR_EVA (
        ESN, USR_ID, ROLE_ID, GEN_DTA, EVA_DTS, EVA_USR_ID,
        EVA_REMARK, EVA_MAIN, EVA_ITEM1, EVA_ITEM2, EVA_ITEM3, EVA_ITEM4, EVA_ITEM5, MAIN_LEV,
        ITEM1_LEV, ITEM2_LEV, ITEM3_LEV, ITEM4_LEV, ITEM5_LEV, STATE, EVA_DUR, EVA_REF, EVA_SUM)
        values
        ( rowcnt + mesn,
         em.usr_id,
         em.rid,
         sysdate,
         null,
         cm.usr_id,
         null,
         '0', '1', '2', '-1', '-1', '-1',
         0, 0, 0, 0, 0, 0,
         0,
         vi_sta_dt||'-'||vi_end_dt,
         em.sv,
         em.ct);
         commit;
        EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('插WF_USR_EVA出错:' || em.usr_id || '-' || cm.usr_id|| '--' || SQLERRM);
       end;
      end Loop;
    end LOOP;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(rowcnt) || ' rows inserted!');
    ivk_desc := 'usr-eva gen:'||rowcnt;

end CREATE_USR_EVA;
/

-- ----------------------------
-- Procedure structure for CREATE_VIRTUAL_ORDER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."CREATE_VIRTUAL_ORDER" (vi_inv_serial_no  in varchar2,
                                               vi_p6_order_id    in varchar2,
                                               vi_p6_order_ver   in number,
                                               vi_crm_order_id   in varchar2,
                                               vi_crm_order_ver  in number,
                                               vi_service_type   in varchar2,
                                               vi_plane_type      in varchar2,
                                               vi_order_type      in number,
                                               vi_action_type    in varchar2,
                                               vi_order_context  in varchar2,
                                               vi_bureau_id      in varchar2,
                                               vi_subbureau_id    in varchar2,
                                               vi_site_id        in varchar2,
                                               vi_user_id        in varchar2,
                                               vi_param0          in varchar2,
                                               vi_param1          in varchar2,
                                               vi_param2          in varchar2,
                                               vi_param3          in varchar2,
                                               vi_param4          in varchar2,
                                               vo_wop_serial_no        out varchar2,
                                               vo_wop_order_id         out varchar2,
                                               ivk_code                out NUMBER,
                                               ivk_desc                out varchar2) is

v_serial_no     varchar2(50);
v_curr_time     varchar2(20);
v_ctx           varchar2(4000);


begin
  ivk_code := 0;
  --返回码注释：
  --成功0；失败非0
  --100业务逻辑违例
  --200表操作错
  --300校验错

  --输入参数检验
  if vi_order_type is null then
    ivk_code := 300;
    ivk_desc := 'order_type不能为null!';
    RETURN;
  end if;
  if vi_order_type <> 3 and vi_action_type is null then
    ivk_code := 300;
    ivk_desc := 'action_type不能为null!';
    RETURN;
  end if;

  --生成工单号
  begin
  select to_char(sysdate,'yyyyMMddHH24miss')
     into v_curr_time from dual;
  select LPAD(TO_CHAR(SEQ_VIRTUAL_NO.NEXTVAL),10,'0') into v_serial_no
       from dual;
       vo_wop_order_id :=  'VO' || v_serial_no;
  EXCEPTION
    WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '工单号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
  --生成工单流水
  vo_wop_serial_no :=  v_serial_no||'T'|| v_curr_time;
  
  if vi_service_type <> 'GP_INTF' then
     v_ctx := vi_order_context;
  end if; 


  --虚拟单 状态100
  BEGIN
    INSERT INTO WP_ORDER
     (WOP_SERIAL_NO,
       INV_SERIAL_NO,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      P6_ORDER_ID,
      P6_ORDER_VER,
      CRM_ORDER_ID,
      CRM_ORDER_VER,
      SERVICE_TYPE,
      PLANE_TYPE,
      ORDER_TYPE,
      ACTION_TYPE,
      ORDER_CONTEXT,
      RECEIVE_DTS,
      UPDATE_DTS,
      COMPLETE_DTS,
      STATUS,
      SCHEDULE_DTS,
      REQUEST_DTS,
      RESPONSE_DTS,
      PROC_FLAG,
      PROC_COMMENT,
      BUREAU_ID,
      SUB_BUREAU_ID,
      SITE_ID,
      USER_ID,
      PARAM_KEY0,
      PARAM_KEY1,
      PARAM_KEY2,
      PARAM_KEY3,
      PARAM_KEY4,
      PAYLOAD)
    VALUES
      (vo_wop_serial_no,
       vi_inv_serial_no,
       vo_wop_order_id,
       1,
       vi_p6_order_id,
       vi_p6_order_ver,
       vi_crm_order_id,
       vi_crm_order_ver,
       vi_service_type,
       vi_plane_type,
       vi_order_type,
       vi_action_type,
       v_ctx,
       sysdate,
       null,
       null,
       100,
       null,
       null,
       null,
       '00',
       null,
       vi_bureau_id,
       vi_subbureau_id,
       vi_site_id,
       vi_user_id,
       vi_param0,
       vi_param1,
       vi_param2,
       vi_param3,
       vi_param4,
       vi_order_context
       );
       COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 203;
      ivk_desc := '插WP_ORDER表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;
--catch other exception
EXCEPTION
  WHEN OTHERS THEN
    ivk_code := SQLCODE;
    ivk_desc := '其他错误!' || SUBSTR(SQLERRM, 1, 50);

end CREATE_VIRTUAL_ORDER;
/

-- ----------------------------
-- Procedure structure for EVA_MAIL_NOTIFY
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."EVA_MAIL_NOTIFY" as
v_code number(3);
v_desc varchar(200);
ctx    varchar(2000);
title  varchar(200);
begin
ctx :=  '<html><head><meta http-equiv="content-type" content="text/html; charset=GB2312"><style>body { line-height: 1.5; }body { font-size: 16pt; font-family: 华文楷体; color: rgb(0, 0, 0); line-height: 1.5; }</style></head><body>
<div><span></span> >政企部销售支撑评价单（半年度）已到达，请您在9月12日前及时进OA系统，为您的交付中心支撑人员评价评星。</div>
<div> >>操作路径：OA系统——>快速通道（OA首页左下角—更多）——>政企全业务支撑应用—>交付评价—>待评价</div>
<div>说明：</div>
<div> 1、所有评价为匿名，请中肯评价；</div>
<div> 2、请为系统内显示的所有交付中心支撑人员进行评价，涉及支撑为2019年1－6月，详见系统信息； </div>
<div> 3、客户端浏览器建议使用IE11以上版本或者360浏览器(极速模式)或者Chrome浏览器。如不能正常浏览请升级或切换浏览器。</div>
<div/>
<div>      感谢配合！</div>
<div>      政企部销售评价项目组</div>
</body></html>';
title := '政企部销售支撑评价单（半年度）已到达，请您及时进OA系统评价';
begin

FOR ord IN (
               select distinct(eva_usr_id) euid from wf_usr_eva t where t.state = 0
           )
           LOOP
           BEGIN
               WF_NOTIFY_PKG.CREATE_NOTIFY_EVENT(1000,1,1,1,1,3,ord.euid||'.sh@chinatelecom.cn',ctx, 0, null, title,v_code,v_desc);
              -- WF_NOTIFY_PKG.CREATE_NOTIFY_EVENT(1000,1,1,1,1,3,'sunyuanlong@sanss.com',ctx, 0, null, title,v_code,v_desc);
               DBMS_OUTPUT.PUT_LINE(v_code || ':' || v_desc);
           END;
           END LOOP;

end;
end EVA_MAIL_NOTIFY;
/

-- ----------------------------
-- Procedure structure for EVALUATE_ITEM_MEMBER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."EVALUATE_ITEM_MEMBER" (  vi_sta_dt   in varchar2,
                                              vi_end_dt      in varchar2,
                                              vi_ss          in varchar2,
                                              vi_st          in varchar2,
                                              ivk_code       out number,
                                              ivk_desc       out varchar2) is
    rowcnt     number(10);
    weight     float;
    score      float;
    cnum       integer;
    vfo        number;
    vfm        number;
begin
    ivk_code := 0;
    ivk_desc := '';
    rowcnt := 0;

    FOR item
    IN (
        select t.beid,t.flow_type,t.area_type,t.prod_type,t.prod_rate,t.buz_prop,t.cons_flag,t.fee_once,t.fee_month
        from WF_EVA_ITEM t
        where to_char(t.start_dts,'yyyyMMdd') >= vi_sta_dt and  to_char(t.start_dts,'yyyyMMdd') <= vi_end_dt
        and t.sys_source = vi_st
           )
    LOOP
      score := 0;
      begin --计算项目区域权值
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'AREA_TYPE' and c.eva_index = item.area_type;
        EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('查AREA_TYPE出错--' || item.area_type || '--' || SQLERRM);
          weight := 1;
      end;
      score := score+weight;
      begin --计算项目产品权值
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'PROD_TYPE' and c.eva_index = item.prod_type;
        EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('查PROD_TYPE出错--' || item.prod_type || '--' || SQLERRM);
          weight := 1;
      end;
      score := score+weight;
      begin --计算项目速率权值
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'PROD_RATE' and c.eva_index = item.prod_rate;
        EXCEPTION
        WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('查PROD_RATE出错--' || item.prod_rate || '--' || SQLERRM);
         weight := 1;
      end;
      score := score+weight;
      begin --计算项目属性权值
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'BUZ_PROP' and c.eva_index = item.buz_prop;
        EXCEPTION
        WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('查BUZ_PROP出错--' || item.buz_prop || '--' || SQLERRM);
         weight := 1;
      end;
      score := score+weight;
      
      --根据是否工程计算权重
      begin 
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'CONS_FLAG' and c.eva_index = item.cons_flag;
        EXCEPTION
        WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('查CONS_FLAG出错--' || item.prod_rate || '--' || SQLERRM);
         weight := 1;
      end;
      score := score+weight;
      
      --begin --计算是否有工程经理判定工程权重
      --  select count(*) into cnum from WF_EVA_MEMBER m
      --  where m.beid = item.beid and m.role = '3';
      --  EXCEPTION
      --  WHEN OTHERS THEN
      --   DBMS_OUTPUT.PUT_LINE('查IS_CONTS出错--' || item.beid || '--' || SQLERRM);
      --  cnum := 0;
      --end;
      --if cnum >= 1 then
      --   score := score+1.5;
      --end if;
      
      begin --计算项目基准值
        select c.eva_weight into weight from WF_EVA_CFG c
        where c.serv_source = vi_ss and c.serv_type = vi_st
        and c.dimention = 'FLOW_TYPE' and c.eva_index = item.flow_type;
        EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('查FLOW_TYPE出错--' || item.flow_type || '--' || SQLERRM);
          weight := 1;
      end;
      score := score*weight;

      BEGIN
        update WF_EVA_ITEM set EVAL = score, PROC_DTS=sysdate where BEID = item.beid;
        commit;
        EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('更新WF_EVA_ITEM表出错--' || SQLCODE || '--' || SQLERRM);
      END;
      
      rowcnt := rowcnt + 1;
      
      --计算项目收入
      vfo:= 0;
      vfm:= 0;
      if item.buz_prop = '新装' then
         if item.fee_once is not null then
            vfo:= item.fee_once;
         end if;
         if item.fee_month is not null then
            vfm:= item.fee_month;
         end if;
      end if;
      
      --获取用户做角色权重设置
      FOR memb
      IN (
        select t.usr_id,t.role
        from WF_EVA_MEMBER t
        where t.beid = item.beid
           )
      LOOP
        begin --计算项目基准值
          select c.eva_weight into weight from WF_EVA_CFG c
          where c.serv_source = vi_ss and c.serv_type = vi_st
          and c.dimention = 'FLOW_ROLE' and c.eva_index = item.flow_type||memb.role;
          EXCEPTION
          WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('查FLOW_ROLE出错--' || item.flow_type || memb.role || SQLERRM);
            weight := 1;
        end;
        
        BEGIN
          update WF_EVA_MEMBER set EVAL=score*weight, IVAL=vfo+vfm*12 where BEID = item.beid and USR_ID = MEMB.usr_id and ROLE= MEMB.role;
          commit;
          EXCEPTION
          WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('更新WF_EVA_MEMBER表出错--' || SQLCODE || '--' || SQLERRM);
        END;
      end LOOP;

    end LOOP;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(rowcnt) || ' rows inserted!');
    ivk_desc := 'update-count:'||rowcnt;


end EVALUATE_ITEM_MEMBER;
/

-- ----------------------------
-- Procedure structure for FETCH_NOTIFY_TIME
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."FETCH_NOTIFY_TIME"(vi_disp_order_no  in varchar2,
                                              vi_prod_inst_id   in varchar2,
                                              vo_cust_order_id   out varchar2,
                                              vo_rec_dts        out date,
                                              vo_req_dts        out date,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
begin
     ivk_code := 0;
     --校验输入
     if  vi_disp_order_no is null or vi_prod_inst_id is null 
     then
         ivk_code := 300;
         ivk_desc := '调单编号或产品实例标识不能为空!';
         RETURN;
     end if;
     begin
       select PROV_ORDER_ID,
             PROCESS_DTS,
             UPDATE_DTS
        into vo_cust_order_id,
             vo_rec_dts,
             vo_req_dts
        from(
              select PROV_ORDER_ID,
                     PROCESS_DTS,
                     UPDATE_DTS
                from WP_REPORT
               where CRM_ORDER_ID = vi_disp_order_no
               and REFERENCE_NO = vi_prod_inst_id
               order by PROCESS_DTS desc
               )
        where rownum <=1;
      exception
      when others then
        begin
           select PROV_ORDER_ID,
             PROCESS_DTS,
             UPDATE_DTS
             into vo_cust_order_id,
             vo_rec_dts,
             vo_req_dts
           from(
              select PROV_ORDER_ID,
                     PROCESS_DTS,
                     UPDATE_DTS
                from WP_REPORT
               where REFERENCE_VAL = vi_disp_order_no
               and REFERENCE_NO = vi_prod_inst_id
               order by PROCESS_DTS desc
               )
           where rownum <=1;
        exception
        when others then
        ivk_code := 100;
        ivk_desc := '没有找到工单流水！';
        return;
        end;
        
    end;
  
end FETCH_NOTIFY_TIME;
/

-- ----------------------------
-- Procedure structure for FETCH_NOTIFY_ZZSTA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."FETCH_NOTIFY_ZZSTA"(vi_crm_id   in varchar2,
                                              vi_prov_id   in varchar2,
                                              vi_disp_id   out varchar2,
                                              vo_stage     out varchar2,
                                              vo_status    out varchar2,
                                              ivk_code     out number,
                                              ivk_desc     out varchar2) is
begin
     ivk_code := 0;
     --校验输入
     if  vi_crm_id is null or vi_prov_id is null
     then
         ivk_code := 300;
         ivk_desc := 'Porv或CRM ID不能为空!';
         RETURN;
     end if;
     begin
      select ACTION_CODE,
             SUB_ACTION_CODE
        into vo_stage,
             vo_status
        from (select * from WP_REPORT
             where CRM_ORDER_ID = vi_crm_id
             and PROV_ORDER_ID = vi_prov_id
             and PROV_TASK = 'GP_ZZ_STATUS'
             order by CREATE_DTS desc)
        where rownum <=1 ORDER BY rownum;

    exception
      when others then
        ivk_code := 100;
        ivk_desc := '没有找到工单流水！';
        return;
    end;

end FETCH_NOTIFY_ZZSTA;
/

-- ----------------------------
-- Procedure structure for FETCH_ORDER_RESULT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."FETCH_ORDER_RESULT" (vi_wop_serial_no  in WOPDB.WP_P6_REQ.WOP_SERIAL_NO%TYPE,
                                              vo_print_no      out WOPDB.WP_P6_REQ.WOP_PRINT_NO%TYPE,
                                              vo_p6_order_id   out WOPDB.WP_P6_REQ.P6_ORDER_ID%TYPE,
                                              vo_p6_order_ver  out WOPDB.WP_P6_REQ.P6_ORDER_VER%TYPE,
                                              vo_crmorder_id   out WOPDB.WP_P6_REQ.CRM_ORDER_ID%TYPE,
                                              vo_crmorder_ver  out WOPDB.WP_P6_REQ.CRM_ORDER_VER%TYPE,
                                              vo_wop_result    out WOPDB.WP_P6_REQ.WOP_RETURN%TYPE,
                                              vo_wop_reason    out WOPDB.WP_P6_REQ.WOP_REASON%TYPE,
                                              vo_work_content  out WOPDB.WP_P6_REQ.P6_RET_CONTENT%TYPE,
                                              vo_complete_dts  out WOPDB.WP_P6_REQ.COMPLETE_DTS%TYPE,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
begin
     ivk_code := 0;
     --校验输入
     if  vi_wop_serial_no is null then
         ivk_code := 300;
         ivk_desc := '工单流水不能为null!';
         RETURN;
     end if;
     begin
      select WOP_PRINT_NO,
             P6_ORDER_ID,
             P6_ORDER_VER,
             CRM_ORDER_ID,
             CRM_ORDER_VER,
             WOP_RETURN,
             WOP_REASON,
             P6_RET_CONTENT,
             COMPLETE_DTS
        into vo_print_no,
             vo_p6_order_id,
             vo_p6_order_ver,
             vo_crmorder_id,
             vo_crmorder_ver,
             vo_wop_result,
             vo_wop_reason,
             vo_work_content,
             vo_complete_dts
        from WP_P6_REQ
       where WOP_SERIAL_NO = vi_wop_serial_no;
    exception
      when others then
        ivk_code := 100;
        ivk_desc := '没有找到工单流水！';
        return;
      
      UPDATE WP_P6_REQ
      SET
      PROCESS_STATUS = 110,
      UPDATE_DTS = sysdate
      WHERE WOP_SERIAL_NO = vi_wop_serial_no ;
      
    end;


end FETCH_ORDER_RESULT;

 
/

-- ----------------------------
-- Procedure structure for FETCH_ORDER_RESULT_CDMA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."FETCH_ORDER_RESULT_CDMA"(vi_wop_serial_no  in WOPDB.WP_P6_REQ.WOP_SERIAL_NO%TYPE,
                                              vo_print_no      out WOPDB.WP_P6_REQ.WOP_PRINT_NO%TYPE,
                                              vo_p6_order_id   out WOPDB.WP_P6_REQ.P6_ORDER_ID%TYPE,
                                              vo_p6_order_ver  out WOPDB.WP_P6_REQ.P6_ORDER_VER%TYPE,
                                              vo_crmorder_id   out WOPDB.WP_P6_REQ.CRM_ORDER_ID%TYPE,
                                              vo_crmorder_ver  out WOPDB.WP_P6_REQ.CRM_ORDER_VER%TYPE,
                                              vo_wop_result    out WOPDB.WP_P6_REQ.WOP_RETURN%TYPE,
                                              vo_wop_reason    out WOPDB.WP_P6_REQ.WOP_REASON%TYPE,
                                              vo_work_content  out varchar2,
                                              vo_complete_dts  out WOPDB.WP_P6_REQ.COMPLETE_DTS%TYPE,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
begin
     ivk_code := 0;
     --校验输入
     if  vi_wop_serial_no is null then
         ivk_code := 300;
         ivk_desc := '工单流水不能为null!';
         RETURN;
     end if;
     begin
      select WOP_PRINT_NO,
             P6_ORDER_ID,
             P6_ORDER_VER,
             CRM_ORDER_ID,
             CRM_ORDER_VER,
             WOP_RETURN,
             WOP_REASON,
             P6_RET_CONTENT,
             COMPLETE_DTS
        into vo_print_no,
             vo_p6_order_id,
             vo_p6_order_ver,
             vo_crmorder_id,
             vo_crmorder_ver,
             vo_wop_result,
             vo_wop_reason,
             vo_work_content,
             vo_complete_dts
        from WP_P6_REQ
       where WOP_SERIAL_NO = vi_wop_serial_no;
    exception
      when others then
        ivk_code := 100;
        ivk_desc := '没有找到工单流水！';
        return;
    end;


end FETCH_ORDER_RESULT_CDMA;
/

-- ----------------------------
-- Procedure structure for FETCH_PURGE_ORDER
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."FETCH_PURGE_ORDER"(
                            vi_prod_name varchar2,
                            vi_last_day number,
                            purge_num  OUT NUMBER,
                            purge_desc OUT VARCHAR2)
is
        v_serial_no number;
        v_count number;

begin
  purge_num :=0;
  purge_desc := '';
  BEGIN
          FOR ord IN(
             select oof.namespace_mnemonic as ns,
                    oof.order_seq_id as pid,
                    oof.version as pver,
                    oof.reference_number as cid,
                    oof.crm_product_name as prod,
                    oof.device_value as dev,
                    oof.action_code as actc,
                    oof.sub_action_code as sactc,
                    oof.task_description as task,
                    oof.bureau as bureau,
                    oof.sub_bureau as sbureau,
                    oof.ord_start_date as sdts
              from  nophs_cacl_om_order_flow  oof
              where
                    oof.crm_product_name = vi_prod_name
                    and oof.ord_start_date < sysdate - vi_last_day
                    and oof.action_code = 'Z'
                    and oof.order_seq_id not in (
                                   select PROV_ORDER_ID
                                   from wp_report
                                   where
                                   NAME_SPACE = 'prov_purge'
                                     )
          )
          LOOP
              select SEQ_REPORT_NO.NEXTVAL into v_serial_no
                 from dual;

              INSERT INTO WP_REPORT
              (REP_SN,
              NAME_SPACE,
              SOURCE_TYPE,
              PROV_ORDER_ID,
              PROV_ORDER_VER,
              CRM_ORDER_ID,
              CRM_ORDER_VER,
              REFERENCE_NO,
              REFERENCE_VAL,
              ORDER_TYPE,
              ACTION_CODE,
              SUB_ACTION_CODE,
              PROV_TASK,
              CREATE_DTS,
              PROCESS_DTS,
              UPDATE_DTS,
              COMPLETE_DTS,
              STATUS,
              PROCESS_STATUS,
              PROCESS_COMMENT,
              REMARK0,
              REMARK1,
              REMARK2,
              REMARK3,
              REMARK4,
              REMARK5
              )
              VALUES
              (v_serial_no,
              'prov_purge',
              ord.ns,
              ord.pid,
              ord.pver,
              ord.cid,
              1,
              ord.prod,
              ord.dev,
              1,
              ord.actc,
              ord.sactc,
              ord.task,
              sysdate,
              null,
              null,
              ord.sdts,
              100,
              0,
              null,
              ord.bureau,
              ord.sbureau,
              null,
              null,
              null,
              null
              );

              commit;

              purge_num := purge_num + SQL%ROWCOUNT;

          end LOOP;


  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      purge_num := -1;
      purge_desc := 'FETCH_PURGE_ORDER出错:' || SQLCODE || '--' || SQLERRM;
      RETURN;
  END;

  DBMS_OUTPUT.PUT_LINE(TO_CHAR(purge_num) || ' rows inserted into wp_report');
end FETCH_PURGE_ORDER;
/

-- ----------------------------
-- Procedure structure for FR_CNOPM_AUDIT
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."FR_CNOPM_AUDIT"(
a_fo_id              IN NUMBER,
a_fo_sn              IN NUMBER
)is
v_feasible    varchar2(10);
v_doer        varchar2(10);
begin

           BEGIN
           SELECT VALUE into v_feasible
              FROM WF_ORD_SNAP
              WHERE FO_ID = a_fo_id
              and FO_SN = a_fo_sn
              and DATA_ID = 1119
              and INST_ID = 0;

            if v_feasible = '1'
            then
              return;
            end if;

            SELECT r.remark_val into v_doer
              FROM WF_ORD_REMARK r
              WHERE r.fo_id = a_fo_id
              and r.Fo_Sn = a_fo_sn
              and r.remark_key = 'dispatch_pm';

            WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, 74,'doer',v_doer, 'CN_OPM_CONST','COMM_CONST');
            WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, 74,'dept_no','网发', 'CN_OPM_CONST','COMM_CONST');
            END;


end FR_CNOPM_AUDIT;
/

-- ----------------------------
-- Procedure structure for IBP_ATM_FTPDONE
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."IBP_ATM_FTPDONE"(stateid in CHAR)
as

--1：正在处理
--2：发送成功
--3：接收成功

BEGIN

update WP_ATM_INTF set PROC_FLAG=stateid where  PROC_FLAG='1';
commit;


end IBP_ATM_FTPDONE;

/

-- ----------------------------
-- Procedure structure for IBP_ATM_FTPPRO_INFO
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."IBP_ATM_FTPPRO_INFO"(p_CURSOR out IBP_ATM_FTP.f_ATM_CURSOR)
as

BEGIN

--对于读取的工单，置1，正在处理FTP
update WP_ATM_INTF set PROC_FLAG='1' where PROC_FLAG='0' and PROC_TYPE='0';
commit;

OPEN p_CURSOR FOR select * from WP_ATM_INTF where PROC_FLAG='1' order by PROC_SN;

end IBP_ATM_FTPPRO_INFO;

/

-- ----------------------------
-- Procedure structure for IBP_ATM_FTPPRO_UNCOMPLETED
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."IBP_ATM_FTPPRO_UNCOMPLETED"(p_CURSOR out IBP_ATM_FTP.f_ATM_CURSOR)
as

BEGIN

--对于读取的工单，置1，正在处理FTP
update WP_ATM_INTF set PROC_FLAG='1' where PROC_FLAG='0' and PROC_TYPE='1' and (ORDER_TYPE in ('PVC','PORT'));
commit;

OPEN p_CURSOR FOR select * from WP_ATM_INTF where PROC_FLAG='1' order by ORDER_NO;

end IBP_ATM_FTPPRO_UNCOMPLETED;

/

-- ----------------------------
-- Procedure structure for IBP_MONITOR_ANALYSE_WOP
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."IBP_MONITOR_ANALYSE_WOP"(WOP_SERIALNUMBER  in varchar2,
                                              WOP_STATE               out number,
                                              WOP_MEMO                out varchar2,
                                              WOP_RECEIVETIME         out date,
                                              WOP_COMPLETETIME        out date,
                                              NERR                    out number,
                                              SERR                    out varchar2) is
    v_process   varchar2(2);
    v_status    number;
    v_owner     varchar2(100);
begin
    NERR := 0;
    --查询原参数
     BEGIN
      select
      STATUS,
      PROCESS_FLAG,
      RECEIVE_DTS,
      COMPLETE_DTS,
      REMARK7
      into
      WOP_STATE,
      v_process,
      WOP_RECEIVETIME,
      WOP_COMPLETETIME,
      v_owner
      from WP_SRQ
      where WOP_SERIAL_NO = WOP_SERIALNUMBER ;
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WOP_STATE := -1;
        WOP_MEMO := '工单未找到或未接收';
        RETURN;
    END;
    if WOP_STATE = 101 or WOP_STATE = 102
    then
        WOP_MEMO := '工单已接收';
    elsif WOP_STATE = 104 and v_process ='02'
    then
        WOP_MEMO := '工单已打印派工或发送外线_操作员:'|| v_owner;
    elsif WOP_STATE = 104 and v_process ='0E'
    then
        WOP_MEMO := '工单发送外线，返回报错';
    elsif WOP_STATE = 105 and v_process ='11'
    then
        WOP_MEMO := '工单报竣成功_操作员:'|| v_owner;
    elsif WOP_STATE = 105 and (v_process ='1F' or v_process='1R')
    then
        WOP_MEMO := '工单报竣,P6返回报错_操作员:'|| v_owner;
    elsif WOP_STATE = 253 and v_process ='12'
    then
        WOP_MEMO := '工单退单,发送CRM成功_操作员:'|| v_owner;
    elsif
        WOP_STATE = 250 
    then
        WOP_MEMO := '工单待撤销';
    elsif
        WOP_STATE = 251
    then
        WOP_MEMO := '工单待修改';
    elsif
        WOP_STATE = 251
    then
        WOP_MEMO := '工单待修改';
    elsif
        WOP_STATE = 252
    then
        WOP_MEMO := '工单暂缓中_操作员:'|| v_owner;
    elsif
        WOP_STATE = 254
    then
        WOP_MEMO := '工单重派中_操作员:'|| v_owner;
    else
        WOP_MEMO := '工单处理状态'|| v_process||'_操作员:'|| v_owner;
    end if;
    
end IBP_MONITOR_ANALYSE_WOP;
/

-- ----------------------------
-- Procedure structure for MAINT_RETURN_ORDER
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."MAINT_RETURN_ORDER"(vi_wop_order_id  in varchar,
                                               vi_prov_order_id  in varchar,
                                               vi_platform       in varchar,
                                               vi_operator       in varchar,
                                               vi_status         in varchar, --0 complete 1 failure 2 restore
                                               vi_reason         in varchar,
                                               ivk_code         out number,
                                               ivk_desc         out varchar2) is

v_serial_no     varchar2(50);
v_order_id      varchar2(50);
v_platform      varchar2(50);
v_status        number;
v_count         number;
v_pf            varchar2(10);
log_ret         number;
log_err        varchar(100);
PRAGMA AUTONOMOUS_TRANSACTION;
begin
     ivk_code := 0;
     --校验输入
     if  vi_wop_order_id is null and vi_prov_order_id is null then
         ivk_code := 100;
         ivk_desc := '工单\定单号不能为空!';
         RETURN;
     end if;
     if  (vi_wop_order_id is null) and (vi_prov_order_id is null or vi_platform is null or vi_status is null)
     then
         ivk_code := 100;
         ivk_desc := '定单号\平台\状态不能为空!';
         RETURN;
     end if;
     
     if vi_platform = '117' or vi_platform = '169'
     then
        begin
--           SELECT COUNT(*) into v_count FROM ASAP_WORKORDER_REQUEST@NONPHS_AA
--           WHERE PLATFORM = 'SHLR' AND ORDER_SEQ_ID = vi_prov_order_id;
           if v_count > 0
           then
              return;
           end if;
        end;
     end if;
     if vi_wop_order_id is not null
     then
     begin
      select WOP_ORDER_ID,
             WOP_SERIAL_NO,
             PLANE_TYPE,
             status
        into v_order_id,
             v_serial_no,
             v_platform,
             v_status
        from WP_SRQ
       where WOP_ORDER_ID = vi_wop_order_id;
       exception
       when others then
        ivk_code := 101;
        ivk_desc := '没有找到工单！';
        return;
      end;
     elsif vi_platform = '116,224,225' and substr(vi_prov_order_id, 1, 2)<>'WP' then --116客响建设回单-输入p6id
     begin
      ivk_desc := vi_prov_order_id;
      select WOP_ORDER_ID,
             WOP_SERIAL_NO,
             PLANE_TYPE,
             status
        into v_order_id,
             v_serial_no,
             v_platform,
             v_status
        from WP_SRQ
       where P6_ORDER_ID = vi_prov_order_id 
       and PLANE_TYPE = '116'
       and WORK_ID like '%'||vi_reason||'%';
       exception
       when others then
        ivk_code := 101;
        ivk_desc := '没有找到工单！';
       return;
     end;
     elsif vi_platform = '116,224,225' and substr(vi_prov_order_id, 1, 2)='WP' then--224 225区局建设、覆盖回单-输入wpid
     v_order_id := vi_prov_order_id;
      if vi_reason is not null then 
        begin
        select P6_ORDER_ID,
               WOP_SERIAL_NO,
               PLANE_TYPE,
               status
          into ivk_desc,--输出p6id
               v_serial_no,
               v_platform,
               v_status
          from WP_SRQ
         where WOP_ORDER_ID = vi_prov_order_id 
         and PLANE_TYPE in ('224','225')
         and WORK_ID like '%'||vi_reason||'%';
         exception
         when others then
          ivk_code := 101;
          ivk_desc := '没有找到工单！';
          return;
        end;
      else
        begin
        select P6_ORDER_ID,
               WOP_SERIAL_NO,
               PLANE_TYPE,
               status
          into ivk_desc,--输出p6id
               v_serial_no,
               v_platform,
               v_status
          from WP_SRQ
         where WOP_ORDER_ID = vi_prov_order_id 
         and PLANE_TYPE in ('224','225');
         exception
         when others then
          ivk_code := 101;
          ivk_desc := '没有找到工单！';
          return;
        end;
      end if; 
     else
     begin
      select WOP_ORDER_ID,
             WOP_SERIAL_NO,
             PLANE_TYPE,
             STATUS
        into v_order_id,
             v_serial_no,
             v_platform,
             v_status
        from WP_SRQ
       where P6_ORDER_ID = vi_prov_order_id and PLANE_TYPE = vi_platform;
       exception
       when others then
        ivk_code := 101;
        ivk_desc := '没有找到工单！';
        return;
      end;
     end if;

     if vi_status = '0' and v_status <> 105
     then v_status := 105;
     elsif vi_status = '1' and v_status <> 253
     then v_status := 253;
     elsif vi_status = '2' and v_status >= 104
     then v_status := 104;
     else
        ivk_code := 103;
        ivk_desc := '请勿重复调用！';
        return;
     end if;
     
     -- zz起单116平台无需回P6, ipran盲受理须判断关联单是否已全部解挂才返回成功=0
     v_pf := '09';
     if v_platform in ('224','225') then
       begin
           select count(*) into v_count from wp_srq t 
           where t.plane_type in ('188','224','225') 
           and t.p6_order_id = ivk_desc
           and t.status = 240;
         end;
         if v_count > 1 then
           ivk_code := 1;
         end if;
     elsif  v_platform = '116' then
        if vi_status = '2' then
           v_status := 105;
        end if;
        v_pf := '11';
     end if;

     if v_order_id is not null and v_serial_no is not null
     then
     begin
         update WP_P6_REQ SET WOP_RETURN = vi_status, COMPLETE_DTS = sysdate
         WHERE WOP_SERIAL_NO = v_serial_no;
         commit;
         update WP_SRQ set status = v_status, remark11 = vi_reason ,remark7 = vi_operator, process_flag = v_pf
         where WOP_ORDER_ID = v_order_id;
         commit;
      exception
       when others then
        ivk_code := 102;
        ivk_desc := '工单处理异常！';
        return;
      end;
     end if;

     create_order_log(v_order_id,0,v_serial_no,v_serial_no,v_status, 102,'maint_return',vi_operator, vi_reason, log_ret,log_err);

end MAINT_RETURN_ORDER;
/

-- ----------------------------
-- Procedure structure for ORDER_MAUAL_OPERATE
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."ORDER_MAUAL_OPERATE"(vi_wop_order_id  in WOPDB.WP_SRQ.WOP_ORDER_ID%TYPE,
                                              vi_wop_serial_no   in WOPDB.WP_SRQ.WOP_SERIAL_NO%TYPE,
                                              vi_operate_code  in  number,
                                              vi_operator      in  varchar2,
                                              vi_descript      in  varchar2,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
    v_operation     varchar2(150);
    v_operator      varchar2(50);
    v_status        number;
    v_prev_status   number;
    v_st_temp       number;
    v_oper_id       varchar2(50);
    v_curr_time     varchar2(20);
    v_curr_serial    varchar2(50);
    v_prev_serial    varchar2(50);
    v_order_ver      number;
    v_prev_procflag  varchar2(3);
    v_proc_flag      varchar2(3);
    v_return         varchar2(10);
    v_p6_oid         varchar2(50);
    v_comp_dts       date;
    v_disp_dts       date;
    v_prin_dts       date;
    v_pt             varchar2(10);
    --operate code define
    --14 order unlock 15 order lock(accept)
    --16 order process
    --20 order complete 21 order rollback
    --22 order archive
begin
    ivk_code := 0;
         if  vi_operate_code = 10
         then
         v_operation := '工单接收';
         v_status := 101;
         v_proc_flag := '00';
         elsif vi_operate_code = 15
         then
         v_operation := '工单派发';
         v_status := 102;
         v_proc_flag := '01';
         elsif vi_operate_code = 14
         then
         v_operation := '回退打印状态';
         v_status := 104;
         v_proc_flag := '05';  --mod 20161111
         elsif vi_operate_code = 16
         then
         v_operation := '工单打印';
         v_status := 104;
         v_proc_flag := '02';
         elsif vi_operate_code = 17 -- modify 121203
         then
         v_operation := '集团未完成反馈';
        -- v_status := 104;
         v_proc_flag := '07';
         elsif vi_operate_code = 18
         then
         v_operation := '施工调用失败';
         v_status := 104;
         v_proc_flag := '0E';
         elsif vi_operate_code = 19
         then
         v_operation := '施工P6调用失败';
         v_status := 104;
         v_proc_flag := '0F';
         elsif vi_operate_code = 20
         then
         v_operation := '工单回单';
         v_status := 105;
         v_proc_flag := '10';
         v_return := '0';
         elsif vi_operate_code = 21
         then
         v_operation := '工单退单';
         v_status := 253;
         v_proc_flag := '10';
         v_return := '1';
         elsif vi_operate_code = 210
         then
         v_operation := '退单恢复';
         v_status := 253;
         v_proc_flag := '00';
         elsif vi_operate_code = 22
         then
         v_operation := '工单归档/撤单';
         v_proc_flag := '20';
         elsif vi_operate_code = 23
         then
         v_operation := '施工暂缓';
         v_status := 252;
         v_proc_flag := '10';
         elsif vi_operate_code = 24
         then
         v_operation := '暂缓恢复';
         v_status := 252;
         v_proc_flag := '00';
         elsif vi_operate_code = 25
         then
         v_operation := '资源重派';
         v_status := 254;
         v_proc_flag := '11';
         elsif vi_operate_code = 251
         then
         v_operation := '局内资源重派';
         v_status := 254;
         v_proc_flag := '111';
         elsif vi_operate_code = 252
         then
         v_operation := '局外资源重派';
         v_status := 254;
         v_proc_flag := '112';
         elsif vi_operate_code = 253
         then
         v_operation := '局内换端口';
         v_status := 254;
         v_proc_flag := '113';
         elsif vi_operate_code = 254
         then
         v_operation := '协调挂起';
         v_status := 240;
         elsif vi_operate_code = 255 --modify 130607
         then
         v_operation := '协调退单';
         v_status := 241;
         elsif vi_operate_code = 26
         then
         v_operation := '追单确认';
         v_proc_flag := '10';
         elsif vi_operate_code = 261--modify 121203
         then
         v_operation := '协调解挂';
         v_status := 104;
         v_proc_flag := '02';
         elsif vi_operate_code = 27-- add 20120817
         then
         v_operation := '退单完工确认';
         v_status := 255;
         v_proc_flag := '09';
         elsif vi_operate_code = 30
         then
         v_operation := '立即回单';
         v_status := 105;
         v_proc_flag := '09';
         v_return := '0';
         elsif vi_operate_code = 31
         then
         v_operation := '立即退单';
         v_status := 253;
         v_proc_flag := '09';
         v_return := '1';
         elsif vi_operate_code = 32
         then
         v_operation := '关联退单';
         v_status := 253;
         v_proc_flag := '13';
         elsif vi_operate_code = 33--modify 121203
         then
         v_operation := '集团退单申请';
         v_status := 253;
         v_proc_flag := '07';
         elsif vi_operate_code = 301--modify 121217
         then
         v_operation := '集团报竣调通';
         v_status := 105;
         v_proc_flag := '07';
         else
         ivk_code := 300;
         ivk_desc := '未定义操作代码';
         RETURN;
         end if;

    --查询原参数
    BEGIN
      select
      STATUS,
      WOP_ORDER_VER,
      WOP_SERIAL_NO,
      PROCESS_FLAG,
      RECEIVE_DTS,
      UPDATE_DTS,
      COMPLETE_DTS,
      REMARK7,
      P6_ORDER_ID,
      PLANE_TYPE
      into
      v_prev_status,
      v_order_ver,
      v_curr_serial,
      v_prev_procflag,
      v_disp_dts,
      v_prin_dts,
      v_comp_dts,
      v_operator,
      v_p6_oid,
      v_pt
      from WP_SRQ
      where WOP_ORDER_ID = vi_wop_order_id ;
     EXCEPTION
      WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('查WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM);
    END;

    --version check
    if vi_operate_code < 20 and vi_wop_serial_no <> v_curr_serial
    then
       ivk_code := 100;
       ivk_desc := '定单已更新或已注销';
       RETURN;
    end if;
    --print oper check
    if vi_operate_code = 16 and v_prev_status <> 102 and v_prev_status <> 251 and v_prev_status <> 252 and v_prev_status <> 253
    then
       v_status := v_prev_status;
       v_proc_flag := v_prev_procflag;
    end if;
    --handle exception
    --if  v_prev_procflag = '0F'
    --then
    --    ivk_code := 100;
    --    ivk_desc := '定单系统处理异常';
    --    RETURN;
    --end if;
    --accept validation
    if vi_operate_code = 15  and v_status > 104
    then
       ivk_code := 100;
       ivk_desc := '定单处理中';
       RETURN;
    end if;
    --reassign validation
    if (vi_operate_code = 251 or vi_operate_code = 252 or vi_operate_code = 253) and v_prev_status = 254
    then
       ivk_desc := '定单已在重派中';
       RETURN;
    end if;
    if (vi_operate_code = 251 or vi_operate_code = 252 or vi_operate_code = 253) and v_prev_status <> 104
    then
       ivk_code := 100;
       ivk_desc := '定单处于非可重派状态';
       RETURN;
    end if;
    --kbp reassign suspend
    if (vi_operate_code = 254 )
    then
        v_proc_flag := v_prev_procflag;
    end if;
    --defer validation
    if (vi_operate_code = 23 and v_prev_status <> 104) --or (vi_operate_code = 24 and v_prev_status <> 252)
    then
       ivk_code := 100;
       ivk_desc := '定单处于非可暂缓/恢复状态';
       RETURN;
    end if;
    --cancel resume validation -OLD-if (v_prev_status <> 253 or (v_prev_status = 253 and v_prev_procflag <> '12' )) and vi_operate_code = 210
    if (v_prev_status <> 253) and vi_operate_code = 210
    then
       ivk_desc := '定单已作退单继续施工';
       RETURN;
    end if;
    --return validation
    --if (vi_operate_code = 30 or vi_operate_code = 31) and (v_prev_status = 254 and v_prev_status = 252)
    --then
    --   ivk_code := 100;
    --   ivk_desc := '定单处于非可回单状态';
    --   RETURN;
    --end if;
    --return validation
    --if vi_operate_code >= 20 and v_operator <> vi_operator
    --then
    --   ivk_code := 100;
    --   ivk_desc := '定单已被其他用户锁定';
    --   RETURN;
    --end if;
    --客保重复回单保护
    if vi_operate_code = 30 and v_prev_status = 105 and (v_prev_procflag = '11' or v_prev_procflag = '09') -- modify 121203
    then
        ivk_desc := '回单已成功，请勿重复回单';
        RETURN;
    end if;
    if vi_operate_code = 20 or vi_operate_code = 21 or vi_operate_code = 30 or vi_operate_code = 31
    then
       BEGIN
         select STATUS
         into
         v_st_temp
         from WP_SRQ
         where P6_ORDER_ID = v_p6_oid and PLANE_TYPE = '30' ;
       EXCEPTION
       WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('查WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM);
       END;
       if v_st_temp = 252
       then
          ivk_code := 100;
          ivk_desc := '关联外线工单施工暂缓，请稍后回单';
       RETURN;
       end if;
    end if;
    if vi_operate_code <> 10
    then
      if vi_operate_code = 22
      then
         v_status := v_prev_status;
      end if;

      if vi_operate_code = 20 or vi_operate_code = 21 or vi_operate_code = 30 or vi_operate_code = 31
      then
         v_comp_dts := sysdate;
      end if;

      if vi_operate_code = 15
      then
         v_disp_dts := sysdate;
      end if;

      if vi_operate_code = 16
      then
         v_prin_dts := sysdate;
      end if;

      if vi_operate_code = 26 and vi_operator <> 'wop' and (v_prev_status = 250 or v_prev_status = 253)--modify 12/09/27
      then
         v_status := 255;
         v_comp_dts := sysdate;
      end if;
      if vi_operate_code = 26 and vi_operator = 'wop' --modify 12/09/27
      then
         v_status := 250;
         v_comp_dts := sysdate;
      end if;
      if vi_operate_code = 26 and v_prev_status = 251
      then
         v_status := 102;
      end if;

      if v_status is null
      then
         v_status := v_prev_status;
      end if;

      BEGIN
        UPDATE WP_SRQ
        SET
        STATUS = v_status,
        PROCESS_FLAG = v_proc_flag,
        REMARK7 = vi_operator,
        RECEIVE_DTS = v_disp_dts,
        UPDATE_DTS = v_prin_dts,
        COMPLETE_DTS = v_comp_dts
        WHERE WOP_ORDER_ID = vi_wop_order_id ;
        commit;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          ivk_code := 203;
          ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
          RETURN;
      END;
    if vi_operate_code = 20 or vi_operate_code = 21 or vi_operate_code = 30 or vi_operate_code = 31
    then
       if v_pt = '162'   --mod 20161111
       then
          BEGIN
            UPDATE WP_P6_REQ
            SET
            WOP_RETURN = v_return,
            COMPLETE_DTS = sysdate,
            P6_RET_CONTENT = null
            WHERE WOP_SERIAL_NO = v_curr_serial ;
            commit;
          END;
       else
         BEGIN
            UPDATE WP_P6_REQ
            SET
            WOP_RETURN = v_return,
            COMPLETE_DTS = sysdate
            WHERE WOP_SERIAL_NO = v_curr_serial ;
            commit;
          END;
       end if;    
    
    end if;
    end if;
    --INSERT WP_ORDER_LOG
    begin
     select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;

     select to_char(SEQ_OPER_ID.NEXTVAL)
     into v_oper_id from dual;

     v_oper_id := v_curr_time || '-' || v_oper_id;

     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '日志序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;

    if vi_descript is not null
    then
       v_operation := vi_descript;
    end if;

    BEGIN
    INSERT INTO WP_ORDER_LOG
     (OPER_ID,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      CURR_SERIAL_NO,
      PREV_SERIAL_NO,
      CURR_STATE,
      PREV_STATE,
      OPER_TYPE,
      OPERATOR,
      OPERATION,
      OPER_DTS)
    VALUES
      (v_oper_id,
       vi_wop_order_id,
       v_order_ver,
       v_curr_serial,
       v_prev_serial,
       v_status,
       v_prev_status,
       '人工处理',
       vi_operator,
       v_operation,
       sysdate
       );
    commit;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('插WP_ORDER_LOG表出错--' || SQLCODE || '--' || SQLERRM);
    END;

end ORDER_MAUAL_OPERATE;
/

-- ----------------------------
-- Procedure structure for ORDER_SCHED_NOTIFY
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."ORDER_SCHED_NOTIFY" as
v_code number(3);
v_desc varchar(200);
begin

begin

FOR ord IN (
               select P6_ORDER_ID,REMARK4 from WP_SRQ
                      where PLANE_TYPE = '163' and STATUS < 104
           )
           LOOP
           BEGIN
               WF_NOTIFY_PKG.CREATE_NOTIFY_EVENT(1000,ord.p6_order_id,0,100,8,1,'sunyuanlong@sanss.com','('||ord.remark4||')95专线工单到达，请接单处理。', 0, null, '集团95专线工单',v_code,v_desc);
               DBMS_OUTPUT.PUT_LINE(v_code || ':' || v_desc);
           END;
           END LOOP;

end;
end ORDER_SCHED_NOTIFY;
/

-- ----------------------------
-- Procedure structure for PRVREQ_AMEND
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."PRVREQ_AMEND"(vi_wop_order_id  in WOPDB.Wp_Srq.WOP_ORDER_ID%TYPE,
                                              vi_curr_serial  in  WOPDB.Wp_Srq.WOP_SERIAL_NO%TYPE,
                                              vi_schedule_dts in  WOPDB.Wp_Srq.SCHEDULE_DTS%TYPE,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
    v_curr_time     varchar2(20);
    v_oper_id       varchar2(20);
    v_platform      varchar2(20);
    v_prev_serial    varchar2(50);
    v_prev_ver      number;
    v_curr_ver      number;
    v_set_status    number;
    v_prev_status   number;
    v_p6_ver        number;
    v_crm_ver       number;
begin
    ivk_code := 0;
    --查询原参数
    BEGIN
      select
      STATUS,
      WOP_ORDER_VER,
      WOP_SERIAL_NO,
      PLANE_TYPE
      into
      v_prev_status,
      v_prev_ver,
      v_prev_serial,
      v_platform
      from WP_SRQ
      where WOP_ORDER_ID = vi_wop_order_id ;
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 201;
        ivk_desc := '查询WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    --查询原参数
    BEGIN
      select
      P6_ORDER_VER,
      CRM_ORDER_VER
      into
      v_p6_ver,
      v_crm_ver
      from Wp_P6_Req
      where WOP_SERIAL_NO = vi_curr_serial ;
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 201;
        ivk_desc := '查询WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    v_curr_ver := v_prev_ver ;
    v_set_status := v_prev_status;
    --状态迁移逻辑:101 , 104/105/253-ver+1
    if v_set_status < 104
    then
       BEGIN
        UPDATE WP_SRQ
        SET
        WOP_ORDER_VER = v_prev_ver,
        P6_ORDER_VER = v_p6_ver,
        CRM_ORDER_VER = v_crm_ver,
        WOP_SERIAL_NO = vi_curr_serial,
        UPDATE_DTS = sysdate
        WHERE WOP_ORDER_ID = vi_wop_order_id ;
        commit;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          ivk_code := 203;
          ivk_desc := '更新WP_ORDER表出错--' || SQLCODE || '--' || SQLERRM;
          RETURN;
      END;
    --status=104/105/253/251/250
    else
    if v_prev_status = 104 or v_prev_status = 105 
          or  v_prev_status = 253 or  v_prev_status = 250 
          or  v_prev_status = 251 --or  v_prev_status = 252
          or  v_prev_status = 254
    then
    --更新当前流水，版本+1
        v_curr_ver := v_curr_ver + 1;
        v_set_status := 251;
        --if v_prev_status = 252 or  v_prev_status = 254
        --then 
        --   v_set_status := 104;
        --else
        --   v_set_status := 251;
    end if;
    
    --信网（完工确认）派发处理      
    if  v_platform = '93' or v_platform = '117' or v_platform = '118' or v_platform = '1' or v_platform = '169'
     then 
      v_set_status := 104;
    end if;
    --专线（DDN FR预审核，IPMAN录入, 专线完工信息）处理      
    if v_platform = '142' or v_platform = '148' or v_platform = '149' or v_platform = '151' or v_platform = '130' --or v_platform = '170'
     then 
      v_set_status := 104;
    end if;
    --集团互联（定单信息，单点报竣，全程调测）处理      
    if v_platform = '161' or v_platform = '159' or v_platform = '160' or v_platform = '162' or v_platform = '188'
     then 
       v_set_status := 104;
    end if;
    
        BEGIN
            UPDATE WP_SRQ
            SET
            STATUS = v_set_status,
            WOP_SERIAL_NO = vi_curr_serial,
            P6_ORDER_VER = v_p6_ver,
            CRM_ORDER_VER = v_crm_ver,
            WOP_ORDER_VER = v_curr_ver,
            UPDATE_DTS = sysdate
            WHERE WOP_ORDER_ID = vi_wop_order_id ;
             commit;
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
              RETURN;
          END;
     end if;
     --INSERT WP_ORDER_LOG
    begin
     select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;

     select to_char(SEQ_OPER_ID.NEXTVAL)
     into v_oper_id from dual;

     v_oper_id := v_curr_time || '-' || v_oper_id;

     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '日志序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;


    BEGIN
    INSERT INTO WP_ORDER_LOG
     (OPER_ID,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      CURR_SERIAL_NO,
      PREV_SERIAL_NO,
      CURR_STATE,
      PREV_STATE,
      OPER_TYPE,
      OPERATOR,
      OPERATION,
      OPER_DTS)
    VALUES
      (v_oper_id,
       vi_wop_order_id,
       v_curr_ver,
       vi_curr_serial,
       v_prev_serial,
       v_set_status,
       v_prev_status,
       '系统操作',
       'P6请求',
       '工单修定',
       sysdate
       );
       commit;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('插WP_ORDER_LOG表出错--' || SQLCODE || '--' || SQLERRM);
  END;

end PRVREQ_AMEND;
/

-- ----------------------------
-- Procedure structure for PRVREQ_CANCEL
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."PRVREQ_CANCEL"(vi_wop_order_id  in WOPDB.Wp_Srq.WOP_ORDER_ID%TYPE,
                                              vi_curr_serial  in  WOPDB.Wp_Srq.WOP_SERIAL_NO%TYPE,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
    v_curr_time     varchar2(20);
    v_oper_id       varchar2(20);
    v_prev_serial    varchar2(50);
    v_platform       varchar2(50);
    v_prev_ver      number;
    v_curr_ver      number;
    v_set_status    number;
    v_prev_status   number;
begin
    ivk_code := 0;
    --查询原参数
    BEGIN
      select
      STATUS,
      WOP_ORDER_VER,
      WOP_SERIAL_NO,
      PLANE_TYPE
      into
      v_prev_status,
      v_prev_ver,
      v_prev_serial,
      v_platform
      from WP_SRQ
      where WOP_ORDER_ID = vi_wop_order_id ;
     EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 201;
        ivk_desc := '查询WP_ORDER表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    v_curr_ver := v_prev_ver ;
    --状态迁移逻辑:101/102/252/253/254/240->255 , 104/105/250/251
    --ver+1
    if v_prev_status = 101 or v_prev_status = 102 or
       v_prev_status = 252 or v_prev_status = 253 or v_prev_status = 240 or
       v_prev_status = 254 or (v_prev_status = 104 and v_platform = '0')
    then
        v_set_status := 255;
    elsif
        (v_prev_status = 104 and v_platform <> '0') or v_prev_status = 105 or
        v_prev_status = 250 or v_prev_status = 251
    then
        v_set_status := 250;
    else
        v_set_status := 255;
    end if;
    
    --客保退单后撤销发送  施工挂起后撤销
    if  v_prev_status in (253,254,240) and 
        v_platform in ('30','111','116','132','133','134','135','137','138','139','140','141','143','155','167','177','178','180','184','185','186','199','200','208','209','214','219','221')
    then
        v_set_status := 250;
    end if;

    --完工确认撤销处理 ——已取消
    if v_set_status = 250 and  ( v_platform = '93' or v_platform = '117' or v_platform = '1')
    then
       v_set_status := 255;
    end if;

        BEGIN
            UPDATE WP_SRQ
            SET
            STATUS = v_set_status,
            --WOP_SERIAL_NO = vi_curr_serial,
            ORDER_TYPE = 3,
            UPDATE_DTS = sysdate
            WHERE WOP_ORDER_ID = vi_wop_order_id ;
            commit;
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              ivk_code := 203;
              ivk_desc := '更新WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM;
              RETURN;
          END;
     --INSERT WP_ORDER_LOG
    begin
     select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;

     select to_char(SEQ_OPER_ID.NEXTVAL)
     into v_oper_id from dual;

     v_oper_id := v_curr_time || '-' || v_oper_id;

     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '日志序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;


    BEGIN
    INSERT INTO WP_ORDER_LOG
     (OPER_ID,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      CURR_SERIAL_NO,
      PREV_SERIAL_NO,
      CURR_STATE,
      PREV_STATE,
      OPER_TYPE,
      OPERATOR,
      OPERATION,
      OPER_DTS)
    VALUES
      (v_oper_id,
       vi_wop_order_id,
       v_curr_ver,
       vi_curr_serial,
       v_prev_serial,
       v_set_status,
       v_prev_status,
       'P6请求',
       'wop',
       '工单撤销',
       sysdate
       );
     commit;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('插WP_ORDER_LOG表出错--' || SQLCODE || '--' || SQLERRM);
  END;

end PRVREQ_CANCEL;
/

-- ----------------------------
-- Procedure structure for PRVREQ_DISPATCH
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."PRVREQ_DISPATCH" (vi_wop_order_id  in WOPDB.Wp_Srq.WOP_ORDER_ID%TYPE,
                                              vi_operate_code  in  number,
                                              vi_operator      in  varchar2,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
    v_operation     varchar2(100);
    v_status        number;
    v_prev_status   number;
    v_oper_id       varchar2(50);
    v_curr_time     varchar2(20);
    v_curr_serial    varchar2(50);
    v_prev_serial    varchar2(50);
    v_order_ver      number;
    v_prev_procflag  varchar2(2);
    v_proc_flag      varchar2(2);
    v_return         varchar2(10);
    v_comp_dts       date;
    v_operator       varchar2(50);
    v_platform       varchar2(50);
    v_set_ver        number;       
begin 
    ivk_code := 0;  
         if  vi_operate_code = 10 
         then
         v_operation := '工单接收';
         v_status := 101;
         v_proc_flag := '00'; 
         elsif  vi_operate_code = 11 
         then
         v_operation := '工单派发';
         v_status := 102;
         v_proc_flag := '00';                                          
         elsif vi_operate_code = 15 
         then
         v_operation := '工单锁定';
         v_status := 104;
         v_proc_flag := '01';
         elsif vi_operate_code = 14 
         then
         v_operation := '工单解锁';
         v_status := 101;
         v_proc_flag := '00';
         elsif vi_operate_code = 16 
         then
         v_operation := '施工新派';
         v_status := 104;
         v_proc_flag := '02';
         elsif vi_operate_code = 17 
         then
         v_operation := '施工修订';
         v_status := 104;
         v_proc_flag := '02';
         elsif vi_operate_code = 18 
         then
         v_operation := '施工调用失败';
         v_status := 104;
         v_proc_flag := '0E';
         elsif vi_operate_code = 19 
         then
         v_operation := '施工P6调用失败';
         v_status := 104;
         v_proc_flag := '0F';
         elsif vi_operate_code = 20 
         then
         v_operation := '工单回单';
         v_status := 105;
         v_proc_flag := '10';
         v_return := '0';
         elsif vi_operate_code = 201 
         then
         v_operation := '协调转项目经理';
         v_status := 105;
         v_proc_flag := '10';
         v_return := '2';
         elsif vi_operate_code = 21 
         then
         v_operation := '工单退单';
         v_status := 253;
         v_proc_flag := '10';
         v_return := '1';
         elsif vi_operate_code = 22 
         then
         v_operation := '工单归档/撤单';
         v_status := 105;
         v_proc_flag := '11';
         else
         ivk_code := 300;
         ivk_desc := '未定义操作代码';
         RETURN;
         end if;  
    
    --查询原参数
    BEGIN
      select 
      STATUS,
      WOP_ORDER_VER,
      WOP_SERIAL_NO,
      PROCESS_FLAG,
      PLANE_TYPE,
      REMARK7
      into 
      v_prev_status,
      v_order_ver,
      v_curr_serial,
      v_prev_procflag,
      v_platform,
      v_operator
      from WP_SRQ
      where WOP_ORDER_ID = vi_wop_order_id ;
     EXCEPTION
      WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('查WP_SRQ表出错--' || SQLCODE || '--' || SQLERRM);
    END;
    
    v_set_ver := v_order_ver;
    --accept validation
    if vi_operate_code = 15  and 
    (v_status > 104 or (v_status = 104 and v_operator is not null and v_operator <> vi_operator))
    then
       ivk_code := 100;
       ivk_desc := '定单已被其他用户锁定或处理中';
       RETURN;
    end if;
    
    --release validation
    if vi_operate_code = 14  and v_status > 104
    then
       ivk_code := 100;
       ivk_desc := '定单处理中';
       RETURN;
    end if;
         
    --锁定 ,解锁，回单
    if vi_operator <> 'wop' and vi_operate_code > 15 and vi_operate_code <> 18 and vi_operate_code <> 19 and  (v_prev_status = 250 or v_prev_status = 251)
    then 
    ivk_code := 100;
        ivk_desc := '定单版本已修改或已注销';
        RETURN;
    elsif v_prev_procflag = '0F'
    then 
    ivk_code := 100;
        ivk_desc := '定单系统处理异常';
        RETURN;
    elsif vi_operate_code <> 10
    then  
          v_operator := vi_operator; 
          if vi_operate_code = 20 or vi_operate_code = 21 or vi_operate_code = 201
          then
          v_comp_dts := sysdate;
          end if;
          if (vi_operate_code = 20 or vi_operate_code = 21) and v_platform <> '100' and  v_platform <> '0'
          then
          v_proc_flag := '09';
          end if;
          
          if vi_operate_code = 14
          then
          v_operator := null;
          end if;
          if vi_operate_code = 17
          then
          v_set_ver := v_order_ver + 1;
          end if;
    --信网（完工确认）派发处理      
    if vi_operate_code = 11 and ( v_platform = '93' or v_platform = '117' or v_platform = '118' or v_platform = '1' or v_platform = '169' or v_platform = '201' )
     then 
       v_status := 104;
    end if;
    --专线（DDN FR预审核，IPMAN录入, 专线完工信息）处理      
    if vi_operate_code = 11 and ( v_platform = '142' or v_platform = '148' or v_platform = '149' or v_platform = '151' or v_platform = '130')
     then 
       v_status := 104;
    end if;
    --集团互联（定单信息，单点报竣，全程调测）,IPMS处理      
    if vi_operate_code = 11 and ( v_platform = '161' or v_platform = '159' or v_platform = '160' or v_platform = '162' or v_platform = '163' or v_platform = '206')--modify 130801
     then 
       v_status := 104;
       v_proc_flag := '02';
    end if;
    if vi_operate_code = 11
    then
    BEGIN
      UPDATE WP_SRQ 
      SET 
      STATUS = v_status,
      UPDATE_DTS = sysdate, --modify 121222
      PROCESS_FLAG = v_proc_flag,
      WOP_ORDER_VER = v_set_ver,
      REMARK7 = v_operator
      WHERE WOP_ORDER_ID = vi_wop_order_id ;
      commit;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 203;
        ivk_desc := '更新WP_ORDER表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    else
     BEGIN
      UPDATE WP_SRQ 
      SET 
      STATUS = v_status,
      UPDATE_DTS = sysdate,
      COMPLETE_DTS = v_comp_dts,
      PROCESS_FLAG = v_proc_flag,
      WOP_ORDER_VER = v_set_ver,
      REMARK7 = v_operator
      WHERE WOP_ORDER_ID = vi_wop_order_id ;
      commit;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 203;
        ivk_desc := '更新WP_ORDER表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    end if;
    
    if vi_operate_code = 20 or vi_operate_code = 21 or vi_operate_code = 201
    then
    BEGIN
      UPDATE WP_P6_REQ 
      SET 
      WOP_RETURN = v_return,
      COMPLETE_DTS = v_comp_dts
      WHERE WOP_SERIAL_NO = v_curr_serial ;
      commit;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        ivk_code := 203;
        ivk_desc := '更新WP_P6_REQ表出错--' || SQLCODE || '--' || SQLERRM;
        RETURN;
    END;
    end if;
    end if;
    --INSERT WP_ORDER_LOG
    begin
     select to_char(sysdate,'yyyyMMdd')
     into v_curr_time from dual;
     
     select to_char(SEQ_OPER_ID.NEXTVAL) 
     into v_oper_id from dual; 
      
     v_oper_id := v_curr_time || '-' || v_oper_id;
     
     EXCEPTION
     WHEN OTHERS THEN
      ivk_code := 200;
      ivk_desc := '日志序号生成出错-' || SQLCODE || '--' || SQLERRM;
      RETURN;
    end;
        
    BEGIN
    INSERT INTO WP_ORDER_LOG
     (OPER_ID,
      WOP_ORDER_ID,
      WOP_ORDER_VER,
      CURR_SERIAL_NO,
      PREV_SERIAL_NO,
      CURR_STATE,
      PREV_STATE,
      OPER_TYPE,
      OPERATOR,
      OPERATION,
      OPER_DTS)
    VALUES
      (v_oper_id,
       vi_wop_order_id,
       v_set_ver,
       v_curr_serial,
       v_prev_serial,
       v_status,
       v_prev_status,
       '工单处理',
       vi_operator,
       v_operation,
       sysdate
       );
    commit;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('插WP_ORDER_LOG表出错--' || SQLCODE || '--' || SQLERRM);
  END;
  
end PRVREQ_DISPATCH;

 
/

-- ----------------------------
-- Procedure structure for PURGE_HISTORY_ORDER
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."PURGE_HISTORY_ORDER" as
  v_date date;
  StoO_error   number(10);
  StoO_rowcnt  number(10);
  StoO_errmsg  VARCHAR2(255);
  log_ret     integer;
  log_err     varchar2(255);

begin

  --360天前的历史数据
  --限制最大清除20万条工单
  v_date := sysdate - 380;
  --tag SRQ
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

      UPDATE WPHIS_SRQ s
      SET
      s.PROCESS_FLAG = '40'
      WHERE
      s.RECEIVE_DTS < v_date;
      StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows tagged in wphis_srq');
  create_order_log('Purging_History_Data','1',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','tag purging srq',log_ret,log_err);

   --tag REQ
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

      UPDATE WPHIS_P6_REQ s
      SET s.Process_Status = 400
      WHERE
      s.Create_Dts < v_date;
      StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows tagged in wphis_req');
  create_order_log('Purging_History_Data','1',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','tag purging req',log_ret,log_err);


  --DEL order_log
  DBMS_OUTPUT.PUT_LINE('Purging order_log On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     delete from wphis_order_log l
      where l.wop_order_id in (select WOP_ORDER_ID from WPHIS_SRQ where process_flag = '40');
      StoO_rowcnt := SQL%ROWCOUNT;
     commit;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wphis_order_log');
  create_order_log('Purging_History_Data','2',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','purge tagged log',log_ret,log_err);

  --DEL p6_req,
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
      delete from wphis_p6_req q
      where
      q.Process_Status = 400
      and rownum <= 50000;
      EXIT WHEN SQL%ROWCOUNT = 0;
      StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
     END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wphis_p6_req');
  create_order_log('Purging_History_Data','3',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','purge tagged req',log_ret,log_err);

  --DEL srq
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
      delete from wphis_srq s
      where
      s.process_flag = '40'
      and rownum <= 50000;
      EXIT WHEN SQL%ROWCOUNT = 0;
      StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
     END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wphis_srq');
  create_order_log('Purging_History_Data','4',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','purge tagged srq',log_ret,log_err);

  --DEL report
  DBMS_OUTPUT.PUT_LINE('Purging order_report On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     delete from WP_REPORT t where t.name_space='jthl_notify' and t.create_dts < v_date;
     StoO_rowcnt := SQL%ROWCOUNT;
     commit;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from WP_REPORT');

  --DEL p6_req working,
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
    LOOP
    BEGIN
      delete from wp_p6_req q
      where
      q.process_status = 200
      and rownum <= 100000;
      StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
      commit;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        create_order_log('Purging_History_Data','5',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','purge working req',log_ret,log_err);
    END;
    EXIT WHEN StoO_rowcnt >= 1000000 or StoO_rowcnt = 0;
    END LOOP;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wp_p6_req');
  create_order_log('Purging_History_Data','5',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','purge working req',log_ret,log_err);


  end PURGE_HISTORY_ORDER;
/

-- ----------------------------
-- Procedure structure for SET_COMPLETE_FEENOTE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."SET_COMPLETE_FEENOTE" (vi_crm_order_id  in varchar,
                                            vi_crm_order_ver     in number,
                                            vi_crm_line_item_no  in varchar,
                                            vi_p6_order_id       in varchar,
                                            vi_product_id        in varchar,
                                            vi_item_price        in number,
                                            vi_derate_price      in number,
                                            vi_paid_price        in number,
                                            vi_charge_date       in varchar,
                                            vi_process_date      in date,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is
v_proc_date    date;
v_item_fee     number;
row_count      number;
begin
  ivk_code := 0;
  if vi_crm_order_id is null then
    ivk_code := 300;
    ivk_desc := '订单编号不能为null!';
    RETURN;
  end if;
  if vi_crm_order_ver is null then
    ivk_code := 300;
    ivk_desc := '订单版本不能为null!';
    RETURN;
  end if;
  if vi_crm_line_item_no is null then
    ivk_code := 300;
    ivk_desc := '行项目编号不能为null!';
    RETURN;
  end if;
  if vi_product_id is null then
    ivk_code := 300;
    ivk_desc := '子产品编码不能为null!';
    RETURN;
  end if;
  --check product code is feepay type
  begin
         select count(*) into row_count
         from WP_DATA_ELEMENT
         where PRP_NAME = 'feepay_prod_code'
         and DATA_CODE = vi_product_id;
         EXCEPTION
               WHEN OTHERS THEN
               ivk_code := 200;
               ivk_desc := '产品代码校验出错-' || SQLCODE || '--' || SQLERRM;
               RETURN;
  END;
  if row_count = 0 then
        ivk_desc := '非付费产品代码';
        RETURN;
  end if;
  
  if vi_process_date is null then
    v_proc_date := sysdate;
  else
    v_proc_date := vi_process_date;
  end if;
  v_item_fee := vi_item_price - vi_derate_price - vi_paid_price;
  BEGIN
  --delete old 
    delete FROM WP_CFT_CRM t
     where t.crm_order_id = vi_crm_order_id
     and t.crm_order_ver = vi_crm_order_ver
     and t.crm_line_item_no = vi_crm_line_item_no
     and t.product_id = vi_product_id;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  END;
  BEGIN   
    INSERT INTO WP_CFT_CRM
     (CRM_ORDER_ID,
      CRM_ORDER_VER,
      CRM_LINE_ITEM_NO,
      P6_ORDER_ID,
      PRODUCT_ID,
      ITEM_PRICE,
      DERATE_PRICE,
      PAID_PRICE,
      CHARGE_DATE,
      PROCESS_DATE,
      ITEM_FEE)
      values
      (vi_crm_order_id,
      vi_crm_order_ver,
      vi_crm_line_item_no,
      vi_p6_order_id,
      vi_product_id,
      vi_item_price,
      vi_derate_price,
      vi_paid_price,
      vi_charge_date,
      v_proc_date,
      v_item_fee);
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := '插WP_CFT_CRM表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end SET_COMPLETE_FEENOTE;

 
/

-- ----------------------------
-- Procedure structure for SET_DELAY_TASK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."SET_DELAY_TASK" (vi_p6_order_id       in WOPDB.WP_P6_DELAYTASK.P6_ORDER_ID%TYPE,
                                            vi_p6_order_histid   in WOPDB.WP_P6_DELAYTASK.P6_ORDER_HISTID%TYPE,
                                            vi_p6_order_ver      in WOPDB.WP_P6_DELAYTASK.P6_ORDER_VER%TYPE,
                                            vi_crm_order_id      in WOPDB.WP_P6_DELAYTASK.CRM_ORDER_ID%TYPE,
                                            vi_task_mnemonic     in WOPDB.WP_P6_DELAYTASK.P6_TASK_MNEMONIC%TYPE,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is
begin
  ivk_code := 0;
  BEGIN
    INSERT INTO WP_P6_DELAYTASK
     (P6_ORDER_ID,
      P6_ORDER_HISTID,
      P6_ORDER_VER,
      CRM_ORDER_ID,
      P6_TASK_MNEMONIC)
      values
      (vi_p6_order_id,
       vi_p6_order_histid,
       vi_p6_order_ver,
       vi_crm_order_id,
       vi_task_mnemonic);
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := '插WP_P6_DELAYTASK表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end SET_DELAY_TASK;

 
/

-- ----------------------------
-- Procedure structure for SET_NOTE_TIMEOUT
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_NOTE_TIMEOUT"
is

begin
  --取flowid
    FOR ford IN (
             select t.fo_id,t.fo_sn from wf_ord_flow t where t.flow_id = 55 and t.task_type ='M' and t.state =1 and t.receive_dts < sysdate -3
           )
           LOOP
           begin
             update wf_notify_queue q set q.proc_sta = 0, q.proc_count=1, q.context = q.context|| '--超3天未接单通知！'
             where q.fo_id = ford.fo_id and q.fo_sn = q.fo_sn and q.note_id in(1201) and q.proc_count < 1 and q.proc_dts >  sysdate -4 and rownum <=1;
             commit;
             EXCEPTION
             WHEN OTHERS THEN
             DBMS_OUTPUT.PUT_LINE('RESEND WF NOTIFY FAIL-'||ford.fo_id||':'||ford.fo_sn);
            end;
           end LOOP;

end SET_NOTE_TIMEOUT;
/

-- ----------------------------
-- Procedure structure for SET_ORD_EVA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_ORD_EVA"(       foid        in number,
                                               roleio      in varchar,
                                               usr          in varchar,
                                               usr_eva      in varchar,
                                               sta          in number
                                               )is
v_1             varchar2(10);
v_2             varchar2(10);
v_3             varchar2(10);
v_4             varchar2(10);
v_5             varchar2(10);
v_dept          varchar2(10);
v_flowid        number(5);
a_ivk_code      number(5);
a_ivk_desc      varchar2(200);
v_mail          varchar2(200);
v_remark        varchar2(200);
v_desc          varchar2(2000);
v_flow          varchar2(200);
begin
  --取flowid
  begin
      select flow_id into v_flowid
      from wf_ord o
      where fo_id = foid;
  EXCEPTION
           WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('查流程出错--' || SQLCODE || '--' || SQLERRM);
           v_flowid := 0;
  end;
  --取被评价人部门
  begin
      select o.org_no into v_dept
      from wf_organization o
      where o.org_id  in
      (select t.org_id from wf_user_org t
       where t.user_id = usr_eva
      and o.org_type = 0);
  EXCEPTION
           WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('查被评价人部门出错--' || SQLCODE || '--' || SQLERRM);
           v_dept := '';
  end;
  --映射角色-》评价项;
  begin
  select EVA_ITEM1,EVA_ITEM2,EVA_ITEM3,EVA_ITEM4,EVA_ITEM5 into v_1,v_2,v_3,v_4,v_5
  from WF_ROLE_EVA where ROLE_IO = roleio and flow_id = v_flowid;
   EXCEPTION
    WHEN OTHERS THEN
      begin--通用评价
      select EVA_ITEM1,EVA_ITEM2,EVA_ITEM3,EVA_ITEM4,EVA_ITEM5 into v_1,v_2,v_3,v_4,v_5
          from WF_ROLE_EVA where ROLE_IO = '99';
      EXCEPTION
          WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('查WP_ROLE_EVA表出错--' || SQLCODE || '--' || SQLERRM);
      end;
  end;
  --查找是否存在相同fo_id fo_sn usr_id记录，有则仅更新状态
  begin
   insert into WF_ORD_EVA values(foid, usr, roleio, sysdate, usr_eva, null, '0', v_1, v_2, v_3, v_4, v_5, 0, 0, 0, 0, 0, 0, sta);
   COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE('插WP_ORD_EVA表出错--' || SQLCODE || '--' || SQLERRM);
    rollback;
  end;

  --发送评价通知
  begin
    select t.e_mail into v_mail
    from wp_user t
    where t.admin_id = usr_eva;
    EXCEPTION
      WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('查用户MAIL出错--' || SQLCODE || '--' || SQLERRM);
      return;
  end;
  if substr(roleio,2,1) = 0 then
    v_remark := '客户经理';
  elsif substr(roleio,2,1) = 1 then
    if v_flowid = 55 then
       v_remark := '支撑经理';
    else
       v_remark := '项目经理';
    end if;
  elsif substr(roleio,2,1) = 2 then
    v_remark := '二级支撑经理';
  else
    if v_flowid = 55 then
       v_remark := '支撑专家';
    else
       v_remark := '项目成员';
    end if;
  end if;
  
  if v_flowid = 55 then
       v_flow := '售前';
    else
       v_flow := '售中';
  end if;
  v_desc := '全业务||v_flow||支撑流程（'||foid||'）即将完成，'||v_remark||'的支撑是否满意,请做评价，谢谢！';


  WF_NOTIFY_PKG.CREATE_NOTIFY_EVENT(1200, foid, 0, v_flowid, 0, 1, v_mail, v_desc, 0, null, v_remark||'的工作评价', a_ivk_code, a_ivk_desc);

end SET_ORD_EVA;
/

-- ----------------------------
-- Procedure structure for SET_ORD_FLOW_PRESTA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_ORD_FLOW_PRESTA"(a_fo_id       in number,
                                               a_fo_sn      in number,
                                               a_state      in number) is
v_pre_sn           number(10);
begin
  --设置前序施工环节为在处理（允许更新施工信息）状态，判断是否有在途办结环节 置状态为完成
  begin
    select fo_sn into v_pre_sn from wf_ord_flow_route t where fo_id = a_fo_id and  fo_sn_to = a_fo_sn;
    if v_pre_sn is not null then
      begin
      UPDATE WF_ORD_FLOW SET state = 2, remark = '允许更新施工信息'
      WHERE FO_ID = a_fo_id and FO_SN = v_pre_sn and TASK_ID = 55;
      commit;
      EXCEPTION
       WHEN OTHERS THEN
      ROLLBACK;
      end;
    end if;
    begin
      UPDATE WF_ORD_FLOW SET state = 5,remark = '施工信息发生更新'
      WHERE FO_ID = a_fo_id and task_id = 50 and fo_sn <> a_fo_sn;
      commit;
      EXCEPTION
       WHEN OTHERS THEN
      ROLLBACK;
    end;
  end;
end SET_ORD_FLOW_PRESTA;
/

-- ----------------------------
-- Procedure structure for SET_ORD_FLOW_UPDDTS
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_ORD_FLOW_UPDDTS"(a_fo_id       in number,
                                               a_fo_sn       in number,
                                               a_updstr      in varchar2) is
                                               
v_gspm             varchar2(50);
v_task             number(10);
v_dept             varchar2(50);
v_doer             varchar2(50);
v_acdate           date;
begin
  if a_updstr is null then 
    return;
  end if;
  BEGIN
  --mod WXINTG set accept_date + 1WD -> accept_complete_date
    v_acdate := cacl_expcompdate2(to_date(a_updstr,'yyyy-mm-dd hh24:mi:ss'), 86400);
    --UPDATE WF_ORD_FLOW SET UPDATE_DTS =  to_date(a_updstr,'yyyy-mm-dd hh24:mi:ss')
    UPDATE WF_ORD_FLOW SET UPDATE_DTS = v_acdate
    WHERE FO_ID = a_fo_id and FO_SN = a_fo_sn;
    commit;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  end;
  begin
    WF_ORDER_FLOW_PKG.UPDATE_ORDER_SNAP(a_fo_id, a_fo_sn ,1227,to_char(v_acdate,'yyyy-mm-dd hh24:mi:ss')); 
  end;

  --大光端机办结 设置接单人
  begin
     select TASK_ID into v_task from  WF_ORD_FLOW 
     where FO_ID = a_fo_id and FO_SN = a_fo_sn;
     if v_task = 50 
     then
       begin
        SELECT VALUE into v_doer
              FROM WF_ORD_SNAP
              WHERE FO_ID = a_fo_id
              and FO_SN = a_fo_sn
              and DATA_ID = 1041
              and INST_ID = 0;
        SELECT VALUE into v_gspm
              FROM WF_ORD_SNAP
              WHERE FO_ID = a_fo_id
              and FO_SN = a_fo_sn
              and DATA_ID = 1040
              and INST_ID = 0;
        --线路中心-》政支中心-政支项目经理
         BEGIN
            select o.org_no into v_dept
            from wf_organization o
            where o.org_id  in
            (select t.org_id from wf_user_org t
             where t.user_id in
            (select admin_id from wp_user t
             where t.admin_name = v_doer)
            and o.org_type = 0) and rownum <=1;
         EXCEPTION
           WHEN OTHERS THEN
           DBMS_OUTPUT.PUT_LINE('查制作人部门出错--' || SQLCODE || '--' || SQLERRM);
         END;
        --线路中心单由政支中心办结,区局由项目经理办结
        if v_dept = '10'
        then
          begin
             WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, v_task,'doer',v_gspm, 'LOT_CONST','COMM_CONST');
             WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, v_task,'dept_no','11', 'LOT_CONST','COMM_CONST');
          end;
        else
          begin
             WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, v_task,'doer',v_doer, 'LOT_CONST','COMM_CONST');
             WF_ORDER_RESO_PKG.UPDATE_ORDER_REMARK(a_fo_id, a_fo_sn, v_task,'dept_no',v_dept, 'LOT_CONST','COMM_CONST');
          end;
        end if;   
       end;
     end if;
  end;
end SET_ORD_FLOW_UPDDTS;
/

-- ----------------------------
-- Procedure structure for SET_ORD_MEMBER
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_ORD_MEMBER"(foid          in number,
                                               fosn      in number,
                                               usrid     in varchar,
                                               taskid    in varchar,
                                               sta       in number,
                                               dept      in varchar 
                                               ) is
v_sta           number(10);
v_role          number(10);
v_wdays         number(3);
v_uid           varchar(100);
v_acpdate       date;
v_flowid        number(10);
begin
  --人名-》userid
  v_uid := '';
  begin
  select admin_id into v_uid from wp_user t where t.admin_name = usrid and t.plane_id = 'wfp' and (bureau_code= dept or bureau_code is null);
   EXCEPTION
    WHEN OTHERS THEN
    v_uid := usrid||'-'||dept;
    return;
  end;
  --映射任务-》角色
  v_role := '';
  begin
  select flow_id into v_flowid from WF_ORD o where o.fo_id = foid;
  select role into v_role from WF_task_role t where task_id = taskid and t.flow_id = v_flowid;
   EXCEPTION
    WHEN OTHERS THEN
    v_role := '-1';
  end;
  --查找是否存在相同fo_id fo_sn usr_id记录，有则仅更新状态
  begin
  select confirm, accept_dts  into v_sta, v_acpdate from WF_ORD_MEMBER t where fo_id = foid and usr_id= v_uid and role_id = v_role;
  EXCEPTION
    WHEN OTHERS THEN
    v_sta := -1;
  end;
  --接受新建
  if v_sta =-1 then
      begin
        insert into WF_ORD_MEMBER values(foid, v_uid, v_role, taskid, sysdate, fosn, sta, null, 0);
        commit;
        EXCEPTION
         WHEN OTHERS THEN
        ROLLBACK;
      end;
  --提交更新
  elsif sta = 4 then
     select round(to_number(sysdate - v_acpdate), 1) into v_wdays from dual;
     begin
      UPDATE WF_ORD_MEMBER SET confirm = sta, submit_dts=sysdate, work_days=v_wdays
      WHERE FO_ID = foid and usr_id = v_uid and role_id = v_role;
      commit;
      EXCEPTION
       WHEN OTHERS THEN
      ROLLBACK;
    end;
  --释放或更新 sta=1 or 2
  else  
     begin
      UPDATE WF_ORD_MEMBER SET confirm = sta, accept_dts=sysdate
      WHERE FO_ID = foid and usr_id = v_uid and role_id = v_role;
      commit;
      EXCEPTION
       WHEN OTHERS THEN
      ROLLBACK;
    end;
  end if;
end SET_ORD_MEMBER;
/

-- ----------------------------
-- Procedure structure for SET_ORD_PRE_ARCH
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_ORD_PRE_ARCH"(  a_fo_id       in number,
                                               a_fo_sn       in number) is

v_os            varchar2(50);
v_cn            varchar2(500);
v_desc          varchar2(2000);
v_doer          varchar2(500);
v_doerid        varchar2(500);
v_mail          varchar2(500);
a_ivk_code      number(3);
a_ivk_desc      varchar2(500);
begin
  BEGIN
    SELECT REMARK_VAL INTO v_os
         FROM WF_ORD_REMARK
         WHERE FO_ID = a_fo_id
         and FO_SN = a_fo_sn
         and REMARK_KEY = 'ord_source';
  end;
  if v_os ='YZS' then
    BEGIN
     UPDATE WF_ORD SET
            FLOW_STATE = 5,
            FTX_AUTHOR = 'WFP',
            FTX_OPERATE = 'pre_archieve',
            complete_dts = sysdate,
            FTX_OPERATE_DTS = sysdate
     WHERE FO_ID = a_fo_id;
     commit;
     EXCEPTION
           WHEN OTHERS THEN
             DBMS_OUTPUT.PUT_LINE('WF_ORD--' || SQLCODE || '--' || SQLERRM);
    END;
  end if;
  --增加资源中心临时界面发起售中单，审核通知
  BEGIN
    SELECT REMARK_VAL INTO v_doer
         FROM WF_ORD_REMARK
         WHERE FO_ID = a_fo_id
         and FO_SN = a_fo_sn
         and REMARK_KEY = 'doer';
  end;
  begin
    select t.admin_id into v_doerid from wp_user t where t.dept_name = '资源中心' and t.admin_name = v_doer;
    EXCEPTION
           WHEN OTHERS THEN
             return;
  end;
  if v_doerid is not null then
    v_mail := v_doerid||'.sh@chinatelecom.cn';
    select REMARK_VAL into v_cn
     from WF_ORD_REMARK
     where FO_ID = a_fo_id
     and FO_SN = a_fo_sn
     and REMARK_KEY in ('customer_name');
  end if;

  v_desc := '政企售中方案('||a_fo_id||') 客户：'||v_cn||' 整合已完成, 请审核处理 ';

  WF_NOTIFY_PKG.CREATE_NOTIFY_EVENT(1101, a_fo_id, a_fo_sn, 11, 17, 1, v_mail, v_desc, 0, null, null, a_ivk_code, a_ivk_desc);

end SET_ORD_PRE_ARCH;
/

-- ----------------------------
-- Procedure structure for SET_ORDER_HISTORY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."SET_ORDER_HISTORY" (vi_p6_order_id       in WOPDB.WP_P6_ORDHIST.P6_ORDER_ID%TYPE,
                                            vi_crm_order_id      in WOPDB.WP_P6_ORDHIST.CRM_ORDER_ID%TYPE,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is
begin
  ivk_code := 0;
  BEGIN
    INSERT INTO WP_P6_ORDHIST
     (P6_ORDER_ID,
      CRM_ORDER_ID,
      SETHIST_DTS,
      SETHIST_FLAG)
      values
      (vi_p6_order_id,
       vi_crm_order_id,
       sysdate,
       '0');
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := '插WP_P6_ORDHIST表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end SET_ORDER_HISTORY;

 
/

-- ----------------------------
-- Procedure structure for SET_RETURN_TASK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "WOPDB"."SET_RETURN_TASK" (vi_wop_serial_no  in WOPDB.WP_P6_RETTASK.WOP_SERIAL_NO%TYPE,
                                            vi_p6_order_id       in WOPDB.WP_P6_RETTASK.P6_ORDER_ID%TYPE,
                                            vi_p6_order_histid   in WOPDB.WP_P6_RETTASK.P6_ORDER_HISTID%TYPE,
                                            vi_p6_order_ver      in WOPDB.WP_P6_RETTASK.P6_ORDER_VER%TYPE,
                                            vi_crm_order_id      in WOPDB.WP_P6_RETTASK.CRM_ORDER_ID%TYPE,
                                            vi_task_mnemonic     in WOPDB.WP_P6_RETTASK.P6_TASK_MNEMONIC%TYPE,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is
begin
  ivk_code := 0;
  BEGIN
    INSERT INTO WP_P6_RETTASK
     (WOP_SERIAL_NO,
      P6_ORDER_ID,
      P6_ORDER_HISTID,
      P6_ORDER_VER,
      CRM_ORDER_ID,
      P6_TASK_MNEMONIC)
      values
      (vi_wop_serial_no,
       vi_p6_order_id,
       vi_p6_order_histid,
       vi_p6_order_ver,
       vi_crm_order_id,
       vi_task_mnemonic);
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := '插WP_P6_RETTASK表出错--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end SET_RETURN_TASK;

 
/

-- ----------------------------
-- Procedure structure for SET_WF_BACK_EXPL
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_WF_BACK_EXPL"(a_foid       in varchar2,
                                             a_az_side     in varchar2,
                                             a_operator    in varchar2,
                                             a_reason      in varchar2,
                                             a_return      out varchar2) is

v_rsid             varchar2(100);
v_fosn             number(10);
v_desc             varchar2(500);
v_code             number(10);
v_remark           varchar2(2000);
v_owner            varchar2(200);
begin
  a_return := '售中方案退回重勘成功，请关注！';
  if a_foid is null then
    a_return := '定单编号输入不合规！';
    return;
  end if;

  if a_az_side = '5' then
    --设置跳转定单 状态处理中，备注：跳转信息，操作人，时间
    begin
       UPDATE WF_ORD_FLOW SET
          STATUS = 12, --设置异常跳转状态
          STATE = 2,         --处理中状态
          REMARK = a_operator||'（资源挂起重新勘查）：'||a_reason||chr(10)||v_remark,
          UPDATE_DTS = sysdate
          WHERE FO_ID = a_foid
          and task_id = 9001;
          commit;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            a_return := '更新WF_ORD_FLOW表出错--' || SQLCODE || '--' || SQLERRM;
            RETURN;
    end;
    begin
    FOR flow IN (
               select fo_sn,owner from WF_ORD_FLOW  WHERE FO_ID = a_foid and task_id = 9001
           )
           LOOP
           begin
               WF_ORDER_FLOW_PKG.CREATE_ORDER_NOTIFY(100, a_foid, flow.fo_sn, 11, 9001, a_operator, flow.owner, a_reason ,'' , v_code, v_desc);
           end;
    end LOOP;
    end;
  elsif a_az_side in  ('5A','5Z') then
    begin
      select reso_id into v_rsid from wf_ord_reso where fo_id = a_foid and dict_id = 'az_side' and value = substr(a_az_side,2) and rownum<=1;
         EXCEPTION
           WHEN OTHERS THEN
           a_return := '查不到售中流程方案退回环节！'||substr(a_az_side,2)||'端' ;
           RETURN;
    end;
    begin
      select value into v_fosn from wf_ord_reso where reso_id = v_rsid and dict_id = 'fo_sn' and value is not null;
         EXCEPTION
           WHEN OTHERS THEN
           a_return := '查不到售中流程方案退回环节！'||substr(a_az_side,2)||'端' ;
           RETURN;
    end;
    begin
      select owner into v_owner from wf_ord_flow where fo_id = a_foid and fo_sn = v_fosn;
         EXCEPTION
           WHEN OTHERS THEN
           a_return := '查不到售中流程方案退回环节接单人！'||substr(a_az_side,2)||'端' ;
           RETURN;
    end;
    begin
       UPDATE WF_ORD_FLOW SET
          STATUS = 12, --设置异常跳转状态
          STATE = 2,         --处理中状态
          REMARK = a_operator||'（资源挂起重新勘查）：'||a_reason||chr(10)||v_remark,
          UPDATE_DTS = sysdate
          WHERE FO_ID = a_foid
          and FO_SN = v_fosn;
          commit;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            a_return := '更新WF_ORD_FLOW表出错--' || SQLCODE || '--' || SQLERRM;
            RETURN;
    end;
    WF_ORDER_FLOW_PKG.CREATE_ORDER_NOTIFY(100, a_foid, v_fosn, 11, 9001, a_operator, v_owner , a_reason ,'' , v_code, v_desc);
  else
     a_return := '售中流程重勘甲乙端不合规'|| a_az_side;
  end if;


end set_wf_back_expl;
/

-- ----------------------------
-- Procedure structure for SET_WF_BACK_INTG
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."SET_WF_BACK_INTG"(a_dk_no       in varchar2,
                                             a_operator    in varchar2,
                                             a_reason      in varchar2,
                                             a_return      out varchar2) is

v_foid             number(10);
v_fosn             number(10);
v_desc             varchar2(500);
v_code             number(10);
v_remark           varchar2(2000);
begin
  a_return := '售中方案退回修订成功，请关注！';
  if a_dk_no is null or length(a_dk_no) < 11 then
    a_return := 'DK编号输入不合规！';
    return;
  end if;
  --获取dk关联定单号
  begin
    select fo_id into v_foid from wf_ord_reso where reso_id = a_dk_no and rownum <= 1;
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('查制作人部门出错--' || SQLCODE || '--' || SQLERRM);
      a_return := '查不到DK编号对应售中流程';
  end;
  begin
    select r.fo_sn,r.remark into v_fosn, v_remark
    from(
    select fo_sn,remark
           from wf_ord_flow
           where fo_id = v_foid
           and task_id = 14
           order by fo_sn desc)r
    where rownum <= 1;
           EXCEPTION
           WHEN OTHERS THEN
           a_return := '查不到售中流程方案修改环节！';
           RETURN;
  end;
  --设置跳转定单 状态处理中，备注：跳转信息，操作人，时间
  begin
     UPDATE WF_ORD_FLOW SET
        STATUS = 12, --设置异常跳转状态
        STATE = 2,         --处理中状态
        REMARK = a_operator||'（资源挂起方案修订）：'||a_reason||chr(10)||v_remark,
        UPDATE_DTS = sysdate
        WHERE FO_ID = v_foid
        and FO_SN = v_fosn;
        commit;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          a_return := '更新WF_ORD_FLOW表出错--' || SQLCODE || '--' || SQLERRM;
          RETURN;
  end;
  WF_ORDER_FLOW_PKG.CREATE_ORDER_NOTIFY(100, v_foid, v_fosn, 11, 14, a_operator, a_reason, '综资挂起方案修订' ,'' , v_code, v_desc);
end set_wf_back_intg;
/

-- ----------------------------
-- Procedure structure for TRANSFER_ARCHIEVED_DATA
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."TRANSFER_ARCHIEVED_DATA" as
  v_date date;
  StoO_error   number(10);
  StoO_rowcnt  number(10);
  StoO_errmsg  VARCHAR2(255);
  log_ret     integer;
  log_err     varchar2(255);

begin

  --45天前的归档数据 45天前收到的已取消单

  v_date := sysdate - 45;
  --sysdate - 1 / (24 * 60);
  --标记SRQ
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
      --客保未撤销确认单 240天前，且P6已不存在（NOPHS）
      update wp_srq t set t.status = 255
      where t.receive_dts < sysdate - 240
      and t.plane_type in ('30','111','116','132','133','134','135','137','138','139','140','141','143','155','167','176','177','180','183','184','185','186','199','200','208','209','214','219','221')
      and t.status = 250 and to_number(t.p6_order_id) < 2000000000
      and (select count(*) from nophs_om_order_header where order_seq_id = t.p6_order_id) < 1;
      commit;
    
      UPDATE WP_SRQ s
      SET
      s.PROCESS_FLAG = '30',
      s.update_dts = sysdate
      WHERE  
      (s.process_flag = '20' or s.status = 255)
      AND s.service_type <> 'SDH'
      AND ((s.COMPLETE_DTS < v_date and s.COMPLETE_DTS is not null) or (s.UPDATE_DTS < v_date and s.COMPLETE_DTS is null))
      AND s.wop_order_id not in (select WOP_ORDER_ID from WPHIS_SRQ) ;
      StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      --已取消单
      UPDATE WP_SRQ s
      SET
      s.PROCESS_FLAG = '30',
      s.update_dts = sysdate
      WHERE  
      s.status = 255
      AND s.service_type <> 'SDH'
      AND s.receive_dts < v_date - 30
      AND s.wop_order_id not in (select WOP_ORDER_ID from WPHIS_SRQ) ;
      commit;
      --SDH 
      update wp_srq t
       set t.status = 301 
       where t.service_type = 'SDH' 
       and t.task_id = 'kbgd' 
       and t.receive_dts < v_date;  
       commit;
      UPDATE WP_SRQ s
      SET
      s.PROCESS_FLAG = '30',
      s.update_dts = sysdate
      WHERE
      s.p6_order_id in (select p6_order_id from wp_srq where status = 301)  
      and s.service_type = 'SDH'
      --and s.task_id <> 'kbgd'
      and s.process_flag <> '30'
      and rownum <= 50000;
      
      --CDMA
      UPDATE WP_SRQ s
      SET
      s.PROCESS_FLAG = '30',
      s.update_dts = sysdate
      WHERE  
      (s.status = 105 or s.status = 253)
      AND s.service_type in ('CDMA','CDMA_CCOD','CDMA_IVPN')
      AND s.COMPLETE_DTS < sysdate-180
      AND s.wop_order_id not in (select WOP_ORDER_ID from WPHIS_SRQ) ;
      StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      
       EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM; 
      
  END; 
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows tagged in wp_srq');
  create_order_log('Trans_Archived_Data','1',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','tag archived srq',log_ret,log_err);
  
  BEGIN
      UPDATE WP_P6_REQ s
      set s.process_status = '201'
      WHERE  
      s.wop_order_id in (select WOP_ORDER_ID from WP_SRQ where process_flag = '30')
      AND s.wop_serial_no not in (select wop_serial_no from WPHIS_P6_REQ);
      StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows tagged in wp_p6_req'); 
  create_order_log('Trans_Archived_Data','2',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','tag archived req',log_ret,log_err);

  --COPY wp_srq
  DBMS_OUTPUT.PUT_LINE('Trans Srq On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
      insert into WPHIS_SRQ
      (select * from WP_SRQ s
       where  s.process_flag = '30'
       and s.wop_order_id not in (select WOP_ORDER_ID from WPHIS_SRQ)
       and rownum <= 50000);
      EXIT WHEN SQL%ROWCOUNT = 0;
       StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
     END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        create_order_log('Trans_Archived_Data','3',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','copy tagged srq',log_ret,log_err);
        RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows inserted into wphis_srq');
  create_order_log('Trans_Archived_Data','3',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','copy tagged srq',log_ret,log_err);

  --COPY wp_p6_req
  DBMS_OUTPUT.PUT_LINE('Trans Req On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
      begin
      insert into WPHIS_P6_REQ
      (select q.* from WP_P6_REQ q
       where  q.process_Status = '201'
      -- and q.plane_type not in ('30','111','116','132','133','134','135','137','138','139','140','141','143','155')
       and q.wop_serial_no not in (select wop_serial_no from WPHIS_P6_REQ)
       and  rownum <= 5000);
       EXIT WHEN SQL%ROWCOUNT = 0d;
       StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
       EXCEPTION
       WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        create_order_log('Trans_Archived_Data','4',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','copy tagged req',log_ret,log_err);
      end;
      EXIT WHEN StoO_rowcnt >= 50000;  
    END LOOP;
  END; 
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows inserted into wphis_p6_req');
  create_order_log('Trans_Archived_Data','4',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','copy tagged req',log_ret,log_err);
  
  --COPY wp_order_log
  DBMS_OUTPUT.PUT_LINE('Trans Log On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
      insert into WPHIS_ORDER_LOG
       (select q.* from wp_order_log q
       where  q.wop_order_id in (select WOP_ORDER_ID from WP_SRQ where process_flag = '30')
       and q.oper_id not in (select oper_id from WPHIS_ORDER_LOG));
       StoO_rowcnt := SQL%ROWCOUNT;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;  
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows inserted into wphis_order_log');
  create_order_log('Trans_Archived_Data','5',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','copy tagged log',log_ret,log_err);

 
  
  --删除在途数据
  --DEL print_req and p6_acv_data
  DBMS_OUTPUT.PUT_LINE('Del print archive On') ;
  BEGIN  
    delete from Wp_P6_Ordhist t where t.sethist_dts < sysdate - 360 and t.sethist_flag = 1;
    commit; 
    delete from wp_print_req t where t.print_dts < sysdate-1;
    commit;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END; 
  create_order_log('Trans_Archived_Data','6','0',StoO_errmsg,StoO_error, 0,'system','wop','del print&archv',log_ret,log_err);
  
  --DEL order_log
  DBMS_OUTPUT.PUT_LINE('Del order_log On') ;
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     delete from wp_order_log l
      where l.wop_order_id in (select WOP_ORDER_ID from WP_SRQ where process_flag = '30');
      StoO_rowcnt := SQL%ROWCOUNT;
     commit;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wp_order_log');
  create_order_log('Trans_Archived_Data','7',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','del tagged log',log_ret,log_err);
  
  --DEL p6_req,
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
     begin
      delete from wp_p6_req q
      where q.process_status = '201'
      --and (q.wop_serial_no in (select wop_serial_no from wphis_p6_req)) 
           --or q.plane_type in ('30','111','116','132','133','134','135','137','138','139','140','141','143','155'))
      and rownum <= 5000;
      EXIT WHEN SQL%ROWCOUNT = 0;
      StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
       EXCEPTION
       WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
     end;
     EXIT WHEN StoO_rowcnt >= 80000;  
     END LOOP;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wp_p6_req');
  create_order_log('Trans_Archived_Data','8',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','del tagged req',log_ret,log_err);
  
  --DEL srq
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
     LOOP
      delete from wp_srq s
      where 
      s.process_flag = '30'
      and s.wop_order_id in (select wop_order_id from wphis_srq)
      and rownum <= 50000;
      EXIT WHEN SQL%ROWCOUNT = 0;
      StoO_rowcnt := StoO_rowcnt + SQL%ROWCOUNT;
       commit;
     END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        StoO_error  := SQLCODE;
        StoO_errmsg := SQLERRM;
        RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(StoO_rowcnt) || ' rows deleted from wp_srq');
  create_order_log('Trans_Archived_Data','9',TO_CHAR(StoO_rowcnt),StoO_errmsg,StoO_error, 0,'system','wop','del tagged srq',log_ret,log_err);

  
end TRANSFER_ARCHIEVED_DATA;
/

-- ----------------------------
-- Procedure structure for WF_STAT_AVG_DAYS
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_AVG_DAYS"(vin_comp_time in date) is
begin
  execute immediate 'truncate table wf_stat_tmp';
  insert into wf_stat_tmp
    (wop_order_id, plane_type, receive_dts, print_dts, complete_dts)
    (select t.wop_order_id,
            t.plane_type,
            nvl((select max(t1.oper_dts)
                  from wp_order_log t1
                 where t1.wop_order_id = t.wop_order_id
                   and t1.curr_state = 102),
                t.receive_dts),
            (select max(t1.oper_dts)
               from wp_order_log t1
              where t1.wop_order_id = t.wop_order_id
                and t1.curr_state = 104),
            (select max(t1.oper_dts)
               from wp_order_log t1
              where t1.wop_order_id = t.wop_order_id
                and (t1.curr_state = 105 or t1.curr_state = 253))
       from wp_srq t
      where t.plane_type in ('104',
                             '145',
                             '144',
                             '172',
                             '79',
                             'C24',
                             'C37',
                             'C36',
                             'C42',
                             'C50',
                             'C38',
                             'C23')
        and t.status in (105, 253)
        and t.order_type = 1
        and t.complete_dts <
            to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 00:00',
                    'yyyymmdd hh24:mi')
        and t.complete_dts >=
            to_date(to_char(vin_comp_time - 1, 'yyyyMMdd') || ' 00:00',
                    'yyyymmdd hh24:mi'));
  commit;
  delete from wf_stat_tmp t
   where t.receive_dts is null
      or t.print_dts is null
      or t.complete_dts is null
      or t.receive_dts < vin_comp_time - 7;
  commit;

  update wf_stat_tmp t
     set t.total_hours =
         (t.complete_dts - t.receive_dts) * 24,
         t.work_hours = (to_date(to_char(t.complete_dts, 'yyyymmdd'),
                                 'yyyymmdd') -
                        to_date(to_char(t.receive_dts, 'yyyymmdd'),
                                 'yyyymmdd')) * 9

                        + case
                          when to_char(t.complete_dts, 'hh24miss') >
                               to_char(t.receive_dts, 'hh24miss') then
                           (case
                             when to_char(t.receive_dts, 'hh24') < '08' and
                                  to_char(t.complete_dts, 'hh24') < '08' then
                              0

                             when to_char(t.receive_dts, 'hh24') < '08' and
                                  to_char(t.complete_dts, 'hh24') >= '08' and
                                  to_char(t.complete_dts, 'hh24') < '17' then
                              (t.complete_dts -
                              to_date(to_char(t.complete_dts, 'yyyymmdd') ||
                                       ' 080000',
                                       'yyyymmdd hh24miss')) * 24

                             when to_char(t.receive_dts, 'hh24') < '08' and
                                  to_char(t.complete_dts, 'hh24') >= '17' then
                              9

                             when to_char(t.receive_dts, 'hh24') >= '08' and
                                  to_char(t.receive_dts, 'hh24') < '17' and
                                  to_char(t.complete_dts, 'hh24') >= '08' and
                                  to_char(t.complete_dts, 'hh24') < '17' then
                              (t.complete_dts - t.receive_dts -
                              (trunc(t.complete_dts) - trunc(t.receive_dts))) * 24

                             when to_char(t.receive_dts, 'hh24') >= '08' and
                                  to_char(t.receive_dts, 'hh24') < '17' and
                                  to_char(t.complete_dts, 'hh24') >= '17' then
                              (to_date(to_char(t.receive_dts, 'yyyymmdd') ||
                                       ' 170000',
                                       'yyyymmdd hh24miss') - t.receive_dts) * 24

                             when to_char(t.receive_dts, 'hh24') >= '17' and
                                  to_char(t.complete_dts, 'hh24') >= '17' then
                              0

                             else
                              0
                           end)
                          when to_char(t.complete_dts, 'hh24miss') <
                               to_char(t.receive_dts, 'hh24miss') then
                           (case
                             when to_char(t.complete_dts, 'hh24') < '08' and
                                  to_char(t.receive_dts, 'hh24') < '08' then
                              0

                             when to_char(t.complete_dts, 'hh24') < '08' and
                                  to_char(t.receive_dts, 'hh24') >= '08' and
                                  to_char(t.receive_dts, 'hh24') < '17' then
                              (to_date(to_char(t.receive_dts, 'yyyymmdd') ||
                                       ' 170000',
                                       'yyyymmdd hh24miss') - t.receive_dts) * 24 - 9

                             when to_char(t.complete_dts, 'hh24') < '08' and
                                  to_char(t.receive_dts, 'hh24') >= '17' then
                              -9

                             when to_char(t.complete_dts, 'hh24') >= '08' and
                                  to_char(t.complete_dts, 'hh24') < '17' and
                                  to_char(t.receive_dts, 'hh24') >= '08' and
                                  to_char(t.receive_dts, 'hh24') < '17' then
                              (t.complete_dts - t.receive_dts -
                              (trunc(t.complete_dts) - trunc(t.receive_dts))) * 24

                             when to_char(t.complete_dts, 'hh24') >= '08' and
                                  to_char(t.complete_dts, 'hh24') < '17' and
                                  to_char(t.receive_dts, 'hh24') >= '17' then
                              (t.complete_dts -
                              to_date(to_char(t.complete_dts, 'yyyymmdd') ||
                                       ' 080000',
                                       'yyyymmdd hh24miss')) * 24 - 9

                             when to_char(t.complete_dts, 'hh24') >= '17' and
                                  to_char(t.receive_dts, 'hh24') >= '17' then
                              0

                             else
                              0
                           end)
                        end,

         t.total_hours_p1 =
         (t.print_dts - t.receive_dts) * 24,
         t.work_hours_p1 = (to_date(to_char(t.print_dts, 'yyyymmdd'),
                                    'yyyymmdd') -
                           to_date(to_char(t.receive_dts, 'yyyymmdd'),
                                    'yyyymmdd')) * 9 + case
                             when to_char(t.print_dts, 'hh24miss') >
                                  to_char(t.receive_dts, 'hh24miss') then
                              (case
                                when to_char(t.receive_dts, 'hh24') < '08' and
                                     to_char(t.print_dts, 'hh24') < '08' then
                                 0

                                when to_char(t.receive_dts, 'hh24') < '08' and
                                     to_char(t.print_dts, 'hh24') >= '08' and
                                     to_char(t.print_dts, 'hh24') < '17' then
                                 (t.print_dts -
                                 to_date(to_char(t.print_dts, 'yyyymmdd') ||
                                          ' 080000',
                                          'yyyymmdd hh24miss')) * 24

                                when to_char(t.receive_dts, 'hh24') < '08' and
                                     to_char(t.print_dts, 'hh24') >= '17' then
                                 9

                                when to_char(t.receive_dts, 'hh24') >= '08' and
                                     to_char(t.receive_dts, 'hh24') < '17' and
                                     to_char(t.print_dts, 'hh24') >= '08' and
                                     to_char(t.print_dts, 'hh24') < '17' then
                                 (t.print_dts - t.receive_dts -
                                 (trunc(t.print_dts) - trunc(t.receive_dts))) * 24

                                when to_char(t.receive_dts, 'hh24') >= '08' and
                                     to_char(t.receive_dts, 'hh24') < '17' and
                                     to_char(t.print_dts, 'hh24') >= '17' then
                                 (to_date(to_char(t.receive_dts, 'yyyymmdd') ||
                                          ' 170000',
                                          'yyyymmdd hh24miss') - t.receive_dts) * 24

                                when to_char(t.receive_dts, 'hh24') >= '17' and
                                     to_char(t.print_dts, 'hh24') >= '17' then
                                 0
                                else
                                 0

                              end)
                             when to_char(t.print_dts, 'hh24miss') <
                                  to_char(t.receive_dts, 'hh24miss') then
                              (case
                                when to_char(t.print_dts, 'hh24') < '08' and
                                     to_char(t.receive_dts, 'hh24') < '08' then
                                 0

                                when to_char(t.print_dts, 'hh24') < '08' and
                                     to_char(t.receive_dts, 'hh24') >= '08' and
                                     to_char(t.receive_dts, 'hh24') < '17' then
                                 (to_date(to_char(t.receive_dts, 'yyyymmdd') ||
                                          ' 170000',
                                          'yyyymmdd hh24miss') - t.receive_dts) * 24 - 9

                                when to_char(t.print_dts, 'hh24') < '08' and
                                     to_char(t.receive_dts, 'hh24') >= '17' then
                                 -9

                                when to_char(t.print_dts, 'hh24') >= '08' and
                                     to_char(t.print_dts, 'hh24') < '17' and
                                     to_char(t.receive_dts, 'hh24') >= '08' and
                                     to_char(t.receive_dts, 'hh24') < '17' then
                                 (t.print_dts - t.receive_dts -
                                 (trunc(t.print_dts) - trunc(t.receive_dts))) * 24

                                when to_char(t.print_dts, 'hh24') >= '08' and
                                     to_char(t.print_dts, 'hh24') < '17' and
                                     to_char(t.receive_dts, 'hh24') >= '17' then
                                 (t.print_dts -
                                 to_date(to_char(t.print_dts, 'yyyymmdd') ||
                                          ' 080000',
                                          'yyyymmdd hh24miss')) * 24 - 9

                                when to_char(t.print_dts, 'hh24') >= '17' and
                                     to_char(t.receive_dts, 'hh24') >= '17' then
                                 0
                                else
                                 0
                              end)
                           end;
  update wf_stat_tmp t
     set t.total_hours_p2 = t.total_hours - t.total_hours_p1,
         t.work_hours_p2  = t.work_hours - t.work_hours_p1;
  commit;

  insert into wf_stat_record
    select WOP_ORDER_ID,
           PLANE_TYPE,
           RECEIVE_DTS,
           PRINT_DTS,
           COMPLETE_DTS,
           TOTAL_HOURS,
           TOTAL_HOURS_P1,
           TOTAL_HOURS_P2,
           WORK_HOURS,
           WORK_HOURS_P1,
           WORK_HOURS_P2,
           'N'
      from wf_stat_tmp;
  commit;

  if to_char(vin_comp_time, 'dd') = '01' then
    insert into wf_stat_sc0
      select to_char(vin_comp_time - 2, 'yyyyMM'),
             sysdate,
             t.plane_type,
             count(*),
             avg(t.total_hours),
             avg(t.total_hours_p1),
             avg(t.total_hours_p2),
             avg(t.work_hours),
             avg(t.work_hours_p1),
             avg(t.work_hours_p2)
        from wf_stat_record t
       where t.is_delete = 'N'
         and t.complete_dts >= to_date(to_char(vin_comp_time - 2, 'yyyyMM') || '01',
                                      'yyyyMMdd')
       group by t.plane_type;
    commit;
  else
    insert into wf_stat_sc0
      select to_char(vin_comp_time, 'yyyyMMdd'),
             sysdate,
             t.plane_type,
             count(*),
             avg(t.total_hours),
             avg(t.total_hours_p1),
             avg(t.total_hours_p2),
             avg(t.work_hours),
             avg(t.work_hours_p1),
             avg(t.work_hours_p2)
        from wf_stat_record t
       where t.is_delete = 'N'
         and t.complete_dts >=
             to_date(to_char(vin_comp_time, 'yyyyMM') || '01', 'yyyyMMdd')
       group by t.plane_type;
    commit;
  end if;

  /*insert into wf_stat_sc0
    select --t.wop_order_id,  (t.complete_dts-t.receive_dts),
     to_char(sysdate, 'yyyyMMdd'),
     sysdate,
     t.plane_type,
     count(*),
     avg(t.complete_dts - t.receive_dts)
      from wp_srq t
     where t.plane_type in ('104', '145', '144', '172', '79', 'C24', 'C37',
            'C36', 'C42', 'C50', 'C38', 'C23')
       and t.status in (105, 253)
       and t.complete_dts <
           to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 00:00',
                   'yyyymmdd hh24:mi')
       and t.complete_dts >=
           to_date(to_char(vin_comp_time - 1, 'yyyyMMdd') || ' 00:00',
                   'yyyymmdd hh24:mi')
     group by t.plane_type;
  commit;

  if to_char(vin_comp_time, 'dd') = '01' then
    insert into wf_stat_sc0
      select substr(t.st_no, 1, 6),
             sysdate,
             t.plane_type,
             sum(t.order_num),
             sum(t.order_num * t.avg_days) / sum(t.order_num)
        from wf_stat_sc0 t
       where t.st_no like to_char(vin_comp_time - 2, 'yyyyMM') || '%'
       group by substr(t.st_no, 1, 6), t.plane_type;
    commit;
  end if;*/
end;
/

-- ----------------------------
-- Procedure structure for WF_STAT_COMP
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_COMP"(vin_comp_time in date,
                                         NERR          out number,
                                         SERR          out varchar2) is

begin
  NERR := 0;
  begin
    --方案统计
    FOR os IN (select o.fo_id FOID,
                      o.fo_ver FOVER,
                      o.reference ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = o.flow_state) FOSTA,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_source'
                          and rownum = 1) OS,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.dict_id = 'business_type'
                          and rownum <= 1) ST,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_owner'
                          and rownum = 1) OCO,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select k.remark_val
                                 from wf_ord_remark k
                                where k.fo_id = o.fo_id
                                  and k.remark_key = 'ord_owner_dept'
                                  and rownum = 1)) OCOD, --区局分类
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.dict_id = 'sf_jt_flag') IGP, --区局分类
                      (select count(*)
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.task_id in (9001, 9011)
                          and k.remark_key = 'dept_no'
                          and k.remark_val = '11') IDG, --区局分类
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (13, 23)
                          and fo_ver <= o.fo_ver
                          and owner <> 'WFP'
                          and rownum = 1) GPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and task_id in (13, 23)
                                                          and fo_ver <= o.fo_ver
                                                          and owner <> 'WFP'
                                                          and rownum = 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) GPMD,
                      (select count(*)
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (9001, 9011)) SPA,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101) IBS,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101),
                              'yyyy-mm-dd hh24:mi:ss') IBST,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 103),
                              'yyyy-mm-dd hh24:mi:ss') BSPT,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = o.fo_id
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSR, --new
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = o.fo_id
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(o.create_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      to_char(o.expect_compl_dts, 'yyyy-mm-dd hh24:mi:ss') FDT,
                      -- keep null
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_type = 'C'
                                 and fo_ver = o.fo_ver
                                 and fo_ver > 1),
                              'yyyy-mm-dd hh24:mi:ss') OAT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (16, 26)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') OST,
                      (select count(*)
                         from wf_ord
                        where reference like
                              (select k.remark_val
                                 from wf_ord_remark k
                                where k.fo_id = o.fo_id
                                  and k.task_id = 13
                                  and k.remark_key = 'ref_no'
                                  and k.remark_val is not null
                                  and rownum <= 1) || '-%') ISC,
                      (select round(to_number(complete_dts - o.create_dts))
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (16, 26)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1403
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1404
                          and n.value is not null
                          and rownum <= 1) TORD,
                      -- keep null
                      -- keep null
                      (select task_id
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and state in (1, 2, 3, 4, 6)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) CT,
                      (select r.reso_id
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'prot_no') DK,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'buzopt_sn') BN,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'jt_no') JTNO,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'user_request_date') URD,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'urgent') URG,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_name') CN,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_code') CC,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_contact_person') CP,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_contact_tel') CPT,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager') CM,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager_tel') CMT,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager_dept') CMTD,
                      o.complete_dts complete_dts
               --
                 from wf_ord o
                where o.flow_id in (11, 21)
                  and o.complete_dts >=
                      to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.complete_dts >
                      to_date(to_char(vin_comp_time - 1, 'yyyyMMdd') ||
                              ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.flow_state = 5 --在途 2,7 完工 5
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op1
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           1,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           os.OS,
           os.ST,
           os.OCO,
           os.OCOD,
           os.IGP, --10
           os.IDG,
           os.GPM,
           os.GPMD,
           os.SPA,
           os.IBS,
           os.IBST,
           os.BSPT,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           null,
           os.OAT,
           os.OST,
           os.ISC,
           os.DUR,
           os.TOR,
           os.TORD,
           NULL,
           NULL, --30
           os.CT,
           to_char(os.complete_dts,'yyyy/mm/dd'), -- complete date
           os.DK,
           os.BN,
           os.JTNO,
           os.URD,
           os.URG,
           os.CN,
           os.CC,
           os.CP, --40
           null,
           os.CPT,
           os.CM,
           os.CMT,
           os.CMTD,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL, --50
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;
  end;

  begin
    --子方案统计
    FOR os IN (select f.fo_id FOID,
                      f.fo_ver FOVER,
                      o.reference ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = f.state) FOSTA,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'pt_resource_exist') IRE,
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (13, 23)
                          and fo_ver <= o.fo_ver
                          and owner <> 'WFP'
                          and rownum = 1) BPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and task_id in (13, 23)
                                                          and fo_ver <= o.fo_ver
                                                          and owner <> 'WFP'
                                                          and rownum = 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) BPMD,
                      (select count(*)
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (9001, 9011)) SPA,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.note_id = 103) IBSP,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.fo_sn = f.fo_sn
                                 and n.note_id = 103),
                              'yyyy-mm-dd hh24:mi:ss') BSPT,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 103)
                          and note_id = 103
                          and rownum <= 1) BSPR,
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 103)
                          and note_id = 103
                          and rownum <= 1) BSPRD,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSR,
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(f.receive_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_expect_complete_date'
                          and rownum = 1) FDT,
                      to_char((select expect_compl_dts
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and fo_sn = f.fo_sn),
                              'yyyy-mm-dd hh24:mi:ss') TDT,
                      --keep null
                      --keep null, COMPLETE_DTS
                      --keep null
                      (select round(to_number(f.complete_dts - f.receive_dts))
                         from dual) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1403
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1404
                          and n.value is not null
                          and rownum <= 1) TORD,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'late_reason_code') TTOR,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'late_reason_desc') TTORD,
                      f.task_id TASKID,
                      to_char(f.complete_dts, 'yyyy-mm-dd hh24:mi:ss') TCT,
                      ri.reso_id DK,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and fo_sn = f.fo_sn) PP,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and fo_sn = f.fo_sn)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) PPD,
                      --keep null
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'install_address') IADR,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 102) IBG,
                       o.complete_dts complete_dts
               --keep null 
               --keep null
               --keep null
               --keep null
                 from wf_ord o,
                      wf_ord_flow f,
                      (select fo_id, value, reso_id
                         from wf_ord_reso
                        where dict_id = 'fo_sn') ri
                where o.flow_id in (11, 21)
                  and o.complete_dts >=
                      to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.complete_dts >
                      to_date(to_char(vin_comp_time - 1, 'yyyyMMdd') ||
                              ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.fo_id = f.fo_id
                  and ri.value = f.fo_sn
                  and ri.fo_id = o.fo_id
                  and f.task_id in (9001, 9011)
                  and o.flow_state = 5 --在途 2,7 完工 5
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op1
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           2,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL, --10
           os.IRE,
           os.BPM,
           os.BPMD,
           os.SPA,
           os.IBSP,
           os.BSPT,
           os.BSPR,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           os.TDT,
           null,
           os.TCT,
           null,
           os.DUR,
           os.TOR,
           os.TORD,
           os.ttor,
           os.ttord, --30
           os.TASKID,
           to_char(os.complete_dts,'yyyy/mm/dd'), -- complete date
           os.DK,
           NULL,
           NULL,
           NULL,
           NULL,
           os.PP,
           os.PPD,
           NULL, --40
           os.iadr,
           NULL,
           NULL,
           NULL,
           NULL,
           os.IBG,
           os.BSRD,
           NULL,
           NULL,
           NULL, --50
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;
  end;

  begin
    --工程建设统计
    FOR os IN (select f.fo_id FOID,
                      f.fo_ver FOVER,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'zqkh_no'
                          and rownum <= 1) ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = o.flow_state) FOSTA,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_source'
                          and rownum <= 1) OS,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_owner'
                          and rownum <= 1) OCO,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select k.remark_val
                                                         from wf_ord_remark k
                                                        where k.fo_id = f.fo_id
                                                          and k.fo_sn = f.fo_sn
                                                          and k.remark_key =
                                                              'ord_owner'
                                                          and rownum <= 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) OCOD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1064) IGP,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'execute_pm'
                          and rownum <= 1) BPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_CONST'
                          and dict_id = 'bureau'
                          and data_code = (select k.remark_val
                                             from wf_ord_remark k
                                            where k.fo_id = f.fo_id
                                              and k.fo_sn = f.fo_sn
                                              and k.remark_key = 'dept_no'
                                              and rownum <= 1)
                          and rownum <= 1) BPMD,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'govsup_pm'
                          and rownum <= 1) BGPM,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBS,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = f.fo_id
                                 and n.note_id = 101
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') IBST,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner = 'WX') IWXSUP,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSR,
                      (select remark
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(o.create_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_expect_complete_date'
                          and rownum = 1) FDT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 102
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') LBGPMT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') LBBPMT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (9)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') OST,
                      --keep null
                      (select round(to_number(o.complete_dts - o.create_dts))
                         from dual) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1057
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1058
                          and n.value is not null
                          and rownum <= 1) TORD,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 102
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBGPM,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') WXSUPT,
                      (select task_id
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and state in (1, 2, 3, 4, 6)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) CT,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ref_no'
                          and rownum <= 1) DK,
                      (select crm_order_id
                         from wp_srq
                        where p6_order_id = o.so_no
                          and rownum <= 1) CRMID,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'jt_no'
                          and rownum <= 1) JTNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1031) URD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1033) IURG,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'proj_no'
                          and rownum <= 1) PROJNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1210
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) BOXNO,
                       o.complete_dts complete_dts
                 from wf_ord o, wf_ord_flow f
                where o.flow_id in (1) --配光缆
                  and o.flow_state = 5 -- 在途2 7 完工 5
                  and o.complete_dts >=
                      to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.complete_dts >
                      to_date(to_char(vin_comp_time - 1, 'yyyyMMdd') ||
                              ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.fo_id = f.fo_id
                  and o.fo_ver = f.fo_ver
                  and f.task_id in (2)
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op1
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           3,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           os.OS,
           NULL,
           os.OCO,
           os.OCOD,
           os.IGP, --10
           NULL,
           os.BPM,
           os.BPMD,
           os.BGPM,
           os.IBS,
           os.IBST,
           os.IWXSUP,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           os.LBGPMT,
           os.LBBPMT,
           os.OST,
           null,
           os.DUR,
           os.TOR,
           os.TORD,
           os.IBGPM,
           os.WXSUPT, --30
           os.CT,
           to_char(os.complete_dts,'yyyy/mm/dd'), -- complete date
           os.DK,
           os.CRMID,
           os.JTNO,
           os.URD,
           os.IURG,
           NULL,
           NULL,
           NULL, --40
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           os.PROJNO,
           os.BOXNO,
           NULL,
           NULL,
           NULL, --50
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;

  end;
end WF_STAT_COMP;
/

-- ----------------------------
-- Procedure structure for WF_STAT_CUT_ORDERS
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_CUT_ORDERS"(vin_start_time in varchar,
                                               vin_end_time   in varchar,
                                               vin_plane_type in varchar,
                                               nerr           out number,
                                               verr           out varchar) is
  v_start_time date;
  v_end_time   date;
begin
  nerr         := 0;
  v_start_time := to_date(vin_start_time, 'yyyy-mm-dd hh24:mi:ss');
  v_end_time   := to_date(vin_end_time, 'yyyy-mm-dd hh24:mi:ss');
  if to_char(v_start_time, 'yyyyMM') != to_char(v_end_time, 'yyyyMM') then
    nerr := 10001;
    verr := '起止日期必须在同一个月内';
    return;
  end if;
  if vin_plane_type not in ('104',
                            '145',
                            '144',
                            '172',
                            '79',
                            'C24',
                            'C37',
                            'C36',
                            'C42',
                            'C50',
                            'C38',
                            'C23') then
    nerr := 10002;
    verr := vin_plane_type || '不在统计范围之内';
    return;
  end if;
  update wf_stat_record t
     set t.is_delete = 'Y'
   where t.plane_type = vin_plane_type
     and t.receive_dts between v_start_time and v_end_time;
  verr := '成功剔除' || sql%rowcount || '条数据';
  commit;
  if to_char(v_start_time, 'yyyyMM') = to_char(sysdate, 'yyyyMM') then
    delete wf_stat_sc0 t
     where t.st_no = to_char(v_start_time, 'yyyyMMdd')
       and t.plane_type = vin_plane_type;
    insert into wf_stat_sc0
      select to_char(v_start_time, 'yyyyMMdd'),
             sysdate,
             t.plane_type,
             count(*),
             avg(t.total_hours),
             avg(t.total_hours_p1),
             avg(t.total_hours_p2),
             avg(t.work_hours),
             avg(t.work_hours_p1),
             avg(t.work_hours_p2)
        from wf_stat_record t
       where t.is_delete = 'N'
         and t.complete_dts >=
             to_date(to_char(v_start_time, 'yyyyMM') || '01', 'yyyyMMdd')
         and t.plane_type = vin_plane_type
       group by t.plane_type;
    commit;
  else
    delete wf_stat_sc0 t
     where t.st_no = to_char(v_start_time, 'yyyyMM')
       and t.plane_type = vin_plane_type;
    insert into wf_stat_sc0
      select to_char(v_start_time, 'yyyyMM'),
             sysdate,
             t.plane_type,
             count(*),
             avg(t.total_hours),
             avg(t.total_hours_p1),
             avg(t.total_hours_p2),
             avg(t.work_hours),
             avg(t.work_hours_p1),
             avg(t.work_hours_p2)
        from wf_stat_record t
       where t.is_delete = 'N'
         and t.complete_dts >=
             to_date(to_char(v_start_time, 'yyyyMM') || '01', 'yyyyMMdd')
         and t.complete_dts <
             to_date(to_char(add_months(trunc(v_start_time), 1), 'yyyymm') || '01',
                     'yyyyMMdd')
         and t.plane_type = vin_plane_type
       group by t.plane_type;
    commit;
  end if;
EXCEPTION
  WHEN OTHERS THEN
    nerr := SQLCODE;
    verr := Sqlerrm;
end;
/

-- ----------------------------
-- Procedure structure for WF_STAT_ON_WAY
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_ON_WAY"(vin_comp_time in date,
                                           vin_range_days in number,
                                         NERR          out number,
                                         SERR          out varchar2) is
begin
  NERR := 0;
  begin
    --方案统计
    FOR os IN (select o.fo_id FOID,
                      o.fo_ver FOVER,
                      o.reference ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = o.flow_state) FOSTA,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_source'
                          and rownum = 1) OS,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.dict_id = 'business_type'
                          and rownum <= 1) ST,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_owner'
                          and rownum = 1) OCO,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select k.remark_val
                                 from wf_ord_remark k
                                where k.fo_id = o.fo_id
                                  and k.remark_key = 'ord_owner_dept'
                                  and rownum = 1)) OCOD, --区局分类
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.dict_id = 'sf_jt_flag'
                          and rownum = 1) IGP, --区局分类
                      (select count(*)
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.task_id in (9001, 9011)
                          and k.remark_key = 'dept_no'
                          and k.remark_val = '11') IDG, --区局分类
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (13, 23)
                          and fo_ver <= o.fo_ver
                          and owner <> 'WFP'
                          and rownum = 1) GPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and task_id in (13, 23)
                                                          and fo_ver <= o.fo_ver
                                                          and owner <> 'WFP'
                                                          and rownum = 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) GPMD,
                      (select count(*)
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (9001, 9011)) SPA,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101) IBS,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101),
                              'yyyy-mm-dd hh24:mi:ss') IBST,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 103),
                              'yyyy-mm-dd hh24:mi:ss') BSPT,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = o.fo_id
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSR, --new
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = o.fo_id
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(o.create_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      to_char(o.expect_compl_dts, 'yyyy-mm-dd hh24:mi:ss') FDT,
                      -- keep null
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_type = 'C'
                                 and fo_ver = o.fo_ver
                                 and fo_ver > 1),
                              'yyyy-mm-dd hh24:mi:ss') OAT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (16, 26)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') OST,
                      (select count(*)
                         from wf_ord
                        where reference like
                              (select k.remark_val
                                 from wf_ord_remark k
                                where k.fo_id = o.fo_id
                                  and k.task_id = 13
                                  and k.remark_key = 'ref_no'
                                  and k.remark_val is not null
                                  and rownum <= 1) || '-%') ISC,
                      (select round(to_number(complete_dts - o.create_dts))
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (16, 26)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1403
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1404
                          and n.value is not null
                          and rownum <= 1) TORD,
                      -- keep null
                      -- keep null
                      (select task_id
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and state in (1, 2, 3, 4, 6)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) CT,
                      (select r.reso_id
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'prot_no'
                          and rownum <= 1) DK,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'buzopt_sn'
                          and rownum <= 1) BN,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'jt_no'
                          and rownum <= 1) JTNO,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'user_request_date'
                          and rownum <= 1) URD,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'urgent'
                          and rownum <= 1) URG,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_name'
                          and rownum <= 1) CN,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_code'
                          and rownum <= 1) CC,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_contact_person'
                          and rownum <= 1) CP,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_contact_tel'
                          and rownum <= 1) CPT,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager'
                          and rownum <= 1) CM,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager_tel'
                          and rownum <= 1) CMT,
                      (select r.value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_type = 'ServiceData'
                          and r.dict_id = 'customer_manager_dept'
                          and rownum <= 1) CMTD
               --
                 from wf_ord o
                where o.flow_id in (11, 21)
                  --and to_char(o.create_dts, 'yyyyMMdd') >= '20150318'
                     --and to_char(o.create_dts, 'yyyyMMdd')<='20150228'
                  and ((o.ftx_operate_dts < sysdate - vin_range_days and
                      o.flow_status < 94 and o.flow_status <> 1) or
                      (o.ftx_operate_dts >= sysdate - vin_range_days)) --在途30内建单修订及超30天还未报竣
                  and o.flow_state in (2, 7) --在途 2,7 完工 5
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op0
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           1,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           os.OS,
           os.ST,
           os.OCO,
           os.OCOD,
           os.IGP, --10
           os.IDG,
           os.GPM,
           os.GPMD,
           os.SPA,
           os.IBS,
           os.IBST,
           os.BSPT,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           null,
           os.OAT,
           os.OST,
           os.ISC,
           os.DUR,
           os.TOR,
           os.TORD,
           NULL,
           NULL, --30
           os.CT,
           null, -- complete date
           os.DK,
           os.BN,
           os.JTNO,
           os.URD,
           os.URG,
           os.CN,
           os.CC,
           os.CP, --40
           null,
           os.CPT,
           os.CM,
           os.CMT,
           os.CMTD,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL, --50
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;

  end;

  begin
    --子方案统计
    FOR os IN (select f.fo_id FOID,
                      f.fo_ver FOVER,
                      o.reference ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = f.state) FOSTA,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'pt_resource_exist'
                          and rownum = 1) IRE,
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (13, 23)
                          and fo_ver <= o.fo_ver
                          and owner <> 'WFP'
                          and rownum = 1) BPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and task_id in (13, 23)
                                                          and fo_ver <= o.fo_ver
                                                          and owner <> 'WFP'
                                                          and rownum = 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) BPMD,
                      (select count(*)
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and task_id in (9001, 9011)) SPA,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.note_id = 103) IBSP,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.fo_sn = f.fo_sn
                                 and n.note_id = 103),
                              'yyyy-mm-dd hh24:mi:ss') BSPT,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 103)
                          and note_id = 103
                          and rownum <= 1) BSPR,
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 103)
                          and note_id = 103
                          and rownum <= 1) BSPRD,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSR,
                      (select substr(remark, 1, 150)
                         from wf_ord_notify
                        where add_dts = (select max(add_dts)
                                           from wf_ord_notify n
                                          where n.fo_id = f.fo_id
                                            and n.fo_sn = f.fo_sn
                                            and n.note_id = 101)
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(f.receive_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_expect_complete_date'
                          and rownum = 1) FDT,
                      to_char((select expect_compl_dts
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and fo_sn = f.fo_sn),
                              'yyyy-mm-dd hh24:mi:ss') TDT,
                      --keep null
                      --keep null, COMPLETE_DTS
                      --keep null
                      (select round(to_number(f.complete_dts - f.receive_dts))
                         from dual) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1403
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1404
                          and n.value is not null
                          and rownum <= 1) TORD,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'late_reason_code'
                          and rownum = 1) TTOR,
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'late_reason_desc'
                          and rownum = 1) TTORD,
                      f.task_id TASKID,
                      to_char(f.complete_dts, 'yyyy-mm-dd hh24:mi:ss') TCT,
                      ri.reso_id DK,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select owner
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and fo_sn = f.fo_sn) PP,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select owner
                                                         from wf_ord_flow
                                                        where fo_id = o.fo_id
                                                          and fo_sn = f.fo_sn)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) PPD,
                      --keep null
                      (select value
                         from wf_ord_reso r
                        where r.fo_id = o.fo_id
                          and r.reso_id = ri.reso_id
                          and r.dict_id = 'install_address'
                          and rownum <= 1) IADR,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 102) IBG

               --keep null
               --keep null
               --keep null
               --keep null
                 from wf_ord o,
                      wf_ord_flow f,
                      (select fo_id, value, reso_id
                         from wf_ord_reso
                        where dict_id = 'fo_sn') ri
                where o.flow_id in (11, 21)
                  --and to_char(o.create_dts, 'yyyyMMdd') >= '20150318'
                     --and to_char(o.create_dts, 'yyyyMMdd')<='20150228'
                  and ((o.ftx_operate_dts < sysdate - vin_range_days and
                      o.flow_status < 94 and o.flow_status <> 1) or
                      (o.ftx_operate_dts >= sysdate - vin_range_days)) --在途30内建单修订及超30天还未报竣
                  and o.fo_id = f.fo_id
                  and ri.value = f.fo_sn
                  and ri.fo_id = o.fo_id
                  and f.task_id in (9001, 9011)
                  and o.flow_state in (2, 7) --在途 2,7 完工 5
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op0
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           2,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL, --10
           os.IRE,
           os.BPM,
           os.BPMD,
           os.SPA,
           os.IBSP,
           os.BSPT,
           os.BSPR,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           os.TDT,
           null,
           os.TCT,
           null,
           os.DUR,
           os.TOR,
           os.TORD,
           os.ttor,
           os.ttord, --30
           os.TASKID,
           NULL, -- complete date
           os.DK,
           NULL,
           NULL,
           NULL,
           NULL,
           os.PP,
           os.PPD,
           NULL, --40
           os.iadr,
           NULL,
           NULL,
           NULL,
           NULL,
           os.IBG,
           os.BSRD,
           NULL,
           NULL,
           NULL, --50
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;

  end;

  begin
    --工程建设统计
    FOR os IN (select f.fo_id FOID,
                      f.fo_ver FOVER,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'zqkh_no'
                          and rownum <= 1) ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = o.flow_state) FOSTA,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_source'
                          and rownum <= 1) OS,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_owner'
                          and rownum <= 1) OCO,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select k.remark_val
                                                         from wf_ord_remark k
                                                        where k.fo_id = f.fo_id
                                                          and k.fo_sn = f.fo_sn
                                                          and k.remark_key =
                                                              'ord_owner'
                                                          and rownum <= 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) OCOD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1064
                          and rownum = 1) IGP,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'execute_pm'
                          and rownum <= 1) BPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_CONST'
                          and dict_id = 'bureau'
                          and data_code = (select k.remark_val
                                             from wf_ord_remark k
                                            where k.fo_id = f.fo_id
                                              and k.fo_sn = f.fo_sn
                                              and k.remark_key = 'dept_no'
                                              and rownum <= 1)
                          and rownum <= 1) BPMD,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'govsup_pm'
                          and rownum <= 1) BGPM,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBS,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = f.fo_id
                                 and n.note_id = 101
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') IBST,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner = 'WX') IWXSUP,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSR,
                      (select remark
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(o.create_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_expect_complete_date'
                          and rownum = 1) FDT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 102
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') LBGPMT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') LBBPMT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (9)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') OST,
                      --keep null
                      (select round(to_number(o.complete_dts - o.create_dts))
                         from dual) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1057
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1058
                          and n.value is not null
                          and rownum <= 1) TORD,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 102
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBGPM,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') WXSUPT,
                      (select task_id
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and state in (1, 2, 3, 4, 6)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) CT,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ref_no'
                          and rownum <= 1) DK,
                      (select crm_order_id
                         from wp_srq
                        where p6_order_id = o.so_no
                          and rownum <= 1) CRMID,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'jt_no'
                          and rownum <= 1) JTNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1031
                          and rownum <= 1) URD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1033
                          and rownum <= 1) IURG,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'proj_no'
                          and rownum <= 1) PROJNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1210
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) BOXNO,
                      --p6id
                      (select so_no
                         from wf_ord 
                         where substr(reference,1,2)='2-' 
                         and fo_id = o.fo_id) P6ID, 
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1110
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) RSMNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1111
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) PUST,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1220
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ART,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1221
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ACST,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1227
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ACCT
                 from wf_ord o, wf_ord_flow f
                where o.flow_id in (1,4) --配光缆
                  and o.flow_state in (2,5,7) -- 在途2 7 完工 5
                  and o.create_dts <=
                      to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.create_dts >
                      to_date(to_char(vin_comp_time - vin_range_days, 'yyyyMMdd') ||
                              ' 21:00',
                              'yyyymmdd hh24:mi')
                  --and to_char(o.create_dts, 'yyyyMMdd') >= '20150318'
                     --and to_char(o.create_dts, 'yyyyMMdd')<='20141130'
                  and o.fo_id = f.fo_id
                  and o.fo_ver = f.fo_ver
                  and f.task_id in (2,43)
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op0
        values
          (to_number(to_char(sysdate, 'yyyyMMdd'), '99999999'),
           sysdate,
           3,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           os.OS,
           NULL,
           os.OCO,
           os.OCOD,
           os.IGP, --10
           NULL,
           os.BPM,
           os.BPMD,
           os.BGPM,
           os.IBS,
           os.IBST,
           os.IWXSUP,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           os.LBGPMT,
           os.LBBPMT,
           os.OST,
           null,
           os.DUR,
           os.TOR,
           os.TORD,
           os.IBGPM,
           os.WXSUPT, --30
           os.CT,
           NULL, -- complete date
           os.DK,
           os.CRMID,
           os.JTNO,
           os.URD,
           os.IURG,
           NULL,
           NULL,
           NULL, --40
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           os.PROJNO,
           os.BOXNO,
           os.p6id,
           os.rsmno,
           os.art, --50
           os.pust,
           os.acst,
           os.acct,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;

  end;
end WF_STAT_ON_WAY;
/

-- ----------------------------
-- Procedure structure for WF_STAT_ON_WAY_CONST
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_ON_WAY_CONST"(vin_comp_time in date,
                                           vin_range_days in number,
                                         NERR          out number,
                                         SERR          out varchar2) is
begin
  NERR := 0;
  begin
    --工程建设统计
    FOR os IN (select f.fo_id FOID,
                      f.fo_ver FOVER,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'zqkh_no'
                          and rownum <= 1) ZQKH,
                      o.flow_id FID,
                      (select status_desc
                         from wf_ord_status
                        where status_id = o.flow_state) FOSTA,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_source'
                          and rownum <= 1) OS,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ord_owner'
                          and rownum <= 1) OCO,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_PLAN'
                          and dict_id = 'dept_no'
                          and data_code =
                              (select g.org_no
                                 from wf_organization g
                                where g.org_id in
                                      (select t.org_id
                                         from wf_user_org t
                                        where t.user_id in
                                              (select admin_id
                                                 from wp_user
                                                where admin_name =
                                                      (select k.remark_val
                                                         from wf_ord_remark k
                                                        where k.fo_id = f.fo_id
                                                          and k.fo_sn = f.fo_sn
                                                          and k.remark_key =
                                                              'ord_owner'
                                                          and rownum <= 1)
                                                  and plane_id = 'wfp'))
                                  and g.org_type = 0
                                  and rownum = 1)) OCOD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1064
                          and rownum = 1) IGP,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'execute_pm'
                          and rownum <= 1) BPM,
                      (select data_desc
                         from wf_data_lookup
                        where serv_category = 'COMM_CONST'
                          and dict_id = 'bureau'
                          and data_code = (select k.remark_val
                                             from wf_ord_remark k
                                            where k.fo_id = f.fo_id
                                              and k.fo_sn = f.fo_sn
                                              and k.remark_key = 'dept_no'
                                              and rownum <= 1)
                          and rownum <= 1) BPMD,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'govsup_pm'
                          and rownum <= 1) BGPM,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBS,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = f.fo_id
                                 and n.note_id = 101
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') IBST,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 101
                          and n.owner = 'WX') IWXSUP,
                      (select excep_type
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSR,
                      (select remark
                         from wf_ord_notify
                        where add_dts =
                              (select max(add_dts)
                                 from wf_ord_notify n
                                where n.fo_id = f.fo_id
                                  and n.note_id = 101
                                  and excep_type is not null)
                          and fo_id = o.fo_id
                          and note_id = 101
                          and rownum <= 1) BSRD,
                      to_char(o.create_dts, 'yyyy-mm-dd hh24:mi:ss') OCT,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = o.fo_id
                          and k.remark_key = 'ord_expect_complete_date'
                          and rownum = 1) FDT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 102
                                 and n.owner not in ('WFP', 'WX')
                                 and excep_type is not null),
                              'yyyy-mm-dd hh24:mi:ss') LBGPMT,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') LBBPMT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (9)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') OST,
                      --keep null
                      (select round(to_number(o.complete_dts - o.create_dts))
                         from dual) DUR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1057
                          and n.value is not null
                          and rownum <= 1) TOR,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = o.fo_id
                          and n.data_id = 1058
                          and n.value is not null
                          and rownum <= 1) TORD,
                      (select count(*)
                         from wf_ord_notify n
                        where n.fo_id = o.fo_id
                          and n.note_id = 102
                          and n.owner not in ('WFP', 'WX')
                          and excep_type is not null) IBGPM,
                      to_char((select max(add_dts)
                                from wf_ord_notify n
                               where n.fo_id = o.fo_id
                                 and n.note_id = 101
                                 and n.owner = 'WX'),
                              'yyyy-mm-dd hh24:mi:ss') WXSUPT,
                      (select task_id
                         from wf_ord_flow
                        where fo_id = o.fo_id
                          and state in (1, 2, 3, 4, 6)
                          and fo_ver = o.fo_ver
                          and rownum <= 1) CT,
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'ref_no'
                          and rownum <= 1) DK,
                      (select crm_order_id
                         from wp_srq
                        where p6_order_id = o.so_no
                          and rownum <= 1) CRMID,
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'jt_no'
                          and rownum <= 1) JTNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1031
                          and rownum <= 1) URD,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.fo_sn = f.fo_sn
                          and n.data_id = 1033
                          and rownum <= 1) IURG,
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      --keep null
                      (select k.remark_val
                         from wf_ord_remark k
                        where k.fo_id = f.fo_id
                          and k.fo_sn = f.fo_sn
                          and k.remark_key = 'proj_no'
                          and rownum <= 1) PROJNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1210
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) BOXNO,
                      --p6id
                      (select so_no
                         from wf_ord
                         where substr(reference,1,2)='2-'
                         and fo_id = o.fo_id
                         and reference is not null) P6ID,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1110
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) RSMNO,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1111
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) PUST,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1220
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ART,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1221
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ACST,
                      (select n.value
                         from wf_ord_snap n
                        where n.fo_id = f.fo_id
                          and n.data_id = 1227
                          and n.value is not null
                          and n.value <> 'null'
                          and rownum <= 1) ACCT,
                      to_char((select max(complete_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (5)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') ACPST,
                      to_char((select max(receive_dts)
                                from wf_ord_flow
                               where fo_id = o.fo_id
                                 and task_id in (7)
                                 and fo_ver = o.fo_ver
                                 and rownum <= 1),
                              'yyyy-mm-dd hh24:mi:ss') ACPET
                 from wf_ord o, wf_ord_flow f
                where o.flow_id in (1,4) --配光缆
                  and o.flow_state in (2,5,7) -- 在途2 7 完工 5
                  and o.create_dts <=
                      to_date(to_char(vin_comp_time, 'yyyyMMdd') || ' 21:00',
                              'yyyymmdd hh24:mi')
                  and o.create_dts >
                      to_date(to_char(vin_comp_time - vin_range_days, 'yyyyMMdd') ||
                              ' 21:00',
                              'yyyymmdd hh24:mi')
                  --and to_char(o.create_dts, 'yyyyMMdd') >= '20150318'
                     --and to_char(o.create_dts, 'yyyyMMdd')<='20141130'
                  and o.fo_id = f.fo_id
                  and o.fo_ver = f.fo_ver
                  and f.task_id in (2,43)
                order by o.fo_id desc) LOOP
      BEGIN
        insert into Wf_Stat_Op0
        values
          (to_number(to_char(vin_comp_time, 'yyyyMMdd'), '99999999'),
           sysdate,
           3,
           1,
           os.FOID,
           os.FOVER,
           os.ZQKH,
           os.FID,
           os.FOSTA,
           os.OS,
           NULL,
           os.OCO,
           os.OCOD,
           os.IGP, --10
           NULL,
           os.BPM,
           os.BPMD,
           os.BGPM,
           os.IBS,
           os.IBST,
           os.IWXSUP,
           os.BSR,
           os.BSRD,
           os.OCT, --20
           os.FDT,
           os.LBGPMT,
           os.LBBPMT,
           os.OST,
           null,
           os.DUR,
           os.TOR,
           os.TORD,
           os.IBGPM,
           os.WXSUPT, --30
           os.CT,
           NULL, -- complete date
           os.DK,
           os.CRMID,
           os.JTNO,
           os.URD,
           os.IURG,
           NULL,
           NULL,
           NULL, --40
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           os.PROJNO,
           os.BOXNO,
           os.p6id,
           os.rsmno,
           os.pust, --50
           os.art,
           os.acst,
           os.acct,
           os.acpst,
           os.acpet,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL --60
           );
        commit;
      END;
    END LOOP;
  end;
  begin
  delete from Wf_Stat_Op0 where st_no < to_number(to_char(vin_comp_time-180, 'yyyyMMdd'),'99999999');
  commit;
  end;
  end WF_STAT_ON_WAY_CONST;
/

-- ----------------------------
-- Procedure structure for WF_STAT_SUSP
-- ----------------------------
CREATE OR REPLACE procedure "WOPDB"."WF_STAT_SUSP"(vin_comp_time in date,
                                         vin_range_days in number,
                                         NERR          out number,
                                         SERR          out varchar2) is
begin
  NERR := 0;
  --综资挂起 传输
  begin
    FOR sp IN (
      select
      (r.crm_order_id) crmid,
      (r.remark1) linkid, --传输remark1 交换remark4 集团remark3
      (r.remark10) prodid, --传输rmk10  交换remark8
      (r.DKNO)dkno,
      (r.FQBM)crdept,
      (r.remark2) usr,
      (r.remark15) suspreason,
      (r.p6_order_id) P6ID,
      (t.wop_order_id)WPID,
      to_char(r.receive_dts,'yyyy-mm-dd hh24:mi:ss')startdts,
      to_char(r.schedule_dts,'yyyy-mm-dd hh24:mi:ss')scheddts,
      t.operator,
      t.operation,
      to_char(t.oper_dts,'yyyy-mm-dd hh24:mi:ss')suspdts,
      to_char(r.update_dts,'yyyy-mm-dd hh24:mi:ss')upddts,
      (r.remark4) pm, -- 传输rmk4 交换rmk14
      to_char((select max(oper_dts) from wp_order_log where wop_order_id = t.wop_order_id and prev_state = 240),'yyyy-mm-dd hh24:mi:ss')restdts,
      (select admin_name from wp_user where admin_id =
       (select operator from wp_order_log where wop_order_id = t.wop_order_id and prev_state = 240 and rownum =1)) restperson,
      (r.remark13) restrmk,
      r.status,
      (select remark11 from wp_srq where wop_order_id = t.wop_order_id)restreason,
      (select remark12 from wp_srq where wop_order_id = t.wop_order_id)reasontype
      from wp_order_log t, vwp_srq r
      where t.curr_state in (240, 104)
      and r.ORDER_TYPE <3
      and r.status in (104,105,240) -- 240 - 104,105
      and t.wop_order_id = r.wop_order_id
      and t.oper_dts >= sysdate - 90
      and r.PLANE_TYPE = '162' --162TRS 188SW  161 JTHL
      and t.operator = '综资'
      order by t.wop_order_id, t.oper_dts
      ) LOOP
      BEGIN
        insert into Wf_Stat_Op0(ST_NO,ST_DT,ST_TP,St_St,Stdt01,Stdt02,Stdt03,Stdt04,Stdt05,Stdt06,Stdt07,Stdt08,Stdt09,Stdt10,Stdt11,Stdt12,Stdt13,Stdt14,Stdt15,Stdt16,Stdt17,Stdt18,Stdt19,Stdt20)
        values
          (to_number(to_char(vin_comp_time, 'yyyyMMdd'), '99999999'),
           sysdate,
           10,
           0,
           sp.crmid,
           sp.linkid,
           sp.dkno,
           sp.crdept,
           sp.p6id,
           sp.wpid,
           sp.startdts,
           sp.scheddts,
           sp.upddts,
           sp.operator, --10
           sp.operation,
           sp.pm,
           sp.suspdts,
           sp.restdts,
           sp.restperson,
           sp.restrmk,
           sp.status,
           sp.restreason,
           sp.reasontype,
           sp.prodid --20
           );
        commit;
      END;
    END LOOP;
  end;
   --综资挂起 交换
  begin
    FOR sp IN (
      select
      (r.crm_order_id) crmid,
      (r.remark4) linkid, --传输remark1 交换remark4 集团remark3
      (r.remark8) prodid, --传输rmk10  交换remark8
      (r.DKNO)dkno,
      (r.FQBM)crdept,
      (r.remark2) usr,
      (r.remark15) suspreason,
      (r.p6_order_id) P6ID,
      (t.wop_order_id)WPID,
      to_char(r.receive_dts,'yyyy-mm-dd hh24:mi:ss')startdts,
      to_char(r.schedule_dts,'yyyy-mm-dd hh24:mi:ss')scheddts,
      t.operator,
      t.operation,
      to_char(t.oper_dts,'yyyy-mm-dd hh24:mi:ss')suspdts,
      to_char(r.update_dts,'yyyy-mm-dd hh24:mi:ss')upddts,
      (r.remark14) pm, -- 传输rmk4 交换rmk14
      to_char((select max(oper_dts) from wp_order_log where wop_order_id = t.wop_order_id and prev_state = 240),'yyyy-mm-dd hh24:mi:ss')restdts,
      (select admin_name from wp_user where admin_id =
       (select operator from wp_order_log where wop_order_id = t.wop_order_id and prev_state = 240 and rownum =1)) restperson,
      (r.remark13) restrmk,
      r.status,
      (select remark11 from wp_srq where wop_order_id = t.wop_order_id)restreason,
      (select remark12 from wp_srq where wop_order_id = t.wop_order_id)reasontype
      from wp_order_log t, vwp_srq r
      where t.curr_state in (240, 104)
      and r.ORDER_TYPE <3
      and r.status in (104,105,240) -- 240 - 104,105
      and t.wop_order_id = r.wop_order_id
      and t.oper_dts >= sysdate - 90
      and r.PLANE_TYPE = '188' --162TRS 188SW  161 JTHL
      and t.operator = '综资'
      order by t.wop_order_id, t.oper_dts
      ) LOOP
      BEGIN
        insert into Wf_Stat_Op0(ST_NO,ST_DT,ST_TP,St_St,Stdt01,Stdt02,Stdt03,Stdt04,Stdt05,Stdt06,Stdt07,Stdt08,Stdt09,Stdt10,Stdt11,Stdt12,Stdt13,Stdt14,Stdt15,Stdt16,Stdt17,Stdt18,Stdt19,Stdt20)
        values
          (to_number(to_char(vin_comp_time, 'yyyyMMdd'), '99999999'),
           sysdate,
           10,
           0,
           sp.crmid,
           sp.linkid,
           sp.dkno,
           sp.crdept,
           sp.p6id,
           sp.wpid,
           sp.startdts,
           sp.scheddts,
           sp.upddts,
           sp.operator, --10
           sp.operation,
           sp.pm,
           sp.suspdts,
           sp.restdts,
           sp.restperson,
           sp.restrmk,
           sp.status,
           sp.restreason,
           sp.reasontype,
           sp.prodid --20
           );
        commit;
      END;
    END LOOP;
  end;
  end WF_STAT_SUSP;
/

-- ----------------------------
-- Function structure for CACL_BACKAMEND_DUR
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."CACL_BACKAMEND_DUR" (
 foid  in long
) return varchar2
is

 back_dts  DATE;
 amend_dts date;
 dual_day  number;
 count0    int;
 ret       varchar2(500);

 begin
           FOR note IN (
               select owner,add_dts from wf_ord_notify
                      where fo_id = foid and note_id = 101
                      order by add_dts desc
           )
           LOOP
           begin
           if back_dts is  null
           then
           begin
           select add_dts into amend_dts from wf_ord_notify
                      where fo_id = foid and note_id = 7
                      and add_dts > note.add_dts
                      and rownum <= 1;
                   EXCEPTION
                   WHEN OTHERS THEN
                   DBMS_OUTPUT.PUT_LINE('首次无修订下发--' || note.add_dts);
           end;
           end if;
           if back_dts is not null
           then
           begin
           select count(*) into count0 from wf_ord_notify
                      where fo_id = foid and note_id = 7
                      and add_dts > note.add_dts and add_dts <back_dts;
           if count0 > 0
           then
           select add_dts into amend_dts from wf_ord_notify
                      where fo_id = foid and note_id = 7
                      and add_dts > note.add_dts and add_dts <back_dts
                      and rownum <= 1;
           else
           DBMS_OUTPUT.PUT_LINE('无修订下发--' || note.add_dts);
           end if;
           end;
           end if;
           if  amend_dts is not null
           then
           select round(to_number(amend_dts - note.add_dts), 1) into dual_day from dual;
           if ret is null
           then
              ret := '修订-退前端 : ' || to_char(amend_dts, 'yyyyMMdd hh24:mi:ss')|| ' - ' || to_char(note.add_dts, 'yyyyMMdd hh24:mi:ss') || ' [' || dual_day ||']天';
           else
              ret := ret ||chr(13)||'修订-退前端 : ' || to_char(amend_dts, 'yyyyMMdd hh24:mi:ss')|| ' - ' || to_char(note.add_dts, 'yyyyMMdd hh24:mi:ss') || ' [' || dual_day ||']天';
           end if;
           DBMS_OUTPUT.PUT_LINE('修订-退前端 : ' || to_char(amend_dts, 'yyyyMMdd hh24:mi:ss')|| '<-' || to_char(note.add_dts, 'yyyyMMdd hh24:mi:ss') || ' ['||dual_day ||']天');
           end if;

           back_dts := note.add_dts;
           amend_dts := null;
           end;
           end LOOP;
           return(ret);

end CACL_BACKAMEND_DUR;
/

-- ----------------------------
-- Function structure for CACL_EXPCOMPDATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."CACL_EXPCOMPDATE" (
 begin_date   in date, expect_dur   in number
) return date
is
  v_date       date;
  day_count    integer;
  v_day        integer;
  v_work       integer;
  v_flag       integer;
  date_offset  number;
begin
  if expect_dur <=0
  then 
     return null;
  end if;
  day_count := ceil(expect_dur/3600/24);
  date_offset := (expect_dur-1)/3600/24 - trunc(expect_dur/3600/24);
  v_date := trunc(begin_date)+1;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(trunc(begin_date)+1, 'yyyyMMdd HH24miss'));
  LOOP
    v_work := 1;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(v_date, 'yyyyMMdd HH24miss'));
    DBMS_OUTPUT.PUT_LINE(day_count);
    select to_char(v_date - 1,'d') into v_day from dual;
    --工作日判断
    if v_day < 6
    then -- 判断是否在工作日历的休息日中
         select count(*) into v_flag from wf_holiday t where t.hl_date = v_date and t.hl_flag = 0;
         if v_flag > 0
         then
            v_work := 0;
         end if;
    else -- 判断休息人在工作日历的工作日中
         select count(*) into v_flag from wf_holiday t where t.hl_date = v_date  and t.hl_flag = 1;
         if v_flag = 0
         then
            v_work := 0;
         end if;
    end if;
    if v_work = 1
    then
       day_count := day_count -1;
    end if;
    EXIT WHEN day_count <= 0;
    v_date := v_date + 1;
  END LOOP;
  if date_offset > 0
  then
   v_date := v_date + date_offset;
  else
   v_date := v_date + 1 + date_offset;
  end if;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(v_date, 'yyyyMMdd HH24miss'));

  return(v_date);
end CACL_EXPCOMPDATE;
/

-- ----------------------------
-- Function structure for CACL_EXPCOMPDATE2
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."CACL_EXPCOMPDATE2" (
 begin_date   in date, expect_dur   in number
) return date
is
  v_date       date;
  day_count    integer;
  v_day        integer;
  v_work       integer;
  v_flag       integer;
  date_offset  number;
  date_of      number;
begin
  if expect_dur <=0
  then
     return null;
  end if;
  day_count := ceil(expect_dur/3600/24);
  date_offset := (expect_dur+1)/3600/24 - trunc(expect_dur/3600/24);
  v_date :=begin_date;
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(trunc(begin_date)+1, 'yyyyMMdd HH24miss'));
  day_count := day_count -1;
  LOOP
    v_work := 1;
    v_date := v_date + 1;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(v_date, 'yyyyMMdd HH24miss'));
    DBMS_OUTPUT.PUT_LINE(day_count);
    select to_char(v_date,'d') into v_day from dual;
    --工作日判断
    if v_day < 7 and v_day <> 1
    then -- 判断是否在工作日历的休息日中
         select count(*) into v_flag from wf_holiday t where to_char(t.hl_date,'yyyyMMdd')= to_char(v_date,'yyyyMMdd') and t.hl_flag = 0;
         if v_flag > 0
         then
            v_work := 0;
         end if;
    else -- 判断休息人在工作日历的工作日中
         select count(*) into v_flag from wf_holiday t where to_char(t.hl_date,'yyyyMMdd')= to_char(v_date,'yyyyMMdd')  and t.hl_flag = 1;
         if v_flag = 0
         then
            v_work := 0;
         end if;
    end if;
    if v_work = 1
    then
       day_count := day_count -1;
    end if;
    EXIT WHEN day_count < 0;
  END LOOP;
 
  v_date := v_date + date_offset;
 
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(v_date, 'yyyyMMdd HH24miss'));

  return(v_date);
end CACL_EXPCOMPDATE2;
/

-- ----------------------------
-- Function structure for CACL_WORK_DURATION
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."CACL_WORK_DURATION" (
 begin_date   in date,
 compl_date   in date
) return number
is
  v_date       date;
  day_count    number;
  v_day        integer;
  v_work       integer;
  v_free       integer;
  v_flag       integer;
  ofs_a        number;
  ofs_z        number;
begin
  if compl_date < begin_date
  then
     return -1;
  end if;
  day_count := compl_date - begin_date;
  select round(day_count, 2) into day_count from dual;
  v_free := 0;
  --小于1天不算工作日
  if(day_count < 1) then
  return day_count;
  end if;
  v_date := trunc(begin_date)+1;--起始时间第二天 工作日从第二天开始算
  --ofs_a := trunc(begin_date+1)-begin_date;
  --ofs_z := compl_date - trunc(compl_date + 1);
  --select round(ofs_a, 2) into ofs_a from dual;
  --select round(ofs_z, 2) into ofs_z from dual;
  LOOP
    v_work := 1;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(v_date, 'yyyyMMdd HH24miss'));
    EXIT WHEN v_date >= trunc(compl_date)-1/24;
    select to_char(v_date,'d') into v_day from dual;--读取周？
    DBMS_OUTPUT.PUT_LINE('Day '|| v_day);
    --工作日判断
    if v_day in (2,3,4,5,6)  --Day1 =Sunday
    then -- 判断是否在工作日历的休息日中
         select count(*) into v_flag from wf_holiday t where t.hl_date = v_date and t.hl_flag = 0;
         if v_flag > 0
         then
            v_work := 0;
         end if;
    else -- 判断休息人在工作日历的工作日中
         select count(*) into v_flag from wf_holiday t where t.hl_date = v_date  and t.hl_flag = 1;
         if v_flag = 0
         then
            v_work := 0;
         end if;
    end if;
    if v_work = 0
    then
       v_free := v_free + 1;
    end if;
    DBMS_OUTPUT.PUT_LINE(day_count);
    v_date := v_date + 1;
  END LOOP;
  --DBMS_OUTPUT.PUT_LINE(ofs_a ||' -> '||ofs_z);
  return(day_count - v_free);
end CACL_WORK_DURATION;
/

-- ----------------------------
-- Function structure for DECRYPT_FUNCTION
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."DECRYPT_FUNCTION"(V_STR VARCHAR2, V_KEY VARCHAR2)
  RETURN VARCHAR2 AS
  V_KEY_RAW    RAW(24);
  V_STR_RAW    RAW(2000);
  V_RETURN_STR VARCHAR2(2000);
  V_TYPE       PLS_INTEGER;

BEGIN
  /************************************************
     解密函数　FUN_DECRYPTION　
        入参：
          V_STR 输入密文字符串,约定密文为16进制字符串
          V_KEY 输入密钥字符串，长度为24字节
        返回值：
          V_RETURN_STR　返回明文字符串   
        异常处理：
          此函数不对任何异常做捕捉处理，请相应的程序模块对异常做捕捉处理。   
        
        加密方式：
          密钥位数:AES192   DBMS_CRYPTO.ENCRYPT_AES192
          连接方式:CBC      DBMS_CRYPTO.CHAIN_CBC
          填充方式:PKCS5    DBMS_CRYPTO.PAD_PKCS5
     
  ***************************************************/
  V_KEY_RAW := UTL_I18N.STRING_TO_RAW(V_KEY, 'UTF8');
  V_STR_RAW := HEXTORAW(V_STR);
  -- 指定‘密钥算法’、‘工作模式’、‘填充方式’
  V_TYPE       := DBMS_CRYPTO.ENCRYPT_DES + DBMS_CRYPTO.CHAIN_ECB +
                  DBMS_CRYPTO.PAD_PKCS5;
  V_STR_RAW    := DBMS_CRYPTO.DECRYPT(SRC => V_STR_RAW,
                                      TYP => V_TYPE,
                                      KEY => V_KEY_RAW);
  V_RETURN_STR := UTL_I18N.RAW_TO_CHAR(V_STR_RAW, 'UTF8');
  RETURN V_RETURN_STR;
  /*  EXCEPTION
  WHEN OTHERS THEN
  RETURN SQLERRM||SQLCODE ; */
END;
/

-- ----------------------------
-- Function structure for ENCRYPT_FUNCTION
-- ----------------------------
CREATE OR REPLACE FUNCTION "WOPDB"."ENCRYPT_FUNCTION"(
  V_STR        VARCHAR2, V_KEY VARCHAR2) RETURN VARCHAR2 AS V_KEY_RAW RAW(24);                      
  V_STR_RAW    RAW(2000);                                                                           
  V_RETURN_STR VARCHAR2(2000);                                                                      
  V_TYPE       PLS_INTEGER;                                                                         
BEGIN                                                                                               
  /*************************************************                                                
    加密函数　FUN_ENCRYPTION　                                                                      
        入参：                                                                                      
          V_STR 输入明文字符串                                                                      
          V_KEY 输入密钥字符串，长度为24字节                                                        
        返回值：                                                                                    
          V_RETURN_STR　返回密文字符串，约定返回为 16进制密文字符串                                 
       　异常处理：                                                                                 
          此函数不对任何异常做捕捉处理，请相应的程序模块对异常做捕捉处理。                          
                                                                                                    
        加密方式：                                                                                  
          密钥位数:AES192   DBMS_CRYPTO.ENCRYPT_AES192                                              
          连接方式:CBC      DBMS_CRYPTO.CHAIN_CBC                                                   
          填充方式:PKCS5    DBMS_CRYPTO.PAD_PKCS5                                                   
                                                                                                    
  **************************************************/                                               
  V_KEY_RAW    := UTL_I18N.STRING_TO_RAW(V_KEY, 'UTF8');                                            
  V_STR_RAW    := UTL_I18N.STRING_TO_RAW(V_STR, 'UTF8');                                            
  -- 指定‘密钥算法’、‘工作模式’、‘填充方式’                                                   
  V_TYPE       := DBMS_CRYPTO.ENCRYPT_DES + DBMS_CRYPTO.CHAIN_ECB +                                 
                  DBMS_CRYPTO.PAD_PKCS5;                                                            
  V_STR_RAW    := DBMS_CRYPTO.ENCRYPT(SRC => V_STR_RAW,                                             
                                      TYP => V_TYPE,                                                
                                      KEY => V_KEY_RAW);                                            
  V_RETURN_STR := RAWTOHEX(V_STR_RAW);                                                              
  RETURN V_RETURN_STR;                                                                              
                                                                                                    
  /* EXCEPTION                                                                                      
  WHEN OTHERS THEN                                                                                  
  RETURN SQLERRM||SQLCODE ;   */                                                                    
END;
/

-- ----------------------------
-- Sequence structure for SEQ_OPER_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."SEQ_OPER_ID";
CREATE SEQUENCE "WOPDB"."SEQ_OPER_ID"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 9999999999
 START WITH 551115
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_PRINT_NO
-- ----------------------------
DROP SEQUENCE "WOPDB"."SEQ_PRINT_NO";
CREATE SEQUENCE "WOPDB"."SEQ_PRINT_NO"
 INCREMENT BY 1
 MINVALUE 0
 MAXVALUE 999999999
 START WITH 63343
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_REPORT_NO
-- ----------------------------
DROP SEQUENCE "WOPDB"."SEQ_REPORT_NO";
CREATE SEQUENCE "WOPDB"."SEQ_REPORT_NO"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 2709
 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SERIAL_NO
-- ----------------------------
DROP SEQUENCE "WOPDB"."SEQ_SERIAL_NO";
CREATE SEQUENCE "WOPDB"."SEQ_SERIAL_NO"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1086014
 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_VIRTUAL_NO
-- ----------------------------
DROP SEQUENCE "WOPDB"."SEQ_VIRTUAL_NO";
CREATE SEQUENCE "WOPDB"."SEQ_VIRTUAL_NO"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 10133
 CACHE 20;

-- ----------------------------
-- Sequence structure for WF_ACT_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_ACT_ID";
CREATE SEQUENCE "WOPDB"."WF_ACT_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999
 START WITH 91
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_ASSIGN_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_ASSIGN_SN";
CREATE SEQUENCE "WOPDB"."WF_ASSIGN_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 2532
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_ATTACH_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_ATTACH_SN";
CREATE SEQUENCE "WOPDB"."WF_ATTACH_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 35
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_EVA_ITEM_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_EVA_ITEM_SN";
CREATE SEQUENCE "WOPDB"."WF_EVA_ITEM_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 26381
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_FO_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_FO_ID";
CREATE SEQUENCE "WOPDB"."WF_FO_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 5202
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_FO_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_FO_SN";
CREATE SEQUENCE "WOPDB"."WF_FO_SN"
 INCREMENT BY 1
 MINVALUE 1000
 MAXVALUE 9999
 START WITH 9772
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_MAIL_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_MAIL_SN";
CREATE SEQUENCE "WOPDB"."WF_MAIL_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 373
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_NOTE_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_NOTE_SN";
CREATE SEQUENCE "WOPDB"."WF_NOTE_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999
 START WITH 2306
 CACHE 2;

-- ----------------------------
-- Sequence structure for WF_REPORT_SN
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_REPORT_SN";
CREATE SEQUENCE "WOPDB"."WF_REPORT_SN"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 99999999
 START WITH 79
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_SEQ_JT_TRANS_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_SEQ_JT_TRANS_ID";
CREATE SEQUENCE "WOPDB"."WF_SEQ_JT_TRANS_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999
 START WITH 98861
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_SIMU_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_SIMU_ID";
CREATE SEQUENCE "WOPDB"."WF_SIMU_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1387
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Sequence structure for WF_SO_ID
-- ----------------------------
DROP SEQUENCE "WOPDB"."WF_SO_ID";
CREATE SEQUENCE "WOPDB"."WF_SO_ID"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 812
 CACHE 2
 CYCLE ;

-- ----------------------------
-- Checks structure for table GG_NO
-- ----------------------------
ALTER TABLE "WOPDB"."GG_NO" ADD CHECK ("GTN_TELEPHONE" IS NOT NULL);

-- ----------------------------
-- Checks structure for table KHXX_BYDKCODE_GCFA_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."KHXX_BYDKCODE_GCFA_VIEW" ADD CHECK ("PKSEQ" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table KHXX_BYDKCODE_VIEW
-- ----------------------------

-- ----------------------------
-- Checks structure for table KHXX_BYDKCODE_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."KHXX_BYDKCODE_VIEW" ADD CHECK ("PK_SEQ" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KHXX_BYDKCODE_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."KHXX_BYDKCODE_VIEW" ADD PRIMARY KEY ("PK_SEQ");

-- ----------------------------
-- Indexes structure for table MIE_MAP
-- ----------------------------

-- ----------------------------
-- Checks structure for table MIE_MAP
-- ----------------------------
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("REQ_DATE" IS NOT NULL);
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("REQ_CTX" IS NOT NULL);
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("REQ_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("DOMAIN" IS NOT NULL);
ALTER TABLE "WOPDB"."MIE_MAP" ADD CHECK ("SYSMODULE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table MIE_MAP
-- ----------------------------
ALTER TABLE "WOPDB"."MIE_MAP" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table NGI
-- ----------------------------
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_SEQUENCE_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_RBR_BRA_CODE" IS NOT NULL);
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_ORDER" IS NOT NULL);
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_PROCESS_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."NGI" ADD CHECK ("NGI_WP_TYPE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table NO_ONU_OLT
-- ----------------------------

-- ----------------------------
-- Checks structure for table NO_ONU_OLT
-- ----------------------------
ALTER TABLE "WOPDB"."NO_ONU_OLT" ADD CHECK ("OLT_DEVICE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."NO_ONU_OLT" ADD CHECK ("OLT_DEVICE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table NO_ONU_OLT
-- ----------------------------
ALTER TABLE "WOPDB"."NO_ONU_OLT" ADD PRIMARY KEY ("OLT_DEVICE_ID");

-- ----------------------------
-- Checks structure for table NPI
-- ----------------------------
ALTER TABLE "WOPDB"."NPI" ADD CHECK ("NPI_SEQUENCE_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."NPI" ADD CHECK ("NPI_NEWOLD_FLAG" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table PINGTAI_CONFIG_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table PINGTAI_CONFIG_INFO
-- ----------------------------
ALTER TABLE "WOPDB"."PINGTAI_CONFIG_INFO" ADD CHECK ("PINGTAI_CODE" IS NOT NULL);
ALTER TABLE "WOPDB"."PINGTAI_CONFIG_INFO" ADD CHECK ("PINGTAI_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table PINGTAI_CONFIG_INFO
-- ----------------------------
ALTER TABLE "WOPDB"."PINGTAI_CONFIG_INFO" ADD PRIMARY KEY ("PINGTAI_CODE", "PINGTAI_NAME");

-- ----------------------------
-- Checks structure for table TEMP_WP_USER
-- ----------------------------
ALTER TABLE "WOPDB"."TEMP_WP_USER" ADD CHECK ("ADMIN_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."TEMP_WP_USER" ADD CHECK ("PLANE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."TEMP_WP_USER" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Checks structure for table TEMP_WP_USER_CRYPT
-- ----------------------------
ALTER TABLE "WOPDB"."TEMP_WP_USER_CRYPT" ADD CHECK ("ADMIN_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ABILITY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ABILITY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ABILITY" ADD CHECK ("ABI_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ABILITY" ADD CHECK ("ABI_TAG" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ABILITY" ADD CHECK ("DOM_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ABILITY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ABILITY" ADD PRIMARY KEY ("ABI_ID");

-- ----------------------------
-- Indexes structure for table WF_ACT_ORD
-- ----------------------------
CREATE INDEX "WOPDB"."WF_ACT_ORD_IDX"
ON "WOPDB"."WF_ACT_ORD" ("ORD_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WF_ACT_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("ORD_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("PROC_STA" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("ACT_MODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD CHECK ("OWNER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ACT_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ACT_ORD" ADD PRIMARY KEY ("ORD_ID", "ORD_VER");

-- ----------------------------
-- Indexes structure for table WF_ACT_ORD_PARAM
-- ----------------------------
CREATE INDEX "WOPDB"."WF_ACT_ORD_PARAM_IDX1"
ON "WOPDB"."WF_ACT_ORD_PARAM" ("ORD_ID" ASC)
LOGGING;
CREATE INDEX "WOPDB"."WF_ACT_ORD_PARAM_IDX2"
ON "WOPDB"."WF_ACT_ORD_PARAM" ("PARAM_TYPE" ASC)
LOGGING;
CREATE INDEX "WOPDB"."WF_ACT_ORD_PARAM_IDX3"
ON "WOPDB"."WF_ACT_ORD_PARAM" ("PARAM_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WF_ACT_ORD_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("ORD_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("ORD_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("PARAM_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("PARAM_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("PARAM_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD CHECK ("UPDATE_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ACT_ORD_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM" ADD PRIMARY KEY ("ORD_ID", "PARAM_TYPE", "PARAM_ID");

-- ----------------------------
-- Checks structure for table WF_ACT_ORD_PARAM_HIST
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("ORD_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("ORD_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("PARAM_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("PARAM_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("UPDATE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ACT_ORD_PARAM_HIST" ADD CHECK ("UPDATE_DTS" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ASSESSMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ASSESSMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("DK_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("AS_OBJ" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("AS_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("AS_LEVEL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("AS_TIME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD CHECK ("OWNER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ASSESSMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ASSESSMENT" ADD PRIMARY KEY ("FO_ID", "DK_NO", "AS_VER");

-- ----------------------------
-- Checks structure for table WF_AUTH_BUZ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_BUZ" ADD CHECK ("AUTH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTH_BUZ" ADD CHECK ("BUZ_KEY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTH_BUZ" ADD CHECK ("BUZ_VAL" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_AUTH_FUNC
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_FUNC" ADD CHECK ("AUTH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTH_FUNC" ADD CHECK ("FUNC_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_AUTH_ORG
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_ORG" ADD CHECK ("AUTH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTH_ORG" ADD CHECK ("ORG_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_AUTH_TASK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_TASK" ADD CHECK ("AUTH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTH_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_AUTHORIZATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_AUTHORIZATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTHORIZATION" ADD CHECK ("AUTH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTHORIZATION" ADD CHECK ("AUTH_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_AUTHORIZATION" ADD CHECK ("AUTH_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_AUTHORIZATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTHORIZATION" ADD PRIMARY KEY ("AUTH_ID");

-- ----------------------------
-- Indexes structure for table WF_BUSINESS_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_BUSINESS_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("BUZ_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("BUZ_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("BUZ_KEY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("BUZ_VAL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("SERV_CATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD CHECK ("USE_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_BUSINESS_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUSINESS_CONFIG" ADD PRIMARY KEY ("BUZ_ID", "BUZ_TYPE", "SERV_CATE");

-- ----------------------------
-- Indexes structure for table WF_BUZOPT_CONTRACT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_BUZOPT_CONTRACT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_CONTRACT" ADD CHECK ("OPT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUZOPT_CONTRACT" ADD CHECK ("CONTRACT_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_BUZOPT_CONTRACT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_CONTRACT" ADD PRIMARY KEY ("OPT_ID");

-- ----------------------------
-- Indexes structure for table WF_BUZOPT_PROD
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_BUZOPT_PROD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_PROD" ADD CHECK ("OPT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUZOPT_PROD" ADD CHECK ("PROD_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_BUZOPT_PROD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_PROD" ADD PRIMARY KEY ("OPT_ID", "PROD_ID");

-- ----------------------------
-- Indexes structure for table WF_BUZOPT_REQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_BUZOPT_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_REQ" ADD CHECK ("OPT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_BUZOPT_REQ" ADD CHECK ("CREATE_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_BUZOPT_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_REQ" ADD PRIMARY KEY ("OPT_ID");

-- ----------------------------
-- Indexes structure for table WF_DATA_ATTR
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_DATA_ATTR
-- ----------------------------
ALTER TABLE "WOPDB"."WF_DATA_ATTR" ADD CHECK ("ATTR_TYPE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_ATTR" ADD CHECK ("ATTR_TYPE_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_ATTR" ADD CHECK ("ATTR_CAPACITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_ATTR" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_DATA_ATTR
-- ----------------------------
ALTER TABLE "WOPDB"."WF_DATA_ATTR" ADD PRIMARY KEY ("ATTR_TYPE_ID");

-- ----------------------------
-- Indexes structure for table WF_DATA_DICT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_DATA_DICT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD CHECK ("DICT_TAG" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD CHECK ("ATTR_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD CHECK ("ATTR_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_DATA_DICT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_DATA_DICT" ADD PRIMARY KEY ("DICT_ID", "SERV_CATEGORY");

-- ----------------------------
-- Indexes structure for table WF_DATA_LOOKUP
-- ----------------------------
CREATE INDEX "WOPDB"."DATA_LOOKUP_IDX"
ON "WOPDB"."WF_DATA_LOOKUP" ("DICT_ID" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WF_DATA_LOOKUP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_DATA_LOOKUP" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_LOOKUP" ADD CHECK ("DATA_CODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_LOOKUP" ADD CHECK ("DATA_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_DATA_LOOKUP" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_EVA_CFG
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_CFG" ADD CHECK ("SERV_SOURCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_CFG" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_CFG" ADD CHECK ("DIMENTION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_CFG" ADD CHECK ("EVA_INDEX" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_CFG" ADD CHECK ("EVA_WEIGHT" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_EVA_ITEM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_EVA_ITEM
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("BEID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("SYS_SOURCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("FLOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("AREA_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("PROD_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("PROD_RATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("BUZ_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("BUZ_PROP" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("START_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("COMP_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("SEND_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD CHECK ("PROC_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_EVA_ITEM
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_ITEM" ADD PRIMARY KEY ("BEID");

-- ----------------------------
-- Uniques structure for table WF_EVA_MEMBER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_MEMBER" ADD UNIQUE ("BEID", "ROLE");

-- ----------------------------
-- Checks structure for table WF_EVA_MEMBER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_MEMBER" ADD CHECK ("BEID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_MEMBER" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVA_MEMBER" ADD CHECK ("ROLE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_EVALUATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_EVALUATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVALUATION" ADD CHECK ("EVA_ITEM" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_EVALUATION" ADD CHECK ("EVA_DESC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_EVALUATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVALUATION" ADD PRIMARY KEY ("EVA_ITEM");

-- ----------------------------
-- Indexes structure for table WF_FLOW
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_FLOW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("FLOW_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("FLOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_FLOW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW" ADD PRIMARY KEY ("FLOW_ID", "FLOW_VER");

-- ----------------------------
-- Uniques structure for table WF_FLOW_JUMP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD UNIQUE ("NODE_ID", "NODE_ID_TO", "FLOW_ID", "FLOW_VER");

-- ----------------------------
-- Checks structure for table WF_FLOW_JUMP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("NODE_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("NODE_ID_TO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("CHECK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("REPORT_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("ANNOTATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_JUMP" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table WF_FLOW_LINK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD UNIQUE ("NODE_ID", "NODE_ID_TO", "FLOW_ID", "FLOW_VER", "NODE_STATUS");

-- ----------------------------
-- Checks structure for table WF_FLOW_LINK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("NODE_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("NODE_ID_TO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("CHECK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("REPORT_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_LINK" ADD CHECK ("ANNOTATION" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table WF_FLOW_NODE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD UNIQUE ("NODE_ID", "FLOW_ID", "FLOW_VER");

-- ----------------------------
-- Checks structure for table WF_FLOW_NODE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("NODE_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("INPUT_WAIT_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("JUMP_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("SHOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("NODE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD CHECK ("ANNOTATION" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_FLOW_STATUS
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD CHECK ("STATUS_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_FUNCTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_FUNCTION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FUNCTION" ADD CHECK ("FUNC_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FUNCTION" ADD CHECK ("FUNC_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FUNCTION" ADD CHECK ("FUNC_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_FUNCTION" ADD CHECK ("FUNC_CTX" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_FUNCTION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FUNCTION" ADD PRIMARY KEY ("FUNC_ID");

-- ----------------------------
-- Indexes structure for table WF_HOLIDAY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_HOLIDAY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_HOLIDAY" ADD CHECK ("HL_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_HOLIDAY" ADD CHECK ("HL_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_HOLIDAY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_HOLIDAY" ADD PRIMARY KEY ("HL_DATE");

-- ----------------------------
-- Indexes structure for table WF_IMPLEMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_IMPLEMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_IMPLEMENT" ADD CHECK ("IMPL_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_IMPLEMENT" ADD CHECK ("IMPL_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_IMPLEMENT" ADD CHECK ("IMPL_REFERENCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_IMPLEMENT" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_IMPLEMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_IMPLEMENT" ADD PRIMARY KEY ("IMPL_ID");

-- ----------------------------
-- Indexes structure for table WF_INTERACT_CTX
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_INTERACT_CTX
-- ----------------------------
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("WTX_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("WO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("WO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("ACT_MODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("REQ_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_INTERACT_CTX
-- ----------------------------
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD PRIMARY KEY ("WTX_ID");

-- ----------------------------
-- Indexes structure for table WF_KNOWLEDGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_KNOWLEDGE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KNOWLEDGE" ADD CHECK ("KID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE" ADD CHECK ("TITLE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE" ADD CHECK ("UPD_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_KNOWLEDGE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KNOWLEDGE" ADD PRIMARY KEY ("KID");

-- ----------------------------
-- Indexes structure for table WF_KNOWLEDGE_STRUCT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_KNOWLEDGE_STRUCT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("KS_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("KS_PID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("KS_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("KNAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("UPD_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD CHECK ("POSITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_KNOWLEDGE_STRUCT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KNOWLEDGE_STRUCT" ADD PRIMARY KEY ("KS_ID");

-- ----------------------------
-- Indexes structure for table WF_KX_CONST_FILTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_KX_CONST_FILTER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KX_CONST_FILTER" ADD CHECK ("DK_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_KX_CONST_FILTER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_KX_CONST_FILTER" ADD PRIMARY KEY ("DK_NO");

-- ----------------------------
-- Indexes structure for table WF_MAIL
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_MAIL
-- ----------------------------
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("MAIL_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("DK_AD_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("SEQ_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("PROC_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("PROC_STAT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("SENDER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL" ADD CHECK ("RECEIVER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_MAIL
-- ----------------------------
ALTER TABLE "WOPDB"."WF_MAIL" ADD PRIMARY KEY ("MAIL_ID");

-- ----------------------------
-- Indexes structure for table WF_MAIL_ATTACH
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_MAIL_ATTACH
-- ----------------------------
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD CHECK ("ATTACH_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD CHECK ("MAIL_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD CHECK ("PROC_STAT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD CHECK ("PROC_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD CHECK ("FILE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_MAIL_ATTACH
-- ----------------------------
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD PRIMARY KEY ("ATTACH_ID");

-- ----------------------------
-- Indexes structure for table WF_NOTIFY_DEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_NOTIFY_DEF
-- ----------------------------
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("NOTE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("NOTE_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("NOTE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("AUTHOR" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("DISPATCH_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_NOTIFY_DEF
-- ----------------------------
ALTER TABLE "WOPDB"."WF_NOTIFY_DEF" ADD PRIMARY KEY ("NOTE_ID");

-- ----------------------------
-- Checks structure for table WF_NOTIFY_FILTER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_NOTIFY_FILTER" ADD CHECK ("NOTE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_FILTER" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_FILTER" ADD CHECK ("SERV_CATE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_NOTIFY_QUEUE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_NOTIFY_QUEUE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("NOTE_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("NOTE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("PROC_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("SOURCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("CONTEXT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("PROC_STA" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("PROC_COUNT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD CHECK ("ADD_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_NOTIFY_QUEUE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_NOTIFY_QUEUE" ADD PRIMARY KEY ("NOTE_SN");

-- ----------------------------
-- Indexes structure for table WF_ORD
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("SO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("SO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FLOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FLOW_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FLOW_STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("CREATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("EXPECT_DURATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("EXPECT_COMPL_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD" ADD CHECK ("FTX_AUTHOR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD" ADD PRIMARY KEY ("FO_ID");

-- ----------------------------
-- Checks structure for table WF_ORD_ASSO
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_ASSO" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_ASSO" ADD CHECK ("ASSO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_ASSO" ADD CHECK ("ASSO_TYPE" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_ORD_EVA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("EVA_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("EVA_USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("EVA_MAIN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("MAIN_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("ITEM1_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("ITEM2_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("ITEM3_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("ITEM4_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("ITEM5_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORD_FLOW
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_FLOW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FLOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("NODE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("ACT_MODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("VIEW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD CHECK ("SERV_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_FLOW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD PRIMARY KEY ("FO_SN", "FO_ID");

-- ----------------------------
-- Uniques structure for table WF_ORD_FLOW_ROUTE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD UNIQUE ("FO_SN", "FO_SN_TO", "FO_ID", "FO_VER");

-- ----------------------------
-- Checks structure for table WF_ORD_FLOW_ROUTE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("FO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("NODE_ID_TO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("WAIT_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD CHECK ("FLOW_FLAG" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_ORD_FLOW_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW_VIEW" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_VIEW" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_VIEW" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_VIEW" ADD CHECK ("VIEW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_FLOW_VIEW" ADD CHECK ("ANNOTATION" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_ORD_MEMBER
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD CHECK ("ACCEPT_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD CHECK ("CONFIRM" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD CHECK ("ROLE_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_ORD_NOTIFY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("NOTE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("NOTE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("ADD_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD CHECK ("TASK_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORD_REMARK
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_REMARK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("REMARK_KEY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("REMARK_VAL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("ADD_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_REMARK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD PRIMARY KEY ("FO_ID", "FO_SN", "REMARK_KEY");

-- ----------------------------
-- Indexes structure for table WF_ORD_REMARK_DEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_REMARK_DEF
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REMARK_DEF" ADD CHECK ("REMARK_KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_REMARK_DEF
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REMARK_DEF" ADD PRIMARY KEY ("REMARK_KEY");

-- ----------------------------
-- Indexes structure for table WF_ORD_REPORT
-- ----------------------------

-- ----------------------------
-- Triggers structure for table WF_ORD_REPORT
-- ----------------------------
CREATE OR REPLACE TRIGGER "WOPDB"."WF_ORDER_REPORT_SN" BEFORE INSERT ON "WOPDB"."WF_ORD_REPORT" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
begin
  SELECT WF_REPORT_SN.NEXTVAL
  INTO   :new.REPORT_SN
  FROM   dual;
end WF_ORDER_REPORT_SN;

-- ----------------------------
-- Checks structure for table WF_ORD_REPORT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD CHECK ("PROGRESS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD CHECK ("REPORT_SN" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_REPORT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD PRIMARY KEY ("REPORT_SN");

-- ----------------------------
-- Indexes structure for table WF_ORD_RESO
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_RESO
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("RESO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("RESO_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("USE_FLAG" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("UPD_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_RESO
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_RESO" ADD PRIMARY KEY ("FO_ID", "RESO_TYPE", "RESO_ID", "DICT_ID", "SERV_CATEGORY");

-- ----------------------------
-- Checks structure for table WF_ORD_RESO_HIST
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("RESO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("RESO_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("UPD_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("UPD_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("UPD_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORD_SNAP
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_SNAP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD CHECK ("DATA_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD CHECK ("DATA_DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD CHECK ("UPD_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_SNAP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD PRIMARY KEY ("FO_SN", "FO_ID", "DATA_ID", "INST_ID");

-- ----------------------------
-- Checks structure for table WF_ORD_STATUS
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_STATUS" ADD CHECK ("STATUS_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STATUS" ADD CHECK ("STATUS_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STATUS" ADD CHECK ("STATUS_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STATUS" ADD CHECK ("STATUS_TYPE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORD_STRUCT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORD_STRUCT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("DATA_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("DATA_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("PATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("MULTIPLE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("SIGNIFICANT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD CHECK ("PARENT_DATA_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_STRUCT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD PRIMARY KEY ("DATA_ID", "SERV_CATEGORY");

-- ----------------------------
-- Checks structure for table WF_ORD_TASK_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD CHECK ("VIEW_ID" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table WF_ORD_TEMPLATE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD UNIQUE ("DATA_ID", "SERV_TYPE", "SERV_CATEGORY");

-- ----------------------------
-- Checks structure for table WF_ORD_TEMPLATE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("DATA_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("DATA_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("PATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("SIGNIFICANT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("MULTIPLE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_TEMPLATE" ADD CHECK ("PARENT_DATA_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORD_VIEW
-- ----------------------------

-- ----------------------------
-- Uniques structure for table WF_ORD_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD UNIQUE ("VIEW_NAME", "SERV_CATEGORY");

-- ----------------------------
-- Checks structure for table WF_ORD_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD CHECK ("VIEW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD CHECK ("VIEW_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORD_VIEW
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW" ADD PRIMARY KEY ("VIEW_ID");

-- ----------------------------
-- Uniques structure for table WF_ORD_VIEW_DATA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD UNIQUE ("VIEW_ID", "DATA_ID");

-- ----------------------------
-- Checks structure for table WF_ORD_VIEW_DATA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("EDITABLE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("INSTANCE_MAX" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("INSTANCE_MIN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("SIGNIFICANT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("VIEW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("DATA_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("DATA_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("DEFAULT_VAL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("VALIDATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("PATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("ANNOTATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("POS_ROW" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD CHECK ("POS_COL" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_ORD_VIEW_FRAME
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("VIEW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("DATA_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("DICT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("PATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("POS_ROW" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("POS_COL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORD_VIEW_FRAME" ADD CHECK ("ANNOTATION" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_ORDHIST
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORDHIST
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FSN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("SO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("SO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FLOW_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FLOW_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FLOW_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FLOW_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FLOW_STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("SERV_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("CREATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("EXPECT_DURATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("EXPECT_COMPL_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD CHECK ("FTX_AUTHOR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORDHIST
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORDHIST" ADD PRIMARY KEY ("FSN");

-- ----------------------------
-- Indexes structure for table WF_ORGANIZATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_ORGANIZATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD CHECK ("ORG_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD CHECK ("ORG_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD CHECK ("ORG_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD CHECK ("ORG_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD CHECK ("HIER_DEPTH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ORGANIZATION
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORGANIZATION" ADD PRIMARY KEY ("ORG_ID");

-- ----------------------------
-- Checks structure for table WF_ROLE_EVA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ROLE_EVA" ADD CHECK ("ROLE_IO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_ROLE_EVA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ROLE_EVA" ADD PRIMARY KEY ("ROLE_IO") DISABLE;

-- ----------------------------
-- Indexes structure for table WF_RULE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_RULE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("RULE_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("RULE_INPUT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("RULE_CONTEXT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_RULE" ADD CHECK ("PROC_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_RULE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_RULE" ADD PRIMARY KEY ("RULE_ID");

-- ----------------------------
-- Indexes structure for table WF_SERV
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_SERV
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("SO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("SO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("SO_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("SO_SOURCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("SO_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("CREATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("CONTEXT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV" ADD CHECK ("OWNER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_SERV
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SERV" ADD PRIMARY KEY ("SO_ID", "SO_VER");

-- ----------------------------
-- Indexes structure for table WF_SERV_REQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_SERV_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_SOURCE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("SO_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("PROC_STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("PROC_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("ORD_TARGET" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD CHECK ("REQ_CONTEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_SERV_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SERV_REQ" ADD PRIMARY KEY ("SO_SN", "SO_ID");

-- ----------------------------
-- Indexes structure for table WF_SIMU_ORD
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_SIMU_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CUST_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CUST_CONT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CUST_CONT_TEL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CUST_MGR" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CUST_MGR_TEL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("BAT_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("IMP_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("PROC_STA" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD CHECK ("CREATE_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_SIMU_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_SIMU_ORD" ADD PRIMARY KEY ("SN");

-- ----------------------------
-- Checks structure for table WF_STAT_DSJ
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_DSJ" ADD CHECK ("FOID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_DSJ" ADD CHECK ("STIME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_DSJ" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_DSJ" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_STAT_OP0
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_OP0" ADD CHECK ("ST_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP0" ADD CHECK ("ST_DT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP0" ADD CHECK ("ST_TP" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP0" ADD CHECK ("ST_ST" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_STAT_OP1
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_OP1" ADD CHECK ("ST_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP1" ADD CHECK ("ST_DT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP1" ADD CHECK ("ST_TP" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_OP1" ADD CHECK ("ST_ST" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_STAT_RECORD
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_RECORD" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_STAT_SC0
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_SC0" ADD CHECK ("ST_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_SC0" ADD CHECK ("ST_DT" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_SC0" ADD CHECK ("PLANE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_SC0" ADD CHECK ("ORDER_NUM" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STAT_SC0" ADD CHECK ("AVG_TOTAL_HOURS" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_STAT_TMP
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STAT_TMP" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_STATUS
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_STATUS
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STATUS" ADD CHECK ("STATUS_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STATUS" ADD CHECK ("STATUS_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STATUS" ADD CHECK ("STATUS_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STATUS" ADD CHECK ("STATUS_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_STATUS" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_STATUS
-- ----------------------------
ALTER TABLE "WOPDB"."WF_STATUS" ADD PRIMARY KEY ("STATUS_ID");

-- ----------------------------
-- Indexes structure for table WF_TASK
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_TASK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("TASK_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("EXPECT_DURATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("AMEND_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("CANCEL_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("RULE_REF" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("IMPL_REF" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_TASK
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK" ADD PRIMARY KEY ("TASK_ID");

-- ----------------------------
-- Indexes structure for table WF_TASK_ASSIGN
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_TASK_ASSIGN
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("ASSIGN_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("FO_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("FO_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("ASSIGN_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("ASSIGN_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("ASSIGNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD CHECK ("DOER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_TASK_ASSIGN
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD PRIMARY KEY ("ASSIGN_SN");

-- ----------------------------
-- Checks structure for table WF_TASK_IMPL
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_IMPL" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_IMPL" ADD CHECK ("IMPL_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_IMPL" ADD CHECK ("ENABLED" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_TASK_ROLE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_ROLE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_ROLE" ADD CHECK ("ROLE" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_TASK_RULE
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_RULE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_RULE" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_RULE" ADD CHECK ("ENABLED" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_TASK_SCHED
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("SCHED_DESC" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("SCHED_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("MAX_DURATION" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("ACT_INTERVAL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("ACT_IMPL" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_TASK_STATUS
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD CHECK ("STATUS_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD CHECK ("SERV_CATEGORY" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_USER_AUTH
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USER_AUTH" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USER_AUTH" ADD CHECK ("AUTH_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WF_USER_ORG
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USER_ORG" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USER_ORG" ADD CHECK ("ORG_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WF_USR_ABILITY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_USR_ABILITY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_ABILITY" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_ABILITY" ADD CHECK ("ABI_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_USR_ABILITY
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_ABILITY" ADD PRIMARY KEY ("USR_ID", "ABI_ID");

-- ----------------------------
-- Indexes structure for table WF_USR_ACCOUNT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WF_USR_ACCOUNT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_ACCOUNT" ADD CHECK ("USER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WF_USR_ACCOUNT
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_ACCOUNT" ADD PRIMARY KEY ("USER_ID", "TYPE");

-- ----------------------------
-- Checks structure for table WF_USR_EVA
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ESN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ROLE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("GEN_DTA" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("EVA_USR_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("EVA_MAIN" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("MAIN_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ITEM1_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ITEM2_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ITEM3_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ITEM4_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("ITEM5_LEV" IS NOT NULL);
ALTER TABLE "WOPDB"."WF_USR_EVA" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WL_LLR_OSM0101
-- ----------------------------

-- ----------------------------
-- Checks structure for table WL_LLR_OSM0101
-- ----------------------------
ALTER TABLE "WOPDB"."WL_LLR_OSM0101" ADD CHECK ("XIDSTR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WL_LLR_OSM0101
-- ----------------------------
ALTER TABLE "WOPDB"."WL_LLR_OSM0101" ADD PRIMARY KEY ("XIDSTR");

-- ----------------------------
-- Indexes structure for table WP_ATM_INTF
-- ----------------------------
CREATE INDEX "WOPDB"."IDX_ORDER_NO"
ON "WOPDB"."WP_ATM_INTF" ("ORDER_NO" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_PROC_FLAG"
ON "WOPDB"."WP_ATM_INTF" ("PROC_FLAG" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_PROC_TYPE"
ON "WOPDB"."WP_ATM_INTF" ("PROC_TYPE" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_STATUS"
ON "WOPDB"."WP_ATM_INTF" ("STATUS" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_UPDATE_DTS"
ON "WOPDB"."WP_ATM_INTF" ("UPDATE_DTS" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WP_ATM_INTF
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD CHECK ("PROC_SN" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD CHECK ("PROC_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD CHECK ("PROC_FLAG" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD CHECK ("PROC_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD CHECK ("ORDER_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ATM_INTF
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ATM_INTF" ADD PRIMARY KEY ("PROC_SN");

-- ----------------------------
-- Checks structure for table WP_AUTH_CLIENT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_AUTH_CLIENT" ADD CHECK ("USER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_AUTH_CLIENT" ADD CHECK ("CLIENT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_AUTH_CLIENT" ADD CHECK ("CLIENT_SECRET" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_AUTH_CLIENT" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_CFT_CRM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_CFT_CRM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_CFT_CRM" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_CRM" ADD CHECK ("CRM_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_CRM" ADD CHECK ("CRM_LINE_ITEM_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_CRM" ADD CHECK ("PRODUCT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_CFT_CRM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_CFT_CRM" ADD PRIMARY KEY ("CRM_ORDER_ID", "CRM_ORDER_VER", "CRM_LINE_ITEM_NO", "PRODUCT_ID");

-- ----------------------------
-- Indexes structure for table WP_CFT_P6
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_CFT_P6
-- ----------------------------
ALTER TABLE "WOPDB"."WP_CFT_P6" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_P6" ADD CHECK ("CRM_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_P6" ADD CHECK ("CRM_LINE_ITEM_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_CFT_P6" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_CFT_P6
-- ----------------------------
ALTER TABLE "WOPDB"."WP_CFT_P6" ADD PRIMARY KEY ("CRM_ORDER_ID", "CRM_ORDER_VER", "CRM_LINE_ITEM_NO", "P6_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WP_DATA_ELEMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_DATA_ELEMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_DATA_ELEMENT" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_DATA_ELEMENT" ADD CHECK ("PRP_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_DATA_ELEMENT" ADD CHECK ("DATA_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_DATA_ELEMENT" ADD CHECK ("DATA_CODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_DATA_ELEMENT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_DATA_ELEMENT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_HL_ORDER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_HL_ORDER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_HL_ORDER" ADD CHECK ("SEQUENCE_NUM" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_HL_ORDER" ADD CHECK ("CREATEDTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_HL_ORDER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_HL_ORDER" ADD PRIMARY KEY ("SEQUENCE_NUM");

-- ----------------------------
-- Indexes structure for table WP_IODEBUG_LOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_IODEBUG_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_IODEBUG_LOG" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_IODEBUG_LOG" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_IODEBUG_LOG" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_IODEBUG_LOG" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_IODEBUG_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_IODEBUG_LOG" ADD PRIMARY KEY ("WOP_SERIAL_NO");

-- ----------------------------
-- Checks structure for table WP_OAUTH_CODE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_OAUTH_CODE" ADD CHECK ("CODE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_ORDER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORDER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("WOP_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("PLANE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("ACTION_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORDER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORDER" ADD PRIMARY KEY ("WOP_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WP_ORDER_LOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORDER_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("OPER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("CURR_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("CURR_STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("OPER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD CHECK ("OPER_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORDER_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORDER_LOG" ADD PRIMARY KEY ("OPER_ID");

-- ----------------------------
-- Checks structure for table WP_ORDER_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORDER_PARAM" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_PARAM" ADD CHECK ("PARAM_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_PARAM" ADD CHECK ("PARAM_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORDER_PARAM" ADD CHECK ("NEW_OLD" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_ORG_BUREAU
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORG_BUREAU
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_BUREAU" ADD CHECK ("BUREAU_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_BUREAU" ADD CHECK ("BUREAU_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORG_BUREAU
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_BUREAU" ADD PRIMARY KEY ("BUREAU_ID");

-- ----------------------------
-- Indexes structure for table WP_ORG_SITE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORG_SITE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_SITE" ADD CHECK ("SITE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_SITE" ADD CHECK ("SUB_BUREAU_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORG_SITE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_SITE" ADD PRIMARY KEY ("SITE_ID");

-- ----------------------------
-- Indexes structure for table WP_ORG_SUBBUREAU
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORG_SUBBUREAU
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_SUBBUREAU" ADD CHECK ("SUB_BUREAU_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_SUBBUREAU" ADD CHECK ("BUREAU_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORG_SUBBUREAU
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_SUBBUREAU" ADD PRIMARY KEY ("SUB_BUREAU_ID");

-- ----------------------------
-- Checks structure for table WP_ORG_USR_BUREAU
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_USR_BUREAU" ADD CHECK ("REL_TYPE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_ORG_WCOMPANY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORG_WCOMPANY
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_WCOMPANY" ADD CHECK ("WCOMPANY_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORG_WCOMPANY
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_WCOMPANY" ADD PRIMARY KEY ("WCOMPANY_ID");

-- ----------------------------
-- Indexes structure for table WP_ORG_WTEAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ORG_WTEAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_WTEAM" ADD CHECK ("WTEAM_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ORG_WTEAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_WTEAM" ADD PRIMARY KEY ("WTEAM_ID");

-- ----------------------------
-- Checks structure for table WP_ORG_WTEAM_ABILITY
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY" ADD CHECK ("WTEAM_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY" ADD CHECK ("ABILITY_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY" ADD CHECK ("ABILITY_1" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ORG_WTEAM_ABILITY" ADD CHECK ("ABILITY_2" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WP_P6_DELAYTASK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_DELAYTASK" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_DELAYTASK" ADD CHECK ("P6_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_DELAYTASK" ADD CHECK ("P6_TASK_MNEMONIC" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_DELAYTASK" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_P6_ORDHIST
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_P6_ORDHIST
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_ORDHIST" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_ORDHIST" ADD CHECK ("SETHIST_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_ORDHIST" ADD CHECK ("SETHIST_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_P6_ORDHIST
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_ORDHIST" ADD PRIMARY KEY ("P6_ORDER_ID", "CRM_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WP_P6_REQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_P6_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD CHECK ("PROCESS_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_P6_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_REQ" ADD PRIMARY KEY ("WOP_SERIAL_NO");

-- ----------------------------
-- Checks structure for table WP_P6_REQ_TMP
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_REQ_TMP" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ_TMP" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ_TMP" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ_TMP" ADD CHECK ("PROCESS_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_REQ_TMP" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WP_P6_RET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("P6_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("CRM_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_P6_RET" ADD CHECK ("WOP_REASON" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_P6_RETTASK
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_P6_RETTASK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_RETTASK" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_P6_RETTASK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_RETTASK" ADD PRIMARY KEY ("WOP_SERIAL_NO");

-- ----------------------------
-- Indexes structure for table WP_PAL_ORD
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_PAL_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD CHECK ("TARGET" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD CHECK ("EXE_MODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD CHECK ("PROCESS_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_PAL_ORD
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PAL_ORD" ADD PRIMARY KEY ("P6_ORDER_ID", "PAL_ORDER_ID", "TARGET");

-- ----------------------------
-- Checks structure for table WP_PORTAL_OPTION
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PORTAL_OPTION" ADD CHECK ("SELECT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PORTAL_OPTION" ADD CHECK ("OPTION_NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_PRINT_REQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_PRINT_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD CHECK ("PRINT_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD CHECK ("PRINT_DESTID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD CHECK ("PRINT_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD CHECK ("PRINT_FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_PRINT_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PRINT_REQ" ADD PRIMARY KEY ("PRINT_NO");

-- ----------------------------
-- Indexes structure for table WP_PRINTMAP_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_PRINTMAP_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("PRP_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("PRINT_SEQ" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("PRINT_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD CHECK ("SERV_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_PRINTMAP_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PRINTMAP_CONFIG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table WP_PROMOT_MATERIAL
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PROMOT_MATERIAL" ADD CHECK ("CATEGORY" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROMOT_MATERIAL" ADD CHECK ("ACTION_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROMOT_MATERIAL" ADD CHECK ("PROMOT_CODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROMOT_MATERIAL" ADD CHECK ("PRINT_NOTE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_PROV_TEMPLATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_PROV_TEMPLATE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("TEMPLATE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("TEMPLATE_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("CREATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD CHECK ("ORDER_CONTEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_PROV_TEMPLATE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_PROV_TEMPLATE" ADD PRIMARY KEY ("TEMPLATE_ID");

-- ----------------------------
-- Indexes structure for table WP_REPORT
-- ----------------------------
CREATE INDEX "WOPDB"."IDX_WP_REPORT1"
ON "WOPDB"."WP_REPORT" ("NAME_SPACE" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_WP_REPORT2"
ON "WOPDB"."WP_REPORT" ("STATUS" ASC)
LOGGING;
CREATE INDEX "WOPDB"."IDX_WP_REPORT3"
ON "WOPDB"."WP_REPORT" ("REFERENCE_NO" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WP_REPORT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_REPORT" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_REPORT" ADD CHECK ("CREATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_REPORT" ADD CHECK ("NAME_SPACE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_REPORT" ADD CHECK ("SOURCE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_REPORT" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_REPORT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_REPORT" ADD PRIMARY KEY ("REP_SN");

-- ----------------------------
-- Indexes structure for table WP_RETURN_ATTACH
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_RETURN_ATTACH
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD CHECK ("ATTACH_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_RETURN_ATTACH
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RETURN_ATTACH" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_RETURN_PARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_RETURN_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RETURN_PARAM" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_PARAM" ADD CHECK ("PARAM_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_PARAM" ADD CHECK ("PARAM_XPATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RETURN_PARAM" ADD CHECK ("NEW_OLD" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_RETURN_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RETURN_PARAM" ADD PRIMARY KEY ("WOP_ORDER_ID", "PARAM_NAME", "NEW_OLD");

-- ----------------------------
-- Indexes structure for table WP_RIGHT
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_RIGHT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RIGHT" ADD CHECK ("RIGHT_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_RIGHT" ADD CHECK ("RIGHT_FUNCTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_RIGHT
-- ----------------------------
ALTER TABLE "WOPDB"."WP_RIGHT" ADD PRIMARY KEY ("RIGHT_ID");

-- ----------------------------
-- Indexes structure for table WP_ROLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_ROLE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ROLE" ADD CHECK ("ROLE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ROLE" ADD CHECK ("ROLE_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_ROLE" ADD CHECK ("ROLE_RIGHT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_ROLE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ROLE" ADD PRIMARY KEY ("ROLE_ID");

-- ----------------------------
-- Indexes structure for table WP_SECURITY_GROUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SECURITY_GROUP
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SECURITY_GROUP" ADD CHECK ("GROUP_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SECURITY_GROUP" ADD CHECK ("GROUP_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SECURITY_GROUP
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SECURITY_GROUP" ADD PRIMARY KEY ("GROUP_ID");

-- ----------------------------
-- Indexes structure for table WP_SESSIONS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table WP_SESSIONS
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SESSIONS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_SRQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SRQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("WOP_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("P6_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SRQ
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ" ADD PRIMARY KEY ("WOP_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WP_SRQ_CTX
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SRQ_CTX
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_CTX" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SRQ_CTX
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_CTX" ADD PRIMARY KEY ("WOP_SERIAL_NO");

-- ----------------------------
-- Indexes structure for table WP_SRQ_PARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SRQ_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD CHECK ("PARAM_XPATH" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD CHECK ("PARAM_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD CHECK ("READ_WRITE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SRQ_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD PRIMARY KEY ("WOP_SERIAL_NO", "PARAM_NAME");

-- ----------------------------
-- Indexes structure for table WP_SRQ_REMARK
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SRQ_REMARK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_REMARK" ADD CHECK ("WPID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_SRQ_REMARK" ADD CHECK ("REMARK_KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SRQ_REMARK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_REMARK" ADD PRIMARY KEY ("WPID", "REMARK_KEY");

-- ----------------------------
-- Indexes structure for table WP_SYS_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_SYS_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SYS_CONFIG" ADD CHECK ("CFG_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_SYS_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SYS_CONFIG" ADD PRIMARY KEY ("CFG_NAME");

-- ----------------------------
-- Checks structure for table WP_SYS_CONFIG_BAK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SYS_CONFIG_BAK" ADD CHECK ("CFG_NAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WP_TASK
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_TASK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_TASK" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_TASK" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_TASK" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_TASK
-- ----------------------------
ALTER TABLE "WOPDB"."WP_TASK" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_USER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USER" ADD CHECK ("ADMIN_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USER" ADD CHECK ("PLANE_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USER" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USER
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USER" ADD PRIMARY KEY ("ADMIN_ID");

-- ----------------------------
-- Indexes structure for table WP_USER_NOTIFY
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USER_NOTIFY
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USER_NOTIFY" ADD CHECK ("INTERVAL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USER_NOTIFY
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USER_NOTIFY" ADD PRIMARY KEY ("USER_ID");

-- ----------------------------
-- Indexes structure for table WP_USR_DISTRICT_SET
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USR_DISTRICT_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_DISTRICT_SET" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_DISTRICT_SET" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_DISTRICT_SET" ADD CHECK ("DISTRICT_SET" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USR_DISTRICT_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_DISTRICT_SET" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_USR_FUNCTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USR_FUNCTION
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_FUNCTION" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_FUNCTION" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_FUNCTION" ADD CHECK ("RESTRICT" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_FUNCTION" ADD CHECK ("TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USR_FUNCTION
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_FUNCTION" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_USR_FUNCTION_SET
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USR_FUNCTION_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_FUNCTION_SET" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_FUNCTION_SET" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_FUNCTION_SET" ADD CHECK ("FUNCTION_SET" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USR_FUNCTION_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_FUNCTION_SET" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_USR_RULE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USR_RULE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_RULE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_RULE" ADD CHECK ("RULE_LANG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USR_RULE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_RULE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_USR_TASK_SET
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_USR_TASK_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_TASK_SET" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_TASK_SET" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_TASK_SET" ADD CHECK ("TASK_SET" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_USR_TASK_SET" ADD CHECK ("SERV_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_USR_TASK_SET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_USR_TASK_SET" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_VALIDATE_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_VALIDATE_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VALIDATE_CONFIG" ADD CHECK ("PKID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VALIDATE_CONFIG" ADD CHECK ("P_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VALIDATE_CONFIG" ADD CHECK ("RULE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_VALIDATE_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VALIDATE_CONFIG" ADD PRIMARY KEY ("PKID");

-- ----------------------------
-- Indexes structure for table WP_VIEW_PARAM
-- ----------------------------
CREATE INDEX "WOPDB"."INDEX_VIEWPARAM"
ON "WOPDB"."WP_VIEW_PARAM" ("WOP_SERIAL_NO" ASC)
LOGGING;

-- ----------------------------
-- Checks structure for table WP_VIEW_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD CHECK ("VP_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD CHECK ("VIEW_POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD CHECK ("VIEW_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_VIEW_PARAM
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD PRIMARY KEY ("VP_ID");

-- ----------------------------
-- Indexes structure for table WP_VIEWMAP_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_VIEWMAP_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD CHECK ("PRP_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD CHECK ("VIEW_NAME" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD CHECK ("VIEW_POSITION" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD CHECK ("SERV_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_VIEWMAP_CONFIG
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VIEWMAP_CONFIG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WP_WORK_ASSET
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_WORK_ASSET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_ASSET" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_ASSET" ADD CHECK ("ASSET_CODE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_ASSET" ADD CHECK ("ASSET_SN" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_WORK_ASSET
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_ASSET" ADD PRIMARY KEY ("ASSET_SN", "WOP_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WP_WORK_PLANE
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_WORK_PLANE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_PLANE" ADD CHECK ("PLANE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_WORK_PLANE
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_PLANE" ADD PRIMARY KEY ("PLANE_ID");

-- ----------------------------
-- Indexes structure for table WP_WORK_RETURN
-- ----------------------------

-- ----------------------------
-- Checks structure for table WP_WORK_RETURN
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("PLANE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("ACTION_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD CHECK ("WORK_TEAM_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WP_WORK_RETURN
-- ----------------------------
ALTER TABLE "WOPDB"."WP_WORK_RETURN" ADD PRIMARY KEY ("WOP_ORDER_ID");

-- ----------------------------
-- Indexes structure for table WPHIS_ORDER_LOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table WPHIS_ORDER_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("OPER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("CURR_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("CURR_STATE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("OPER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD CHECK ("OPER_DTS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WPHIS_ORDER_LOG
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_ORDER_LOG" ADD PRIMARY KEY ("OPER_ID");

-- ----------------------------
-- Checks structure for table WPHIS_P6_REQ
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_P6_REQ" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ" ADD CHECK ("PROCESS_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Checks structure for table WPHIS_P6_REQ_OLD
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_P6_REQ_OLD" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ_OLD" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ_OLD" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ_OLD" ADD CHECK ("PROCESS_STATUS" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_P6_REQ_OLD" ADD CHECK ("CREATE_DTS" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WPHIS_SRQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table WPHIS_SRQ
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("WOP_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("WOP_SERIAL_NO" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("WOP_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("P6_ORDER_VER" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("SERVICE_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("RECEIVE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("UPDATE_DTS" IS NOT NULL);
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WPHIS_SRQ
-- ----------------------------
ALTER TABLE "WOPDB"."WPHIS_SRQ" ADD PRIMARY KEY ("WOP_ORDER_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_AUTH_BUZ"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_BUZ" ADD FOREIGN KEY ("AUTH_ID") REFERENCES "WOPDB"."WF_AUTHORIZATION" ("AUTH_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_AUTH_FUNC"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_FUNC" ADD FOREIGN KEY ("AUTH_ID") REFERENCES "WOPDB"."WF_AUTHORIZATION" ("AUTH_ID");
ALTER TABLE "WOPDB"."WF_AUTH_FUNC" ADD FOREIGN KEY ("FUNC_ID") REFERENCES "WOPDB"."WF_FUNCTION" ("FUNC_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_AUTH_ORG"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_ORG" ADD FOREIGN KEY ("AUTH_ID") REFERENCES "WOPDB"."WF_AUTHORIZATION" ("AUTH_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WF_AUTH_ORG" ADD FOREIGN KEY ("ORG_ID") REFERENCES "WOPDB"."WF_ORGANIZATION" ("ORG_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_AUTH_TASK"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_AUTH_TASK" ADD FOREIGN KEY ("AUTH_ID") REFERENCES "WOPDB"."WF_AUTHORIZATION" ("AUTH_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WF_AUTH_TASK" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_BUZOPT_PROD"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_BUZOPT_PROD" ADD FOREIGN KEY ("OPT_ID") REFERENCES "WOPDB"."WF_BUZOPT_REQ" ("OPT_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_EVA_MEMBER"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_EVA_MEMBER" ADD FOREIGN KEY ("BEID") REFERENCES "WOPDB"."WF_EVA_ITEM" ("BEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_FLOW_NODE"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_NODE" ADD FOREIGN KEY ("FLOW_ID", "FLOW_VER") REFERENCES "WOPDB"."WF_FLOW" ("FLOW_ID", "FLOW_VER");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_FLOW_STATUS"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD FOREIGN KEY ("FLOW_ID", "FLOW_VER") REFERENCES "WOPDB"."WF_FLOW" ("FLOW_ID", "FLOW_VER");
ALTER TABLE "WOPDB"."WF_FLOW_STATUS" ADD FOREIGN KEY ("STATUS_ID") REFERENCES "WOPDB"."WF_STATUS" ("STATUS_ID") DISABLE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_INTERACT_CTX"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_INTERACT_CTX" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_MAIL_ATTACH"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_MAIL_ATTACH" ADD FOREIGN KEY ("MAIL_ID") REFERENCES "WOPDB"."WF_MAIL" ("MAIL_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD" ADD FOREIGN KEY ("FLOW_ID", "FLOW_VER") REFERENCES "WOPDB"."WF_FLOW" ("FLOW_ID", "FLOW_VER");
ALTER TABLE "WOPDB"."WF_ORD" ADD FOREIGN KEY ("FLOW_STATUS") REFERENCES "WOPDB"."WF_STATUS" ("STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_ASSO"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_ASSO" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WF_ORD_ASSO" ADD FOREIGN KEY ("ASSO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_EVA"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_EVA" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_FLOW"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD FOREIGN KEY ("STATUS") REFERENCES "WOPDB"."WF_STATUS" ("STATUS_ID");
ALTER TABLE "WOPDB"."WF_ORD_FLOW" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_FLOW_ROUTE"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_FLOW_ROUTE" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_MEMBER"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_MEMBER" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_NOTIFY"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD FOREIGN KEY ("NOTE_ID") REFERENCES "WOPDB"."WF_NOTIFY_DEF" ("NOTE_ID");
ALTER TABLE "WOPDB"."WF_ORD_NOTIFY" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_REMARK"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD FOREIGN KEY ("REMARK_KEY") REFERENCES "WOPDB"."WF_ORD_REMARK_DEF" ("REMARK_KEY");
ALTER TABLE "WOPDB"."WF_ORD_REMARK" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_REPORT"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_REPORT" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_RESO_HIST"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_RESO_HIST" ADD FOREIGN KEY ("FO_ID", "RESO_ID", "RESO_TYPE", "DICT_ID", "SERV_CATEGORY") REFERENCES "WOPDB"."WF_ORD_RESO" ("FO_ID", "RESO_TYPE", "RESO_ID", "DICT_ID", "SERV_CATEGORY") ON DELETE CASCADE DISABLE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_SNAP"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_SNAP" ADD FOREIGN KEY ("FO_SN", "FO_ID") REFERENCES "WOPDB"."WF_ORD_FLOW" ("FO_SN", "FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_STRUCT"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_STRUCT" ADD FOREIGN KEY ("DICT_ID", "SERV_CATEGORY") REFERENCES "WOPDB"."WF_DATA_DICT" ("DICT_ID", "SERV_CATEGORY");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_TASK_VIEW"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");
ALTER TABLE "WOPDB"."WF_ORD_TASK_VIEW" ADD FOREIGN KEY ("VIEW_ID") REFERENCES "WOPDB"."WF_ORD_VIEW" ("VIEW_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_ORD_VIEW_DATA"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_ORD_VIEW_DATA" ADD FOREIGN KEY ("VIEW_ID") REFERENCES "WOPDB"."WF_ORD_VIEW" ("VIEW_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_ASSIGN"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_ASSIGN" ADD FOREIGN KEY ("FO_ID") REFERENCES "WOPDB"."WF_ORD" ("FO_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_IMPL"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_IMPL" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");
ALTER TABLE "WOPDB"."WF_TASK_IMPL" ADD FOREIGN KEY ("IMPL_ID") REFERENCES "WOPDB"."WF_IMPLEMENT" ("IMPL_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_ROLE"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_ROLE" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_RULE"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_RULE" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");
ALTER TABLE "WOPDB"."WF_TASK_RULE" ADD FOREIGN KEY ("RULE_ID") REFERENCES "WOPDB"."WF_RULE" ("RULE_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_SCHED"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_SCHED" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_TASK_STATUS"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD FOREIGN KEY ("TASK_ID") REFERENCES "WOPDB"."WF_TASK" ("TASK_ID");
ALTER TABLE "WOPDB"."WF_TASK_STATUS" ADD FOREIGN KEY ("STATUS_ID") REFERENCES "WOPDB"."WF_STATUS" ("STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_USER_AUTH"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USER_AUTH" ADD FOREIGN KEY ("USER_ID") REFERENCES "WOPDB"."WP_USER" ("ADMIN_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WF_USER_AUTH" ADD FOREIGN KEY ("AUTH_ID") REFERENCES "WOPDB"."WF_AUTHORIZATION" ("AUTH_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_USER_ORG"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USER_ORG" ADD FOREIGN KEY ("USER_ID") REFERENCES "WOPDB"."WP_USER" ("ADMIN_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WF_USER_ORG" ADD FOREIGN KEY ("ORG_ID") REFERENCES "WOPDB"."WF_ORGANIZATION" ("ORG_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WF_USR_ABILITY"
-- ----------------------------
ALTER TABLE "WOPDB"."WF_USR_ABILITY" ADD FOREIGN KEY ("USR_ID") REFERENCES "WOPDB"."WP_USER" ("ADMIN_ID") ON DELETE CASCADE DISABLE;
ALTER TABLE "WOPDB"."WF_USR_ABILITY" ADD FOREIGN KEY ("ABI_ID") REFERENCES "WOPDB"."WF_ABILITY" ("ABI_ID") ON DELETE CASCADE DISABLE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_ORG_USR_BUREAU"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_ORG_USR_BUREAU" ADD FOREIGN KEY ("ADMIN_ID") REFERENCES "WOPDB"."WP_USER" ("ADMIN_ID") ON DELETE CASCADE;
ALTER TABLE "WOPDB"."WP_ORG_USR_BUREAU" ADD FOREIGN KEY ("BUREAU_ID") REFERENCES "WOPDB"."WP_ORG_SUBBUREAU" ("SUB_BUREAU_ID");

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_P6_RET"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_P6_RET" ADD FOREIGN KEY ("WOP_SERIAL_NO") REFERENCES "WOPDB"."WP_P6_REQ" ("WOP_SERIAL_NO") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_SRQ_CTX"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_CTX" ADD FOREIGN KEY ("WOP_SERIAL_NO") REFERENCES "WOPDB"."WP_P6_REQ" ("WOP_SERIAL_NO") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_SRQ_PARAM"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_PARAM" ADD FOREIGN KEY ("WOP_SERIAL_NO") REFERENCES "WOPDB"."WP_P6_REQ" ("WOP_SERIAL_NO") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_SRQ_REMARK"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_SRQ_REMARK" ADD FOREIGN KEY ("WPID") REFERENCES "WOPDB"."WP_SRQ" ("WOP_ORDER_ID") ON DELETE CASCADE DISABLE;

-- ----------------------------
-- Foreign Key structure for table "WOPDB"."WP_VIEW_PARAM"
-- ----------------------------
ALTER TABLE "WOPDB"."WP_VIEW_PARAM" ADD FOREIGN KEY ("WOP_SERIAL_NO") REFERENCES "WOPDB"."WP_P6_REQ" ("WOP_SERIAL_NO") ON DELETE CASCADE;
