/*
Navicat Oracle Data Transfer
Oracle Client Version : 11.2.0.4.0

Source Server         : P7Test
Source Server Version : 110200
Source Host           : 10.145.206.51:1521
Source Schema         : ORDERMGMT

Target Server Type    : ORACLE
Target Server Version : 110200
File Encoding         : 65001

Date: 2019-10-25 10:58:55
*/


-- ----------------------------
-- Table structure for IBP_P6_TASK_ID
-- ----------------------------
DROP TABLE "ORDERMGMT"."IBP_P6_TASK_ID";
CREATE TABLE "ORDERMGMT"."IBP_P6_TASK_ID" (
"TRANSACTION_ID" VARCHAR2(100 BYTE) NOT NULL ,
"CRM_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"P6_ORDER_ID" VARCHAR2(100 BYTE) NOT NULL ,
"P6_ORDER_VERSION" VARCHAR2(10 BYTE) NOT NULL ,
"P6_TASK_MNEMONIC" VARCHAR2(100 BYTE) NOT NULL ,
"P6_ORDER_HIST_ID" VARCHAR2(100 BYTE) NOT NULL ,
"STATUS" VARCHAR2(10 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KB_IBP_CONFIG_QUERY_FILTER
-- ----------------------------
DROP TABLE "ORDERMGMT"."KB_IBP_CONFIG_QUERY_FILTER";
CREATE TABLE "ORDERMGMT"."KB_IBP_CONFIG_QUERY_FILTER" (
"NAMESPACE_MNEMONIC" VARCHAR2(50 BYTE) NULL ,
"VERSION" VARCHAR2(10 CHAR) NULL ,
"QUERY_FILTER" VARCHAR2(500 BYTE) NULL ,
"ORDER_NODE_ID" NUMBER(20) NOT NULL ,
"CARTRIDGE_ID" NUMBER(20) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KB_IBP_CONFIG_SUBPROCESS
-- ----------------------------
DROP TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS";
CREATE TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS" (
"NAMESPACE_MNEMONIC" VARCHAR2(50 BYTE) NULL ,
"VERSION" VARCHAR2(10 CHAR) NULL ,
"SUB_TASK_ID" NUMBER(10) NOT NULL ,
"SUB_PROCESS_ID" NUMBER(10) NOT NULL ,
"SUB_TASK_MNEMONIC" VARCHAR2(50 CHAR) NULL ,
"SUB_TASK_DESCRIPTION" VARCHAR2(254 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KB_IBP_CONFIG_TASK
-- ----------------------------
DROP TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK";
CREATE TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" (
"NAMESPACE_MNEMONIC" VARCHAR2(50 BYTE) NULL ,
"VERSION" VARCHAR2(10 CHAR) NULL ,
"SUB_TASK_ID" NUMBER(10) NOT NULL ,
"SUB_PROCESS_ID" NUMBER(10) NOT NULL ,
"SUB_TASK_MNEMONIC" VARCHAR2(50 CHAR) NULL ,
"SUB_TASK_DESCRIPTION" VARCHAR2(254 CHAR) NULL ,
"TASK_ID" NUMBER(10) NOT NULL ,
"TASK_MNEMONIC" VARCHAR2(50 CHAR) NULL ,
"TASK_DESCRIPTION" VARCHAR2(254 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(20) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KB_IBP_DEVICE
-- ----------------------------
DROP TABLE "ORDERMGMT"."KB_IBP_DEVICE";
CREATE TABLE "ORDERMGMT"."KB_IBP_DEVICE" (
"ID" VARCHAR2(500 BYTE) NOT NULL ,
"CRM_ORDER_NUMBER" VARCHAR2(100 BYTE) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(20) NOT NULL ,
"DEVICE" VARCHAR2(100 BYTE) NULL ,
"START_TIME" DATE NULL ,
"END_TIME" DATE NULL ,
"ACTION_VALUE" VARCHAR2(50 BYTE) NULL ,
"SUB_ACTION_VALUE" VARCHAR2(50 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"DO_TIME" DATE NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for KB_IBP_WORKPROCESS
-- ----------------------------
DROP TABLE "ORDERMGMT"."KB_IBP_WORKPROCESS";
CREATE TABLE "ORDERMGMT"."KB_IBP_WORKPROCESS" (
"ID" VARCHAR2(500 BYTE) NOT NULL ,
"TASK" VARCHAR2(150 BYTE) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(20) NOT NULL ,
"STATE" VARCHAR2(500 BYTE) NULL ,
"STATUS" VARCHAR2(2500 BYTE) NULL ,
"DO_TIME" DATE NULL ,
"START_TIME" DATE NULL ,
"END_TIME" DATE NULL ,
"BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(50 BYTE) NULL ,
"P_RESULT" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_OMS_UPDATE_FAILURE
-- ----------------------------
DROP TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE";
CREATE TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" (
"SEQID" NUMBER(15) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"REFERENCE_NUMBER" VARCHAR2(255 BYTE) NOT NULL ,
"ORDER_TYPE" VARCHAR2(254 CHAR) NOT NULL ,
"NAME_SPACE" VARCHAR2(254 CHAR) NOT NULL ,
"TASK" VARCHAR2(254 CHAR) NOT NULL ,
"UPDATE_STRING" CLOB NULL ,
"FAILURE_DESC" CLOB NULL ,
"CREATE_TIME" DATE NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_PURGE_ORDER
-- ----------------------------
DROP TABLE "ORDERMGMT"."LOG_PURGE_ORDER";
CREATE TABLE "ORDERMGMT"."LOG_PURGE_ORDER" (
"ACTION" VARCHAR2(50 BYTE) NULL ,
"COUNT" NUMBER(22) NULL ,
"MESSAGE" VARCHAR2(4000 BYTE) NULL ,
"TIME" TIMESTAMP(6)  DEFAULT sysdate  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for LOG_PURGE_ORDER_HIS
-- ----------------------------
DROP TABLE "ORDERMGMT"."LOG_PURGE_ORDER_HIS";
CREATE TABLE "ORDERMGMT"."LOG_PURGE_ORDER_HIS" (
"ORDER_SEQ_ID" VARCHAR2(30 BYTE) NOT NULL ,
"REFERENCE_NUMBER" VARCHAR2(50 BYTE) NOT NULL ,
"STATE" VARCHAR2(5 BYTE) NULL ,
"REMOVE_TIME" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for MAIN_CONFIG_INFO
-- ----------------------------
DROP TABLE "ORDERMGMT"."MAIN_CONFIG_INFO";
CREATE TABLE "ORDERMGMT"."MAIN_CONFIG_INFO" (
"INNER_PACKAGE_SERIAL" VARCHAR2(50 BYTE) NOT NULL ,
"CRM_PACKAGE_NAME" VARCHAR2(4000 BYTE) NOT NULL ,
"CRM_PACKAGE_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PPM_SEQ_ID" VARCHAR2(50 BYTE) NULL ,
"STATE" VARCHAR2(2 BYTE) NULL ,
"CREATE_TIME" DATE NULL ,
"MODIFY_TIME" DATE NULL ,
"CREATOR" VARCHAR2(20 BYTE) NULL ,
"MODIFIER" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_$INSTALL$PLAN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_$INSTALL$PLAN";
CREATE TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" (
"PLAN_ID" NUMBER(9) NOT NULL ,
"FROM_VERSION" VARCHAR2(60 CHAR) NOT NULL ,
"VERSION" VARCHAR2(60 CHAR) NOT NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"START_TS" TIMESTAMP(6)  NULL ,
"END_TS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_$INSTALL$PLAN_ACTIONS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS";
CREATE TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" (
"PLAN_ID" NUMBER(9) NOT NULL ,
"SEQ_ID" NUMBER(9) NOT NULL ,
"SCHEMA_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"OBJECT_TYPE" VARCHAR2(30 BYTE) NULL ,
"OBJECT_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"DB_OBJECT_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"FROM_VERSION" VARCHAR2(60 CHAR) NULL ,
"VERSION" VARCHAR2(60 CHAR) NULL ,
"ACTION_NAME" VARCHAR2(30 BYTE) NULL ,
"SUBTYPE" VARCHAR2(30 BYTE) NULL ,
"SUBACTION" VARCHAR2(30 BYTE) NULL ,
"STATUS" VARCHAR2(30 BYTE) NOT NULL ,
"START_TS" TIMESTAMP(6)  NULL ,
"END_TS" TIMESTAMP(6)  NULL ,
"ERROR_MESSAGE" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_$INSTALL$TABLE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_$INSTALL$TABLE";
CREATE TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" (
"TABLE_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"TABLE_CONTENT" VARCHAR2(30 BYTE) NOT NULL ,
"VOLATILITY" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_$INSTALL$VERSION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_$INSTALL$VERSION";
CREATE TABLE "ORDERMGMT"."OM_$INSTALL$VERSION" (
"OBJECT_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"OBJECT_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"VERSION" VARCHAR2(30 BYTE) NOT NULL ,
"SAME_AS" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ACTIVE_NOTIFICATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION";
CREATE TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"DATA_MODIFICATION_ID" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_APP_FUNC_WORKGROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP";
CREATE TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"APP_FUNCTION_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"STARTUP" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_APPLICATION_FUNCTION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION";
CREATE TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION" (
"APP_FUNCTION_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"APP_FUNCTION_DESCRIPTION" VARCHAR2(254 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ATTACHMENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ATTACHMENT";
CREATE TABLE "ORDERMGMT"."OM_ATTACHMENT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"ATTACHMENT_ID" NUMBER(9) NOT NULL ,
"ORDER_FLOW_REMARK_ID" NUMBER(9) NOT NULL ,
"ATTACH_FILE_NAME" VARCHAR2(255 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ATTACHMENT_FILE" BLOB NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ATTRIBUTE_CODE_LOOKUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP";
CREATE TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" (
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"TABLE_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"KEY_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"DATA_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ATTRIBUTE_TYPE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE";
CREATE TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" (
"ATTRIBUTE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ATTRIBUTE_DESCRIPTION" VARCHAR2(254 BYTE) NOT NULL ,
"STORAGE_TYPE" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_AUDIT_PURGE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_AUDIT_PURGE";
CREATE TABLE "ORDERMGMT"."OM_AUDIT_PURGE" (
"PURGE_SEQ_ID" NUMBER(18) NOT NULL ,
"OPERATION_NAME" VARCHAR2(64 BYTE) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NOT NULL ,
"START_DATE" DATE NOT NULL ,
"PURGE_DURATION_SEC" NUMBER(9) DEFAULT 0  NOT NULL ,
"INJECTED_ORDER_COUNT" NUMBER(9) DEFAULT 0  NOT NULL ,
"SELECTED_ORDER_COUNT" NUMBER(9) NOT NULL ,
"END_DATE" DATE NULL ,
"STOP_REQUESTED_DATE" DATE NULL ,
"STOPPED_DATE" DATE NULL ,
"RESUMED_DATE" DATE NULL ,
"ERROR_MESSAGE" VARCHAR2(4000 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_AUDIT_PURGE_ORDER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER";
CREATE TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"PURGE_SEQ_ID" NUMBER(18) NOT NULL ,
"CASCADED_DELETE" VARCHAR2(1 BYTE) NULL ,
"DELETED_DATE" DATE NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"REFERENCE_NUMBER" VARCHAR2(255 BYTE) NOT NULL ,
"ORD_STATE_ID" NUMBER(9) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ORD_CREATION_DATE" DATE NOT NULL ,
"ORD_START_DATE" DATE NOT NULL ,
"ORD_COMPLETION_DATE" DATE NOT NULL ,
"ORD_TXN_COMPLETION_DATE" TIMESTAMP(6)  NULL ,
"VERSION" NUMBER(9) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_AUDIT_PURGE_PARAM
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM";
CREATE TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" (
"PURGE_SEQ_ID" NUMBER(18) NOT NULL ,
"PARAMETER_NAME" VARCHAR2(254 CHAR) NOT NULL ,
"PARAMETER_TYPE" VARCHAR2(1 BYTE) NOT NULL ,
"PARAMETER_VALUE" VARCHAR2(255 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_AUTOMATION_CORRELATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION";
CREATE TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"AUTOMATION_ID" NUMBER(9) NOT NULL ,
"CORRELATION_TYPE" VARCHAR2(512 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_AUTOMATION_CTX
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_AUTOMATION_CTX";
CREATE TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"AUTOMATION_ID" NUMBER(9) NOT NULL ,
"CTX_ID" NUMBER(1) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"TASK_MNEMONIC" VARCHAR2(254 CHAR) NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NULL ,
"NOTIFICATION_ID" NUMBER(9) NULL ,
"NOTIFICATION_MNEMONIC" VARCHAR2(254 CHAR) NULL ,
"NOTIFICATION_HIST_SEQ_ID" NUMBER(18) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_BEAJMSSTATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_BEAJMSSTATE";
CREATE TABLE "ORDERMGMT"."OM_BEAJMSSTATE" (
"RECORDHANDLE" NUMBER NULL ,
"RECORDSTATE" NUMBER NULL ,
"RECORDGENERATION" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_BEAJMSSTORE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_BEAJMSSTORE";
CREATE TABLE "ORDERMGMT"."OM_BEAJMSSTORE" (
"RECORDHANDLE" NUMBER NULL ,
"RECORDSTATE" NUMBER NULL ,
"RECORD" LONG RAW NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_BEHAVIOR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_BEHAVIOR";
CREATE TABLE "ORDERMGMT"."OM_BEHAVIOR" (
"BEHAVIOR_ID" NUMBER(9) NOT NULL ,
"PROCESS_POINT" VARCHAR2(1 BYTE) NOT NULL ,
"BEHAVIOR_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"BEHAVIOR_DESCRIPTION" VARCHAR2(255 CHAR) NOT NULL ,
"JNDI" VARCHAR2(255 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_BEHAVIOR_PROPERTIES
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES";
CREATE TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" (
"BEHAVIOR_ID" NUMBER(9) NOT NULL ,
"PROPERTY_NAME" VARCHAR2(50 BYTE) NOT NULL ,
"PROPERTY_VALUE" VARCHAR2(50 BYTE) NOT NULL ,
"TASK_ID" NUMBER NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_CALENDAR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_CALENDAR";
CREATE TABLE "ORDERMGMT"."OM_CALENDAR" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"START_DATE" DATE NOT NULL ,
"STOP_DATE" DATE NOT NULL ,
"PREV_TOTAL" NUMBER NOT NULL ,
"RUNNING_TOTAL" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_CARTRIDGE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_CARTRIDGE";
CREATE TABLE "ORDERMGMT"."OM_CARTRIDGE" (
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NOT NULL ,
"NAMESPACE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"NAMESPACE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"VERSION" VARCHAR2(60 CHAR) NOT NULL ,
"RECYCLE_BIN_ID" NUMBER(6) NULL ,
"TIMESTAMP" DATE DEFAULT NULL  NOT NULL ,
"DEFAULT_VERSION" VARCHAR2(1 BYTE) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"LAST_UPDATE" DATE NOT NULL ,
"BUILD_ID" VARCHAR2(20 CHAR) NOT NULL ,
"CARTRIDGE_TYPE" VARCHAR2(50 CHAR) DEFAULT 'COMPONENT'  NOT NULL ,
"CHECKSUM" VARCHAR2(254 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_CDT_HIER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_CDT_HIER";
CREATE TABLE "ORDERMGMT"."OM_CDT_HIER" (
"ROOT_ID" NUMBER(9) NOT NULL ,
"PARENT_ROOT_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_CDT_PATH_SEGMENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT";
CREATE TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" (
"SEGMENT_ID" NUMBER(9) NOT NULL ,
"PARENT_ID" NUMBER(9) NULL ,
"ANCHOR_NODE_ID" NUMBER(9) NOT NULL ,
"CDT_ROOT_NODE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_COMPL_TASK_HOUR_SUMMARY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_COMPL_TASK_HOUR_SUMMARY";
CREATE TABLE "ORDERMGMT"."OM_COMPL_TASK_HOUR_SUMMARY" (
"DATE_HOUR" DATE NULL ,
"TASK_ID" NUMBER(9) NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NULL ,
"ORDER_TYPE_ID" NUMBER(9) NULL ,
"TASKSUM_CALENDAR" NUMBER(18) NULL ,
"TASKSUM_NO_CALENDAR" NUMBER(18) NULL ,
"MIN_B_TIM" NUMBER NULL ,
"MAX_B_TIM" NUMBER NULL ,
"SUM_B_TIM" NUMBER NULL ,
"SUM_SQRT_B_TIM" NUMBER NULL ,
"MIN_D_TIM" NUMBER NULL ,
"MAX_D_TIM" NUMBER NULL ,
"SUM_D_TIM" NUMBER NULL ,
"SUM_SQRT_D_TIM" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_COORD_NODE_INSTANCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE";
CREATE TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" (
"COORD_SET_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_COUNTRIES
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_COUNTRIES";
CREATE TABLE "ORDERMGMT"."OM_COUNTRIES" (
"CODE" VARCHAR2(2 BYTE) NOT NULL ,
"COUNTRY" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_CREATION_TASK_ORDER_VIEW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW";
CREATE TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_DATA_NOTIFICATION_DEF
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF";
CREATE TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_DD_INSIGNIFICANT_SEL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL";
CREATE TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" (
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"SELECTOR_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_DO_NOT_PURGE_LIST_TMP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_DO_NOT_PURGE_LIST_TMP";
CREATE TABLE "ORDERMGMT"."OM_DO_NOT_PURGE_LIST_TMP" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ERRORS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ERRORS";
CREATE TABLE "ORDERMGMT"."OM_ERRORS" (
"ERROR_CODE" NUMBER(9) NOT NULL ,
"ERROR_MESSAGE" VARCHAR2(4000 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EVENT_DEF
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EVENT_DEF";
CREATE TABLE "ORDERMGMT"."OM_EVENT_DEF" (
"EVENT_DEF_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"EVENT_TYPE" CHAR(1 BYTE) NOT NULL ,
"POOLER_ID" NUMBER(6) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"DISPATCH_TYPE" NUMBER(2) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(6) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EXCEPTION_POSITION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION";
CREATE TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EXCEPTION_TYPE_N_SOURCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE";
CREATE TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EXCEPTION_WORKGROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP";
CREATE TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EXT_SYSTEM
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EXT_SYSTEM";
CREATE TABLE "ORDERMGMT"."OM_EXT_SYSTEM" (
"ID" NUMBER(9) NOT NULL ,
"NAME" VARCHAR2(254 BYTE) NOT NULL ,
"ENTITY_TYPE" VARCHAR2(40 BYTE) NOT NULL ,
"XMLDEF" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_EXTERNAL_TASK
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_EXTERNAL_TASK";
CREATE TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"RESPONSIBILITY_ID" NUMBER(9) NOT NULL ,
"TASK_INSTRUCTION" VARCHAR2(20 BYTE) NOT NULL ,
"EXPECTED_DURATION" NUMBER(9) NOT NULL ,
"DURATION_TYPE" VARCHAR2(20 BYTE) DEFAULT 'SYSTEM'  NOT NULL ,
"TASK_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_FALLOUT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_FALLOUT";
CREATE TABLE "ORDERMGMT"."OM_FALLOUT" (
"ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_FALLOUT_GROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_FALLOUT_GROUP";
CREATE TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" (
"ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_FALLOUT_GROUP_MEMBER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER";
CREATE TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" (
"FALLOUT_GROUP_ID" NUMBER(9) NOT NULL ,
"FALLOUT_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_FALLOUT_NODE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_FALLOUT_NODE";
CREATE TABLE "ORDERMGMT"."OM_FALLOUT_NODE" (
"FALLOUT_ID" NUMBER(9) NOT NULL ,
"NODE_ID" NUMBER(9) NOT NULL ,
"NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"POSITION" NUMBER(9) DEFAULT 0  NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_GENERIC_MNEMONIC
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC";
CREATE TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" (
"CLASS" VARCHAR2(254 CHAR) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"DESCRIPTION" VARCHAR2(254 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HINT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HINT";
CREATE TABLE "ORDERMGMT"."OM_HINT" (
"OM_REQ_TYPE" VARCHAR2(10 BYTE) NOT NULL ,
"OM_HINT" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$COMPENSATION_PLAN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN";
CREATE TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_AMENDMENT_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_HIST_SEQ_ID" NUMBER(18) NULL ,
"COMPENSATION_ORDER_STATE_ID" NUMBER(9) NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMPENSATION_ACTION" VARCHAR2(20 BYTE) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$COMPONENT_STATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE";
CREATE TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_HIST_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMP_STATE_HIST_ID" NUMBER(18) NOT NULL ,
"STATE" VARCHAR2(20 BYTE) NOT NULL ,
"STATE_TIMESTAMP" DATE NOT NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$DATA_CHANGE_NOTIF
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF";
CREATE TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"DATA_MODIFICATION_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"H$INST_SEQ_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$FALLOUT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$FALLOUT";
CREATE TABLE "ORDERMGMT"."OM_HIST$FALLOUT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_ID" NUMBER(18) NOT NULL ,
"INITIATOR_HIST_ID" NUMBER(18) NOT NULL ,
"FALLOUT_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$FALLOUT_NODE_INSTANCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE";
CREATE TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"NODE_VALUE_NUM" NUMBER NULL ,
"NODE_VALUE_TEXT" VARCHAR2(1000 CHAR) NULL ,
"NODE_VALUE_CLOB" CLOB NULL ,
"NODE_VALUE_BLOB" BLOB NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$FLOW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$FLOW";
CREATE TABLE "ORDERMGMT"."OM_HIST$FLOW" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID_FROM" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$MODEL_CLOB
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB";
CREATE TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" (
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"NAME" VARCHAR2(254 BYTE) NOT NULL ,
"ENTITY_VERSION" NUMBER(6) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"ENTITY_TYPE" VARCHAR2(40 BYTE) NOT NULL ,
"MODEL" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$NOTIFICATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION";
CREATE TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"DATA_MODIFICATION_ID" NUMBER(18) NOT NULL ,
"ACTION" CHAR(1 BYTE) NULL ,
"TIMESTAMP" DATE NULL ,
"USERNAME" VARCHAR2(32 CHAR) NULL ,
"MESSAGE" VARCHAR2(4000 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$ORCH_DEPENDENCY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY";
CREATE TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL ,
"STATE" VARCHAR2(20 BYTE) NOT NULL ,
"TARGET_STATE" VARCHAR2(20 BYTE) NOT NULL ,
"TARGET_STATE_EXPECTED_TIME" NUMBER(18) NOT NULL ,
"TIMESTAMP" DATE NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$ORDER_HEADER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER";
CREATE TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_PROCESS_ID" NUMBER(9) NOT NULL ,
"HIST_POSITION_ID" NUMBER(9) NULL ,
"HIST_ORDER_STATE_ID" NUMBER(9) NOT NULL ,
"HIST_ORDER_STATUS_ID" NUMBER(9) NOT NULL ,
"HIST_REPORTING_STATUS_ID" NUMBER(9) NOT NULL ,
"TIMESTAMP_IN" DATE NOT NULL ,
"TIMESTAMP_OUT" DATE NOT NULL ,
"TASK_TIMESTAMP_IN" DATE NOT NULL ,
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"AUTHOR" VARCHAR2(32 CHAR) NOT NULL ,
"TRANS_TYPE" CHAR(1 BYTE) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"COMPLETION_DATE_EXPECTED" DATE NULL ,
"COMPL_EXPECTED_ID" NUMBER(9) NULL ,
"COMPL_EXPECTED_TYPE" VARCHAR2(20 BYTE) NULL ,
"PARENT_HIST_SEQ_ID" NUMBER(18) NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NULL ,
"TASK_ORDER_NODE_ID" NUMBER(9) NULL ,
"TASK_ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"TERM_HIST_MAP_SEQ_ID" NUMBER(18) NULL ,
"EFFECT_HIST_MAP_SEQ_ID" NUMBER(18) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"COORD_SET_ID" NUMBER(18) NULL ,
"ROLLBACK" VARCHAR2(1 BYTE) NULL ,
"CONTEXT_ID" NUMBER(18) NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NOT NULL ,
"BASE_HIST_SEQ_ID" NUMBER(18) NULL ,
"COMPENSATOR_HIST_ID" NUMBER(18) NULL ,
"COMPENSATION_ROOT_HIST_ID" NUMBER(18) NULL ,
"COMPONENT_NODE_INDEX" NUMBER(18) NULL ,
"COMPENSATION_STAGE" VARCHAR2(20 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$ORDER_INSTANCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE";
CREATE TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"H$INST_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"DML_ACTION" CHAR(1 BYTE) NOT NULL ,
"H$INST_SEQ_ID_FROM" NUMBER(18) NOT NULL ,
"PARENT_NODE_INDEX" NUMBER(18) NOT NULL ,
"NODE_VALUE_NUM" NUMBER NULL ,
"NODE_VALUE_TEXT" VARCHAR2(1000 CHAR) NULL ,
"REFERENCED_NODE_INDEX" NUMBER(18) NULL ,
"H$INST_TIMESTAMP" DATE NOT NULL ,
"USERNAME" VARCHAR2(50 BYTE) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"CONTEXT_TYPE" VARCHAR2(50 BYTE) NULL ,
"CONTEXT_MNEMONIC" VARCHAR2(254 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ORDER_NODE_ID_TO" NUMBER(9) NULL ,
"IS_SECRET" VARCHAR2(10 BYTE) NULL ,
"ROLLBACK" VARCHAR2(1 BYTE) NULL ,
"CONTEXT_ID" NUMBER(18) NULL ,
"NODE_VALUE_CLOB" CLOB NULL ,
"NODE_VALUE_BLOB" BLOB NULL ,
"COMPLEX_TYPE_ROOT_NODE_ID" NUMBER(9) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$ORDER_STATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE";
CREATE TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_STATE_SEQ_ID" NUMBER(18) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"ORD_TXN_START_DATE" DATE NOT NULL ,
"ORD_TXN_COMPLETION_DATE" DATE NOT NULL ,
"ORD_TXN_AUTHOR" VARCHAR2(30 CHAR) NULL ,
"ORD_TXN_REASON" CLOB NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HIST$STATUS_MAP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP";
CREATE TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_MAP_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"PARENT_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"SUBPROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"TASK_TRANS_TYPE" CHAR(1 BYTE) NOT NULL ,
"TERMINATE_CHILDREN" VARCHAR2(50 BYTE) NOT NULL ,
"REPORTING_STATUS_ID" NUMBER(9) NOT NULL ,
"TASK_STATUS_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_HOLIDAYS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_HOLIDAYS";
CREATE TABLE "ORDERMGMT"."OM_HOLIDAYS" (
"REGION_ID" NUMBER(9) NOT NULL ,
"HOLIDAY_DATE" DATE NOT NULL ,
"HOLIDAY_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_I18N_DESCRIPTION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION";
CREATE TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" (
"ENTITY_TYPE" VARCHAR2(50 BYTE) NOT NULL ,
"ENTITY_ID" NUMBER(9) NOT NULL ,
"LANG_CODE" VARCHAR2(50 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_INSIGNIFICANT_SELECTOR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR";
CREATE TABLE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" (
"ID" NUMBER(9) NOT NULL ,
"SOURCE" VARCHAR2(4000 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_JMS_EVENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_JMS_EVENT";
CREATE TABLE "ORDERMGMT"."OM_JMS_EVENT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_HIST_ID" NUMBER(18) NOT NULL ,
"EVENT_ID" NUMBER(9) NOT NULL ,
"POOLER_ID" NUMBER(6) NOT NULL ,
"EVENT_TYPE" CHAR(1 BYTE) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_HIST_ID" NUMBER(18) NOT NULL ,
"EVENT_DEF_ID" NUMBER(9) NOT NULL ,
"TIMESTAMP" DATE DEFAULT NULL  NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_JMS_THREAD
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_JMS_THREAD";
CREATE TABLE "ORDERMGMT"."OM_JMS_THREAD" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"THREAD_ID" NUMBER(18) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"BEHAVIOR_ID" NUMBER(9) NOT NULL ,
"TIMESTAMP" DATE NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_JOB_MONITOR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_JOB_MONITOR";
CREATE TABLE "ORDERMGMT"."OM_JOB_MONITOR" (
"JOB_TYPE" VARCHAR2(1 BYTE) NOT NULL ,
"WHAT" VARCHAR2(500 BYTE) NOT NULL ,
"LAST_CHECK" DATE NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_JUMP_NOTIFICATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION";
CREATE TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_KEY_HASH_BUCKET
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_KEY_HASH_BUCKET";
CREATE TABLE "ORDERMGMT"."OM_KEY_HASH_BUCKET" (
"BUCKET_ID" NUMBER(18) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_LANGUAGES
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_LANGUAGES";
CREATE TABLE "ORDERMGMT"."OM_LANGUAGES" (
"CODE" VARCHAR2(2 BYTE) NOT NULL ,
"LANGUAGE" VARCHAR2(50 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_LOCALIZATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_LOCALIZATION";
CREATE TABLE "ORDERMGMT"."OM_LOCALIZATION" (
"LANG_CODE" VARCHAR2(5 BYTE) NOT NULL ,
"RESOURCE_KEY" VARCHAR2(254 CHAR) NOT NULL ,
"RESOURCE_VALUE" VARCHAR2(1000 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_LOOKUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_LOOKUP";
CREATE TABLE "ORDERMGMT"."OM_LOOKUP" (
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"CODE" VARCHAR2(254 CHAR) NOT NULL ,
"CODE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_MNEMONIC_PATH
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_MNEMONIC_PATH";
CREATE TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" (
"PATH_ID" NUMBER(9) NOT NULL ,
"MNEMONIC_PATH" VARCHAR2(4000 BYTE) NOT NULL ,
"NODE_ID" NUMBER(9) NULL ,
"SEGMENT_ID" NUMBER(9) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"COMPILE" VARCHAR2(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_MODEL_CLOB
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_MODEL_CLOB";
CREATE TABLE "ORDERMGMT"."OM_MODEL_CLOB" (
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"NAME" VARCHAR2(254 BYTE) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"ENTITY_TYPE" VARCHAR2(40 BYTE) NOT NULL ,
"MODEL" CLOB NOT NULL ,
"RESOURCE_BLOB" BLOB NULL ,
"RESOURCE_BLOB_LOCATION" VARCHAR2(254 BYTE) NULL ,
"RESOURCE_BLOB_CHECKSUM" NUMBER(9) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_MOT_INSIGNIFICANT_SEL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL";
CREATE TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"SELECTOR_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_NODE_FILTER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_NODE_FILTER";
CREATE TABLE "ORDERMGMT"."OM_NODE_FILTER" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"DEPTH" NUMBER(9) NOT NULL ,
"PIVOT_NODE_ID" NUMBER(9) NULL ,
"PIVOT_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(9) NULL ,
PRIMARY KEY ("ORDER_NODE_ID", "ORDER_NODE_TYPE", "DEPTH")
)
ORGANIZATION INDEX NOLOGGING NOCOMPRESS PCTTHRESHOLD 50 

;

-- ----------------------------
-- Table structure for OM_NOTIFICATION_DEF
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF";
CREATE TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" (
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"NOTIFICATION_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"RULE_ID" NUMBER(9) NOT NULL ,
"PRIORITY" NUMBER(9) NOT NULL ,
"INTERVAL" VARCHAR2(200 BYTE) NOT NULL ,
"AUTHOR" VARCHAR2(32 CHAR) NOT NULL ,
"LAST_START" DATE NOT NULL ,
"LAST_FINISH" DATE NOT NULL ,
"NEXT_START" DATE NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'ENABLED'  NOT NULL ,
"LOOP_TEXT" VARCHAR2(4000 BYTE) NULL ,
"LOOP_SOURCE" VARCHAR2(4000 BYTE) NULL ,
"TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"DISPATCH_TYPE" NUMBER(2) DEFAULT 1  NOT NULL ,
"POOLER_ID" NUMBER(6) DEFAULT -1  NOT NULL ,
"E_MAIL" CHAR(1 BYTE) DEFAULT 'N'  NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(6) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_COMP_DECOMPOSITION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION";
CREATE TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"STAGE_INDEX" NUMBER(18) NOT NULL ,
"STAGE" VARCHAR2(1000 BYTE) NOT NULL ,
"SPEC_NAME" VARCHAR2(1000 BYTE) NULL ,
"SPEC_NAMESPACE" VARCHAR2(1000 BYTE) NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_COMPLDEP_ITEM_DETAIL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL";
CREATE TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"SUCCESSOR_ITEM_NODE_INDEX" NUMBER(18) NOT NULL ,
"PREDECESSOR_ITEM_NODE_INDEX" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_COMPLETION_DEPENDENCY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY";
CREATE TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"PREDECESSOR_ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"PREDECESSOR_COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NULL ,
"TRANSITION_NAME" VARCHAR2(1000 CHAR) NULL ,
"PATH_ID" NUMBER(9) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_DATACHANGE_DEPEND_ITEM
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM";
CREATE TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"ITEM_NODE_INDEX" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_DEPEND_DATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE";
CREATE TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"DELAY_UNTIL" NUMBER(18) NOT NULL ,
"DURATION" NUMBER(18) DEFAULT 0  NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_DEPEND_DURATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION";
CREATE TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"DURATION" VARCHAR2(20 BYTE) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_DEPENDENCY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY";
CREATE TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL ,
"STATE" VARCHAR2(20 BYTE) NOT NULL ,
"TARGET_STATE" VARCHAR2(20 BYTE) NOT NULL ,
"TARGET_STATE_EXPECTED_TIME" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_DEPENDENCY_PENDING
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING";
CREATE TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_HIST_SEQ_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ITEM_DEPEND_PRED
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"ITEM_NODE_INDEX" NUMBER(18) NOT NULL ,
"SUCCESSOR_ORDER_SEQ_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ITEM_DEPEND_SUCC
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"ITEM_NODE_INDEX" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ITEM_DEPENDENCY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"DEPENDENCY_ID" NUMBER(18) NOT NULL ,
"PREDECESSOR_ORDER_SEQ_ID" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ITEM_HIER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"PARENT_NODE_INDEX" NUMBER(18) NOT NULL ,
"CHILD_NODE_INDEX" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ORDER_COMPONENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_HIST_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMP_HIST_ID" NUMBER(18) NOT NULL ,
"COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMP_TASK_ID" NUMBER(18) NOT NULL ,
"STATE" VARCHAR2(20 BYTE) NOT NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL ,
"BASE_COMP_NODE_INDEX" NUMBER(18) NULL ,
"EXPECTED_START_DATE" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ORDER_COMPONENT_ITEM
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COMP_NODE_INDEX" NUMBER(18) NOT NULL ,
"ITEM_NODE_INDEX" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_ORDER_ITEM
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM";
CREATE TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_HIST_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_NODE_INDEX" NUMBER(18) NOT NULL ,
"ITEM_NODE_INDEX" NUMBER(18) NOT NULL ,
"CONTEXT_ID" NUMBER(18) NOT NULL ,
"NAME" VARCHAR2(1000 BYTE) NULL ,
"SPEC_NAME" VARCHAR2(1000 BYTE) NULL ,
"SPEC_NAMESPACE" VARCHAR2(1000 BYTE) NULL ,
"PRODUCT_SPEC_NAME" VARCHAR2(1000 BYTE) NULL ,
"PRODUCT_SPEC_NAMESPACE" VARCHAR2(1000 BYTE) NULL ,
"EXPECTED_COMPL_DATE" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORCH_PLAN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORCH_PLAN";
CREATE TABLE "ORDERMGMT"."OM_ORCH_PLAN" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_HIST_ID" NUMBER(18) NOT NULL ,
"ORCH_PLAN_NODE_INDEX" NUMBER(18) NOT NULL ,
"ORCH_PLAN_DATA" CLOB NULL ,
"ORCH_PLAN_BDATA" BLOB NULL ,
"ORCH_PLAN_CONTEXT" "ORDERMGMT"."OM_T_ORCH_PROCESS" NOT NULL ,
"SPEC_NAME" VARCHAR2(1000 BYTE) NOT NULL ,
"SPEC_NAMESPACE" VARCHAR2(1000 BYTE) NOT NULL ,
"MODE_NAME" VARCHAR2(1000 BYTE) NOT NULL ,
"MODE_NAMESPACE" VARCHAR2(1000 BYTE) NOT NULL ,
"START_DATE" NUMBER(18) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_AMENDMENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT";
CREATE TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" (
"AMENDMENT_ORDER_ID" NUMBER(18) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_TYPE" CHAR(1 BYTE) NOT NULL ,
"AMENDMENT_CHANGES_HIST_ID" NUMBER(18) NOT NULL ,
"AMENDMENT_SUBMIT_DATE" DATE NOT NULL ,
"COMPENSATION_START_DATE" DATE NULL ,
"COMPENSATION_COMPLETION_DATE" DATE NULL ,
"SKIPPED_AMENDING" CHAR(1 BYTE) DEFAULT 'N'  NOT NULL ,
"ACTIVE_AMENDMENT_ORDER_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_STAGE" VARCHAR2(20 BYTE) DEFAULT 'SINGLE'  NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_AMENDMENT_KEY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" (
"ORDER_TYPE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_SOURCE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"NAMESPACE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"KEY" VARCHAR2(2000 BYTE) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_COMPENSATION_PLAN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN";
CREATE TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_AMENDMENT_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"COMPENSATION_HIST_SEQ_ID" NUMBER(18) NULL ,
"COMPENSATION_ORDER_STATE_ID" NUMBER(9) NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"COMPENSATION_ACTION" VARCHAR2(20 BYTE) NOT NULL ,
"COMPENSATION_STAGE" VARCHAR2(20 BYTE) DEFAULT 'SINGLE'  NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_DATA_DICTIONARY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" (
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"DATA_DICTIONARY_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ATTRIBUTE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"BUSINESS_NAME" VARCHAR2(254 CHAR) NOT NULL ,
"ATTRIBUTE_LENGTH" NUMBER(9) NOT NULL ,
"ATTRIBUTE_ENCRYPTED" VARCHAR2(20 BYTE) NOT NULL ,
"ATTRIBUTE_MASK" VARCHAR2(255 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"SIGNIFICANT" CHAR(1 BYTE) DEFAULT 'Y'  NOT NULL ,
"NAMESPACE" VARCHAR2(254 CHAR) NULL ,
"COMPLEX_TYPE_NAME" VARCHAR2(254 CHAR) NULL ,
"ELEMENT_CONTEXT" VARCHAR2(512 CHAR) NULL ,
"IS_COMPLEX_TYPE_CHILD_ELEM" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_FLOW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_FLOW";
CREATE TABLE "ORDERMGMT"."OM_ORDER_FLOW" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"DATE_POS_STARTED" DATE NOT NULL ,
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"AUTHOR" VARCHAR2(32 CHAR) NOT NULL ,
"COMPLETION_DATE_EXPECTED" DATE NOT NULL ,
"COMPL_EXPECTED_ID" NUMBER(9) NOT NULL ,
"COMPL_EXPECTED_TYPE" VARCHAR2(20 BYTE) NULL ,
"PARENT_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"SAVE_PAR_HIST_SEQ_ID" NUMBER(18) NULL ,
"COORD_SET_ID" NUMBER(18) NOT NULL ,
"SAVE_COORD_SET_ID" NUMBER(18) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"EVENT_SEQ_ID" NUMBER(9) NULL ,
"EVALUATE" NUMBER(1) NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NOT NULL ,
"DELAY_ORDER_SEQ_ID" NUMBER DEFAULT DECODE("TASK_TYPE",'D',"ORDER_SEQ_ID",NULL)  NULL ,
"DELAY_TASK_ID" NUMBER DEFAULT DECODE("TASK_TYPE",'D',"TASK_ID",NULL)  NULL ,
"RULE_ORDER_SEQ_ID" NUMBER DEFAULT DECODE("TASK_TYPE",'R',"ORDER_SEQ_ID",NULL)  NULL ,
"RULE_TASK_ID" NUMBER DEFAULT DECODE("TASK_TYPE",'R',"TASK_ID",NULL)  NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_FLOW_COORDINATOR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR";
CREATE TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"COORD_SET_ID" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_FLOW_REMARKS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS";
CREATE TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_FLOW_REMARK_ID" NUMBER(9) NOT NULL ,
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"REMARKS_TYPE_ID" NUMBER(9) NOT NULL ,
"REMARK_DATE" DATE DEFAULT NULL  NOT NULL ,
"REMARK" VARCHAR2(4000 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_FLOW_START
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_FLOW_START";
CREATE TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" (
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"RULE_ID" NUMBER(9) NOT NULL ,
"PRECEDENCE" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_HEADER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_HEADER";
CREATE TABLE "ORDERMGMT"."OM_ORDER_HEADER" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"REFERENCE_NUMBER" VARCHAR2(255 BYTE) NOT NULL ,
"FILE_NAME" VARCHAR2(255 BYTE) NOT NULL ,
"ORD_CREATION_DATE" DATE NOT NULL ,
"ORD_START_DATE" DATE NOT NULL ,
"EXPECTED_START_DATE" DATE NULL ,
"ORD_COMPLETION_DATE" DATE NOT NULL ,
"ORD_COMPL_DATE_EXPECTED" DATE NOT NULL ,
"REQUESTED_DELIVERY_DATE" DATE NULL ,
"EXPECTED_DURATION" NUMBER(9) NULL ,
"NUM_REMARKS" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PRIORITY" NUMBER(1) NOT NULL ,
"DB_INSTANCE" NUMBER(4) DEFAULT sys_context('USERENV', 'INSTANCE')  NOT NULL ,
"ORD_STATE_ID" NUMBER(9) NULL ,
"ORD_TARGET_STATE_ID" NUMBER(9) NULL ,
"ORD_TXN_START_DATE" DATE NULL ,
"ORD_TXN_COMPLETION_DATE" DATE NULL ,
"ORD_TXN_GRACE_INTERVAL" NUMBER(19) NULL ,
"ORD_TXN_AUTHOR" VARCHAR2(30 BYTE) NULL ,
"ORD_TXN_REASON" VARCHAR2(1000 BYTE) NULL ,
"ORD_TXN_REASON_DETAIL" CLOB NULL ,
"VERSION" NUMBER(9) NULL ,
"CREATION_VIEW_ID" NUMBER(9) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_HIER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_HIER";
CREATE TABLE "ORDERMGMT"."OM_ORDER_HIER" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"PARENT_NODE_ID" NUMBER(9) NULL ,
"PARENT_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"REFERENCED_NODE_ID" NUMBER(9) NULL ,
"REFERENCED_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"POSITION" NUMBER(9) DEFAULT 0  NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL ,
"SIGNIFICANT" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_HIER_KEY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"KEY_POSITION" NUMBER(9) NOT NULL ,
"KEY" VARCHAR2(4000 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_ID_BLOCK
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK";
CREATE TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" (
"DBINSTANCE" NUMBER NOT NULL ,
"FIRST_ORDER_ID" NUMBER(18) NOT NULL ,
"LAST_ORDER_ID" NUMBER(18) NOT NULL ,
"ANCESTRY_POPULATED_UP_TO" NUMBER(18) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_ID_FOR_BACKUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_BACKUP";
CREATE TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_BACKUP" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
PRIMARY KEY ("ORDER_SEQ_ID")
)
ORGANIZATION INDEX NOLOGGING NOCOMPRESS PCTTHRESHOLD 50 

;

-- ----------------------------
-- Table structure for OM_ORDER_ID_FOR_CLONE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_CLONE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_CLONE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_ID_FOR_PURGE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_PURGE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_PURGE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_INSTANCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_INSTANCE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"DML_ACTION" CHAR(1 BYTE) NULL ,
"NODE_VALUE_NUM" NUMBER NULL ,
"NODE_VALUE_TEXT" VARCHAR2(1000 CHAR) NULL ,
"NODE_VALUE_TEXT_UPPER" VARCHAR2(255 CHAR) NULL ,
"PARENT_NODE_INDEX" NUMBER(18) NOT NULL ,
"PARENT_NODE_ID" NUMBER(9) NULL ,
"PARENT_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"H$INST_SEQ_ID" NUMBER(18) NOT NULL ,
"USERNAME" VARCHAR2(50 CHAR) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"CONTEXT_TYPE" VARCHAR2(50 BYTE) NULL ,
"CONTEXT_MNEMONIC" VARCHAR2(254 CHAR) NULL ,
"H$INST_TIMESTAMP" DATE NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"IS_SECRET" VARCHAR2(10 BYTE) NULL ,
"ROLLBACK" VARCHAR2(1 BYTE) NULL ,
"CONTEXT_ID" NUMBER(18) NULL ,
"NODE_VALUE_CLOB" CLOB NULL ,
"NODE_VALUE_BLOB" BLOB NULL ,
"COMPLEX_TYPE_ROOT_NODE_ID" NUMBER(9) NULL ,
"SEARCHABLE" CHAR(1 BYTE) DEFAULT 'N'  NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_NODE_ANCESTRY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"DEPTH" NUMBER(9) NOT NULL ,
"ANCESTOR_NODE_ID" NUMBER(9) NOT NULL ,
"ANCESTOR_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ANCESTOR_NODE_INDEX" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_NODE_ANCESTRY_TMP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP";
CREATE TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP" (
"ORDER_NODE_INDEX" NUMBER(18) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PARENT_NODE_INDEX" NUMBER(18) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_POS_INPUT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT";
CREATE TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID_TO" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID_TO" NUMBER(9) NOT NULL ,
"PARENT_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"COORD_SET_ID" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_REMARKS_TYPE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" (
"REMARKS_TYPE_ID" NUMBER(9) NOT NULL ,
"REMARKS_TYPE_DESCRIPTION" VARCHAR2(254 BYTE) NOT NULL ,
"REMARKS_TYPE_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_SOURCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_SOURCE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_SOURCE" (
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_IMPORT_DIRECTORY" VARCHAR2(255 BYTE) NOT NULL ,
"ORDER_SOURCE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_EXPORT_DIRECTORY" VARCHAR2(255 BYTE) NOT NULL ,
"ORDER_SOURCE_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_STATE_EVENT_PENDING
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING";
CREATE TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_STATE_SEQ_ID" NUMBER(18) NOT NULL ,
"PREV_STATE_ID" NUMBER(9) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_STATE_PENDING
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING";
CREATE TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORD_TARGET_STATE_ID" NUMBER(9) NOT NULL ,
"ORD_TXN_START_DATE" DATE NOT NULL ,
"ORD_TXN_GRACE_INTERVAL" NUMBER(19) NOT NULL ,
"ORD_TXN_EVENT_DATE" DATE NOT NULL ,
"ORD_TXN_EVENT_INTERVAL" NUMBER(19) NOT NULL ,
"STATUS" VARCHAR2(20 BYTE) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TEMPLATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"T_PARENT_NODE_ID" NUMBER(9) NULL ,
"T_PARENT_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"POSITION" NUMBER(9) DEFAULT 0  NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"SIGNIFICANT" CHAR(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TEMPLATE_KEY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"KEY_POSITION" NUMBER(9) NOT NULL ,
"KEY" VARCHAR2(4000 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TYPE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TYPE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TYPE" (
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_TYPE_CATEGORY_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TYPE_CATEGORY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" (
"ORDER_TYPE_CATEGORY_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_CATEGORY_DESCR" VARCHAR2(254 CHAR) NOT NULL ,
"ORDER_TYPE_CATEGORY_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TYPE_N_SOURCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" (
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"CREATION_TASK_ID" NUMBER(9) NOT NULL ,
"CREATION_TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PRIORITY_MIN" NUMBER(1) DEFAULT 0  NOT NULL ,
"PRIORITY_MAX" NUMBER(1) DEFAULT 9  NOT NULL ,
"PRIORITY_CALCULATION" VARCHAR2(4000 BYTE) NULL ,
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"AMENDABLE" CHAR(1 BYTE) DEFAULT 'N'  NOT NULL ,
"VERSION" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TYPE_N_SOURCE_EVENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" (
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"EVENT_TYPE_ID" NUMBER(3) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_TYPE_N_SOURCE_KEY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY";
CREATE TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" (
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"KEY_POSITION" NUMBER(9) NOT NULL ,
"KEY" VARCHAR2(4000 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW" (
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"ORDER_VIEW_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"DATA_NAMESPACE" VARCHAR2(4000 BYTE) NULL ,
"STYLESHEET" VARCHAR2(4000 BYTE) NULL ,
"PRINT_STYLESHEET" VARCHAR2(4000 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ORDER_VIEW_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_NODE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"LABEL_ID" NUMBER(9) NOT NULL ,
"EDIT" VARCHAR2(20 BYTE) NOT NULL ,
"POSITION" NUMBER(9) NOT NULL ,
"MAX_VIEW_INSTANCES" NUMBER(9) NOT NULL ,
"MIN_VIEW_INSTANCES" NUMBER(9) NOT NULL ,
"DEFAULT_VALUE" VARCHAR2(1000 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"SIGNIFICANT" CHAR(1 BYTE) NULL ,
"REPORTING_LABEL" VARCHAR2(20 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_DEF_DD
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" (
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'ENABLED'  NOT NULL ,
"RULE_DESCRIPTION" VARCHAR2(1024 BYTE) NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"RULE_IS_FINAL" VARCHAR2(1 BYTE) NULL ,
"RULE_OVERRIDES" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_DEF_OH
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" (
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'ENABLED'  NOT NULL ,
"RULE_DESCRIPTION" VARCHAR2(1024 BYTE) NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"RULE_IS_FINAL" VARCHAR2(1 BYTE) NULL ,
"RULE_OVERRIDES" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_DEF_OT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" (
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'ENABLED'  NOT NULL ,
"RULE_DESCRIPTION" VARCHAR2(1024 BYTE) NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"RULE_IS_FINAL" VARCHAR2(1 BYTE) NULL ,
"RULE_OVERRIDES" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_DEF_VN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" (
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'ENABLED'  NOT NULL ,
"RULE_DESCRIPTION" VARCHAR2(1024 BYTE) NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"RULE_IS_FINAL" VARCHAR2(1 BYTE) NULL ,
"RULE_OVERRIDES" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_EXPR_DEF_DD
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" (
"EXPRESSION_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"EXPRESSION_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"EXPRESSION_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_EXPR_DEF_OH
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" (
"EXPRESSION_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"EXPRESSION_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"EXPRESSION_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_EXPR_DEF_OT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" (
"EXPRESSION_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"EXPRESSION_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"EXPRESSION_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_ORDER_VIEW_RULE_EXPR_DEF_VN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN";
CREATE TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" (
"EXPRESSION_ID" NUMBER(9) NOT NULL ,
"VIEW_RULE_ID" NUMBER(9) NOT NULL ,
"EXPRESSION_TYPE" VARCHAR2(30 BYTE) NOT NULL ,
"EXPRESSION_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"PROPERTY1" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY2" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY3" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY4" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY5" VARCHAR2(1024 BYTE) NULL ,
"PROPERTY6" VARCHAR2(1024 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY" (
"ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_CONDITION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" (
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"TXN_ID" NUMBER(9) NOT NULL ,
"CONDITION_RULE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_PERMISSION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" (
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"TXN_ID" NUMBER(9) NOT NULL ,
"WORKGROUP_SET_ID" NUMBER(9) NOT NULL ,
"PRIVILEGE_RULE_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_RULE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_RULE";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" (
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"SOURCE" CLOB NOT NULL ,
"CONDITION_NAME" VARCHAR2(50 CHAR) DEFAULT 'defaultCondition'  NULL ,
"ERROR_MESSAGE" VARCHAR2(254 CHAR) DEFAULT 'An exception occurred.'  NULL ,
"SEVERITY_LEVEL" VARCHAR2(10 BYTE) DEFAULT 'ERROR'  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_STATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_STATE";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" (
"ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_STATE_TXN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" (
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"TXN_ID" NUMBER(9) NOT NULL ,
"TXN_MIN_GRACE_PERIOD" NUMBER(9) NOT NULL ,
"TXN_MAX_GRACE_PERIOD" NUMBER(9) NOT NULL ,
"TXN_EVENT_INTERVAL" NUMBER(9) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OSPOLICY_TXN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OSPOLICY_TXN";
CREATE TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" (
"ID" NUMBER(9) NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_OT_INSIGNIFICANT_SEL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL";
CREATE TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"SELECTOR_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PARAMETER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PARAMETER";
CREATE TABLE "ORDERMGMT"."OM_PARAMETER" (
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"DESCRIPTION" VARCHAR2(254 BYTE) NULL ,
"VALUE" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PIVOT_NODE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PIVOT_NODE";
CREATE TABLE "ORDERMGMT"."OM_PIVOT_NODE" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_POS_NOTIFICATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_POS_NOTIFICATION";
CREATE TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS";
CREATE TABLE "ORDERMGMT"."OM_PROCESS" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"PROCESS_EXPECTED_DURATION" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PROCESS_ID_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"WORKSTREAM" VARCHAR2(1 BYTE) DEFAULT 'N'  NOT NULL ,
"ANNOTATION" CLOB NULL ,
"PROCESS_TYPE" VARCHAR2(50 CHAR) DEFAULT 'FLOW'  NOT NULL ,
"ORCHESTRATION_NAMESPACE" VARCHAR2(254 CHAR) NULL ,
"ORCHESTRATION_NAME" VARCHAR2(254 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_CONTROL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_CONTROL";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" (
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID_TO" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID_TO" NUMBER(9) NOT NULL ,
"MANDATORY_CHECK" VARCHAR2(20 BYTE) NOT NULL ,
"REPORTING_STATUS_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"RULE_ID" NUMBER(9) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_JUMP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_JUMP";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_JUMP" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID_TO" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID_TO" NUMBER(9) NOT NULL ,
"REPORTING_STATUS_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_POINT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_POINT";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_POINT" (
"PROCESS_POINT" VARCHAR2(1 BYTE) NOT NULL ,
"PROCESS_POINT_DESCRIPTION" VARCHAR2(254 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_POSITION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_POSITION";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_POSITION" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"WAIT_INPUT_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"POSITION_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"POSITION_MNEMONIC" VARCHAR2(510 CHAR) NOT NULL ,
"SHOW_IN_PROCESS_HISTORY" VARCHAR2(1 BYTE) DEFAULT 'N'  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_POSITION_MILESTONE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" (
"MILESTONE_REF_ID" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_START_POSITION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_START_POSITION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PROCESS_STATUS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PROCESS_STATUS";
CREATE TABLE "ORDERMGMT"."OM_PROCESS_STATUS" (
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"STATUS_CATEGORY_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"PROCESS_STATUS_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"CONSTRAINT_SEVERITY" NUMBER NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_PURGED_ORDERS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_PURGED_ORDERS";
CREATE TABLE "ORDERMGMT"."OM_PURGED_ORDERS" (
"MAX_ORDER_ID" NUMBER(18) NOT NULL ,
"MIN_ORDER_ID" NUMBER(18) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"USERNAME" VARCHAR2(254 CHAR) NOT NULL ,
"PURGE_DATE" TIMESTAMP(6)  NOT NULL ,
"OPERATION" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_REGION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_REGION";
CREATE TABLE "ORDERMGMT"."OM_REGION" (
"REGION_ID" NUMBER(9) NOT NULL ,
"REGION_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"REGION_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_REGION_HIERARCHY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_REGION_HIERARCHY";
CREATE TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" (
"REGION_ID" NUMBER(9) NOT NULL ,
"ANCESTOR_REGION_ID" NUMBER(9) NOT NULL ,
"DEPTH" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RELATED_ORDER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RELATED_ORDER";
CREATE TABLE "ORDERMGMT"."OM_RELATED_ORDER" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"PARENT_ORDER_ID" NUMBER(18) NOT NULL ,
"PARENT_HIST_ID" NUMBER(18) NOT NULL ,
"PARENT_TASK_MNEMONIC" VARCHAR2(254 CHAR) NULL ,
"PARENT_TASK_STATE_ID" NUMBER(9) NOT NULL ,
"PARENT_TASK_COMPLETION_STATUS" VARCHAR2(254 CHAR) NULL ,
"PARENT_CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RELATED_ORDER_TMP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP";
CREATE TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"RELATED_ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"FLAG" NUMBER(3) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RESPONSIBILITY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RESPONSIBILITY";
CREATE TABLE "ORDERMGMT"."OM_RESPONSIBILITY" (
"RESPONSIBILITY_ID" NUMBER(9) NOT NULL ,
"RESPONSIBILITY_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RULE_DEF
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RULE_DEF";
CREATE TABLE "ORDERMGMT"."OM_RULE_DEF" (
"RULE_ID" NUMBER(9) NOT NULL ,
"RULE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"RULE_COMMENT" VARCHAR2(4000 BYTE) NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'CHANGED'  NOT NULL ,
"MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RULE_SOURCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RULE_SOURCE";
CREATE TABLE "ORDERMGMT"."OM_RULE_SOURCE" (
"RULE_ID" NUMBER(9) NOT NULL ,
"RULE_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"RULE_SOURCE" VARCHAR2(4000 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_RULE_TASK
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_RULE_TASK";
CREATE TABLE "ORDERMGMT"."OM_RULE_TASK" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"RULE_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"EVALUATE" NUMBER(1) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SCHEDULE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SCHEDULE";
CREATE TABLE "ORDERMGMT"."OM_SCHEDULE" (
"SCHEDULE_ID" NUMBER(9) NOT NULL ,
"SCHEDULE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"SCHEDULE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SCHEDULE_DETAIL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL";
CREATE TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" (
"SCHEDULE_ID" NUMBER(9) NOT NULL ,
"SHIFT_START_SECONDS" NUMBER(9) NOT NULL ,
"SHIFT_STOP_SECONDS" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SCHEDULE_EXCEPTIONS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS";
CREATE TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"START_DATE" DATE NOT NULL ,
"STOP_DATE" DATE NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SEQUENCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SEQUENCE";
CREATE TABLE "ORDERMGMT"."OM_SEQUENCE" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"NAME" VARCHAR2(50 BYTE) NOT NULL ,
"MAX_SEQUENCE" NUMBER(18) NOT NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SEQUENCE_TABLE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SEQUENCE_TABLE";
CREATE TABLE "ORDERMGMT"."OM_SEQUENCE_TABLE" (
"SEQUENCE_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"TABLE_NAME" VARCHAR2(30 BYTE) NULL ,
"COLUMN_NAME" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SERVER_STRINGS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SERVER_STRINGS";
CREATE TABLE "ORDERMGMT"."OM_SERVER_STRINGS" (
"CLASS" VARCHAR2(255 BYTE) NOT NULL ,
"KEY" VARCHAR2(255 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SQL_LOG
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SQL_LOG";
CREATE TABLE "ORDERMGMT"."OM_SQL_LOG" (
"SID" NUMBER DEFAULT sys_context('USERENV', 'SID')  NOT NULL ,
"LINE" NUMBER NOT NULL ,
"NAME" VARCHAR2(30 BYTE) NOT NULL ,
"SQL_TEXT" VARCHAR2(255 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SQL_POINTER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SQL_POINTER";
CREATE TABLE "ORDERMGMT"."OM_SQL_POINTER" (
"SID" NUMBER DEFAULT sys_context('USERENV', 'SID')  NOT NULL ,
"LINE" NUMBER NOT NULL ,
"ERROR_CODE" NUMBER NULL ,
"ERROR_MESSAGE" VARCHAR2(4000 BYTE) NULL ,
"ERROR_DATE" DATE DEFAULT sysdate  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_STATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_STATE";
CREATE TABLE "ORDERMGMT"."OM_STATE" (
"STATE_ID" NUMBER(9) NOT NULL ,
"STATE_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"STATE_CATEGORY_ID" NUMBER(9) NOT NULL ,
"STATE_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"STATE_ICON_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_STATE_CATEGORY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_STATE_CATEGORY";
CREATE TABLE "ORDERMGMT"."OM_STATE_CATEGORY" (
"STATE_CATEGORY_ID" NUMBER(9) NOT NULL ,
"STATE_CATEGORY_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"STATE_CATEGORY_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_STATUS_CATEGORY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_STATUS_CATEGORY";
CREATE TABLE "ORDERMGMT"."OM_STATUS_CATEGORY" (
"STATUS_CATEGORY_ID" NUMBER(9) NOT NULL ,
"STATUS_CATEGORY_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SUBPROC_STATUS_MAP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP";
CREATE TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" (
"PROCESS_ID" NUMBER(9) NOT NULL ,
"PROCESS_POSITION_ID" NUMBER(9) NOT NULL ,
"PRIORITY" NUMBER(9) NOT NULL ,
"SUBPROCESS_ID" NUMBER(9) NOT NULL ,
"SUBPROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"TASK_STATUS_ID" NUMBER(9) NOT NULL ,
"TASK_TRANS_TYPE" CHAR(1 BYTE) NOT NULL ,
"TERMINATE_CHILDREN" VARCHAR2(50 BYTE) NOT NULL ,
"REPORTING_STATUS_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SUBPROCESS_START
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SUBPROCESS_START";
CREATE TABLE "ORDERMGMT"."OM_SUBPROCESS_START" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"PRIORITY" NUMBER(9) NOT NULL ,
"PROCESS_ID" NUMBER(9) NOT NULL ,
"RULE_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_SYSTEM_EVENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_SYSTEM_EVENT";
CREATE TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" (
"EVENT_SEQ_ID" NUMBER(9) NOT NULL ,
"EVENT_TYPE" VARCHAR2(20 BYTE) NULL ,
"ID1" NUMBER(18) NULL ,
"TYPE1" VARCHAR2(20 BYTE) NULL ,
"ID2" NUMBER(18) NULL ,
"TYPE2" VARCHAR2(20 BYTE) NULL ,
"EVENT_TIMESTAMP" DATE NOT NULL ,
"EVENT_TEXT" VARCHAR2(4000 BYTE) NOT NULL ,
"CLEARED" VARCHAR2(20 BYTE) DEFAULT 'N'  NOT NULL ,
"USERNAME" VARCHAR2(32 BYTE) NOT NULL ,
"TEXT1" VARCHAR2(254 BYTE) NULL ,
"TEXT2" VARCHAR2(254 BYTE) NULL ,
"TOTAL" NUMBER(6) DEFAULT 1  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK";
CREATE TABLE "ORDERMGMT"."OM_TASK" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"TASK_DESCRIPTION" VARCHAR2(254 CHAR) NULL ,
"TASK_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"TASK_STATUS" VARCHAR2(20 BYTE) DEFAULT 'VALID'  NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"CONTINUE_SUB_PROCESS" CHAR(1 BYTE) NULL ,
"SEQUENTIAL" VARCHAR2(1 BYTE) NULL ,
"SORT_TYPE" VARCHAR2(1 BYTE) NULL ,
"SORT_NODE_ID" NUMBER(9) NULL ,
"SORT_NODE_TYPE" VARCHAR2(1 BYTE) NULL ,
"PRIORITY_OFFSET" NUMBER(1) DEFAULT 0  NOT NULL ,
"ANNOTATION" CLOB NULL ,
"ROLLBACK_COMP_STRATEGY" VARCHAR2(1 BYTE) NULL ,
"REEVALUATE_COMP_STRATEGY" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_BEHAVIOR
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR";
CREATE TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" (
"BEHAVIOR_ID" NUMBER(9) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_COORD_NODE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_COORD_NODE";
CREATE TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"SEQUENTIAL" VARCHAR2(1 BYTE) NULL ,
"SORT_TYPE" VARCHAR2(1 BYTE) NULL ,
"SORT_NODE_ID" NUMBER(9) NULL ,
"SORT_NODE_TYPE" VARCHAR2(1 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_FALLOUT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_FALLOUT";
CREATE TABLE "ORDERMGMT"."OM_TASK_FALLOUT" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"FALLOUT_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_FALLOUT_GROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP";
CREATE TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"FALLOUT_GROUP_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_NOTIFICATION
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION";
CREATE TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"EXECUTION_MODE" VARCHAR2(1 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_ORDER_VIEW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW";
CREATE TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_STATE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_STATE";
CREATE TABLE "ORDERMGMT"."OM_TASK_STATE" (
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"STATE_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_STATUS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_STATUS";
CREATE TABLE "ORDERMGMT"."OM_TASK_STATUS" (
"PROCESS_STATUS_ID" NUMBER(9) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"DISPLAY_ORDER" NUMBER(9) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_TASK_WORKGROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_TASK_WORKGROUP";
CREATE TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"AUTHORITY" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"EXECUTION_MODES" NUMBER(9) DEFAULT 7  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_UNDO_BRANCH_ROOT
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT";
CREATE TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" (
"ORDER_SEQ_ID" NUMBER(18) NOT NULL ,
"ORDER_AMENDMENT_SEQ_ID" NUMBER(18) NOT NULL ,
"HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"BRANCH_ROOT_HIST_SEQ_ID" NUMBER(18) NOT NULL ,
"WILL_ROLL_FORWARD" CHAR(1 BYTE) NOT NULL ,
"DEAD_PATH_ROOT_IN_BRANCH" CHAR(1 BYTE) NULL ,
"ROLLED_FORWARD_BY" NUMBER(18) NULL 
)
ENABLE ROW MOVEMENT
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_ATTRIBUTES
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES";
CREATE TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"ATTR_MNEMONIC_CLASS" VARCHAR2(254 CHAR) NOT NULL ,
"ATTR_MNEMONIC_ID" NUMBER(9) NOT NULL ,
"VALUE" VARCHAR2(4000 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_GENERIC_PREFERENCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE";
CREATE TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"PREFERENCE_USAGE" VARCHAR2(50 BYTE) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_HEADER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_HEADER";
CREATE TABLE "ORDERMGMT"."OM_USER_HEADER" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"POSITION" NUMBER(9) NOT NULL ,
"MNEMONIC_PATH" VARCHAR2(1000 CHAR) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_MULTIQUERY_PREFERENCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE";
CREATE TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_NOTIFY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_NOTIFY";
CREATE TABLE "ORDERMGMT"."OM_USER_NOTIFY" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_ORD_LIST_COLUMN
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN";
CREATE TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"ID" NUMBER(9) NOT NULL ,
"POSITION" NUMBER(9) NOT NULL ,
"MNEMONIC_PATH" VARCHAR2(1000 CHAR) NOT NULL ,
"SORT_POSITION" NUMBER(9) NULL ,
"SORT_TYPE" VARCHAR2(4 BYTE) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_PREF_ATTRIBUTE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE";
CREATE TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"PREFERENCE_CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"PREFERENCE_ID" NUMBER(9) NOT NULL ,
"PREFERENCE_USAGE" VARCHAR2(50 BYTE) NOT NULL ,
"ATTR_MNEMONIC_CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"ATTR_MNEMONIC_ID" NUMBER(9) NOT NULL ,
"USAGE" VARCHAR2(50 BYTE) NOT NULL ,
"SAVED_PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_PREFERENCES
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_PREFERENCES";
CREATE TABLE "ORDERMGMT"."OM_USER_PREFERENCES" (
"PREFERENCE_ID" NUMBER(6) NOT NULL ,
"PREFERENCE_NAME" VARCHAR2(50 CHAR) NOT NULL ,
"SCOPE" VARCHAR2(16 BYTE) NOT NULL ,
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"DEFAULT_PREF" VARCHAR2(1 BYTE) DEFAULT 'N'  NOT NULL ,
"ACTION" VARCHAR2(1 BYTE) DEFAULT 'N'  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_QUERY_FILTERS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS";
CREATE TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"ATTR_MNEMONIC_CLASS" VARCHAR2(50 BYTE) NOT NULL ,
"ATTR_MNEMONIC_ID" NUMBER(9) NOT NULL ,
"VALUE" VARCHAR2(4000 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL ,
"POSITION" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_TASK_PREFERENCE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE";
CREATE TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"TASK_ID" NUMBER(9) NOT NULL ,
"TASK_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL ,
"PREFERENCE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USER_WORKGROUP
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USER_WORKGROUP";
CREATE TABLE "ORDERMGMT"."OM_USER_WORKGROUP" (
"USERNAME" VARCHAR2(32 CHAR) NOT NULL ,
"WORKGROUP_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_USERS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_USERS";
CREATE TABLE "ORDERMGMT"."OM_USERS" (
"USER_NAME" VARCHAR2(100 CHAR) NOT NULL ,
"USER_ROLE" VARCHAR2(30 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_VIEW_INSIGNIFICANT_SEL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL";
CREATE TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" (
"ORDER_NODE_ID" NUMBER(9) NOT NULL ,
"ORDER_NODE_TYPE" VARCHAR2(20 BYTE) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"SELECTOR_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_VIEW_ORDER_NODE_LABEL
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL";
CREATE TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" (
"LABEL_ID" NUMBER(9) NOT NULL ,
"LABEL" VARCHAR2(50 BYTE) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WGSET_WORKGROUPS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS";
CREATE TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" (
"WORKGROUP_SET_ID" NUMBER(9) NOT NULL ,
"WORKGROUP_ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUP_FILTER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"TEXT" CLOB NOT NULL ,
"SOURCE" CLOB NULL ,
"STATUS" VARCHAR2(20 BYTE) DEFAULT 'CHANGED'  NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUP_HEADER
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"POSITION" NUMBER(9) NOT NULL ,
"PATH_ID" NUMBER(9) NULL ,
"NODE_ID" NUMBER(9) NULL ,
"HEADER" VARCHAR2(50 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUP_NOTIFY
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" (
"NOTIFICATION_ID" NUMBER(9) NOT NULL ,
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUP_ORDER_VIEW
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"ORDER_TYPE_ID" NUMBER(9) NOT NULL ,
"ORDER_SOURCE_ID" NUMBER(9) NOT NULL ,
"ORDER_VIEW_SEQ_ID" NUMBER(9) NOT NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUP_SET
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUP_SET";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUP_SET" (
"STATE_POLICY_ID" NUMBER(9) NOT NULL ,
"ID" NUMBER(9) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_WORKGROUPS
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_WORKGROUPS";
CREATE TABLE "ORDERMGMT"."OM_WORKGROUPS" (
"WORKGROUP_ID" NUMBER(9) NOT NULL ,
"SCHEDULE_ID" NUMBER(9) NOT NULL ,
"WORKGROUP_MNEMONIC" VARCHAR2(254 CHAR) NOT NULL ,
"WORKGROUP_DESCRIPTION" VARCHAR2(254 CHAR) NOT NULL ,
"REGION_ID" NUMBER(9) NOT NULL ,
"STD_OFFSET_SECONDS" NUMBER(9) NOT NULL ,
"DST_OFFSET_SECONDS" NUMBER(9) NOT NULL ,
"DST_START_MONTH" NUMBER(9) NOT NULL ,
"DST_START_WEEK" NUMBER(9) NOT NULL ,
"DST_START_DAY" NUMBER(9) NOT NULL ,
"DST_STOP_MONTH" NUMBER(9) NOT NULL ,
"DST_STOP_WEEK" NUMBER(9) NOT NULL ,
"DST_STOP_DAY" NUMBER(9) NOT NULL ,
"DST_START_HOUR" NUMBER(9) NOT NULL ,
"DST_START_MINUTE" NUMBER(9) NOT NULL ,
"DST_START_SECOND" NUMBER(9) NOT NULL ,
"DST_STOP_HOUR" NUMBER(9) NOT NULL ,
"DST_STOP_MINUTE" NUMBER(9) NOT NULL ,
"DST_STOP_SECOND" NUMBER(9) NOT NULL ,
"LAST_CAL_START" DATE NOT NULL ,
"LAST_CAL_STOP" DATE NOT NULL ,
"LAST_CAL_RUN_START" DATE NOT NULL ,
"ANNOTATION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_XCHG_TABLE
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_XCHG_TABLE";
CREATE TABLE "ORDERMGMT"."OM_XCHG_TABLE" (
"TABLE_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"XCHG_TABLE_ID" NUMBER(3) NOT NULL ,
"PARTITIONING_TYPE" VARCHAR2(9 BYTE) NOT NULL ,
"PK_INDEX_NAME" VARCHAR2(30 BYTE) NOT NULL ,
"HAS_VIRTUAL_COLUMNS" VARCHAR2(1 BYTE) NOT NULL ,
"HAS_GLOBAL_INDEXES" VARCHAR2(1 BYTE) NOT NULL ,
"GLOBAL_INDEXES_SUPP_PK_UK" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OM_XML_SCHEMA
-- ----------------------------
DROP TABLE "ORDERMGMT"."OM_XML_SCHEMA";
CREATE TABLE "ORDERMGMT"."OM_XML_SCHEMA" (
"DATA_DICTIONARY_ID" NUMBER(9) NOT NULL ,
"SCHEMA" CLOB NOT NULL ,
"SCHEMA_FILE_NAME" VARCHAR2(254 CHAR) NULL ,
"SCHEMA_URI" VARCHAR2(254 CHAR) NULL ,
"CARTRIDGE_ID" NUMBER(6) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for P6_SYNC_REQUEST
-- ----------------------------
DROP TABLE "ORDERMGMT"."P6_SYNC_REQUEST";
CREATE TABLE "ORDERMGMT"."P6_SYNC_REQUEST" (
"P6_ORDER_ID" VARCHAR2(100 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(100 BYTE) NULL ,
"CRM_ORDER_VERSION" VARCHAR2(20 BYTE) NULL ,
"LINE_ITEM_ID" VARCHAR2(100 BYTE) NULL ,
"PROCESS_TYPE" VARCHAR2(30 BYTE) NULL ,
"SYNC_EVENT_ID" VARCHAR2(100 BYTE) NULL ,
"SYNC_PROCESS_TYPE" VARCHAR2(30 BYTE) NULL ,
"REQUEST_SYNCHRONIZED" NUMBER NULL ,
"P6_ORDER_HIST_ID" VARCHAR2(100 BYTE) NULL ,
"EVENT_ID" VARCHAR2(100 BYTE) NULL ,
"SYNC_APP" VARCHAR2(100 BYTE) NULL ,
"SYNC_LINE_ITEM_ID" VARCHAR2(100 BYTE) NULL ,
"STATE" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for P6_TASK_EVENT
-- ----------------------------
DROP TABLE "ORDERMGMT"."P6_TASK_EVENT";
CREATE TABLE "ORDERMGMT"."P6_TASK_EVENT" (
"EVENT_ID" VARCHAR2(100 BYTE) NULL ,
"CRM_ORDER_ID" VARCHAR2(100 BYTE) NULL ,
"CRM_ORDER_VERSION" VARCHAR2(20 BYTE) NULL ,
"P6_ORDER_ID" VARCHAR2(100 BYTE) NULL ,
"PROCESS_TYPE" VARCHAR2(100 BYTE) NULL ,
"CREATED_DATE" DATE NULL ,
"SYNC_APP" VARCHAR2(100 BYTE) NULL ,
"LINE_ITEM_ID" VARCHAR2(100 BYTE) NULL ,
"STATE" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SUB_CONFIG_INFO
-- ----------------------------
DROP TABLE "ORDERMGMT"."SUB_CONFIG_INFO";
CREATE TABLE "ORDERMGMT"."SUB_CONFIG_INFO" (
"INNER_PACKAGE_SERIAL" VARCHAR2(50 BYTE) NOT NULL ,
"WORK_PLATFORM" VARCHAR2(50 BYTE) NOT NULL ,
"WORK_PLATFORM_ID" VARCHAR2(50 BYTE) NOT NULL ,
"WORK_PLATFORM_MNEMONIC" VARCHAR2(200 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_CACL_OM_ORDER_FLOW
-- ----------------------------
DROP TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW";
CREATE TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW" (
"NAMESPACE_MNEMONIC" VARCHAR2(20 BYTE) NULL ,
"VERSION" VARCHAR2(10 BYTE) NULL ,
"ORDER_SEQ_ID" NUMBER(20) NULL ,
"REFERENCE_NUMBER" VARCHAR2(40 BYTE) NULL ,
"ORD_START_DATE" DATE NULL ,
"PROCESS_ID_DESCRIPTION" VARCHAR2(100 BYTE) NULL ,
"TASK_DESCRIPTION" VARCHAR2(100 BYTE) NULL ,
"DEVICE_VALUE" VARCHAR2(100 BYTE) NULL ,
"ACTION_CODE" VARCHAR2(100 BYTE) NULL ,
"SUB_ACTION_CODE" VARCHAR2(100 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"BUREAU" VARCHAR2(100 BYTE) NULL ,
"SUB_BUREAU" VARCHAR2(100 BYTE) NULL ,
"DATE_POS_STARTED" DATE NULL ,
"ORD_STATE_ID" NUMBER(5) NULL ,
"CRM_PRODUCT_NAME" VARCHAR2(100 BYTE) NULL ,
"ID" NUMBER(20) NULL ,
"P6_ORDER_CLASSFICATION" VARCHAR2(100 BYTE) NULL ,
"CRM_CREATE_DATE" DATE NULL ,
"ACCOUNT_TYPE" VARCHAR2(200 BYTE) NULL ,
"PROCESS_ID" NUMBER(9) NULL ,
"TASK_ID" NUMBER(9) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."NAMESPACE_MNEMONIC" IS '业务类型（ADS，POTS，LAN）';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."ORDER_SEQ_ID" IS 'P6定单号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."REFERENCE_NUMBER" IS 'CRM订单号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."ORD_START_DATE" IS '定单启动时间';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."PROCESS_ID_DESCRIPTION" IS '流程描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."TASK_DESCRIPTION" IS '当前任务';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."DEVICE_VALUE" IS '设备号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."ACTION_CODE" IS '操作类型代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."SUB_ACTION_CODE" IS '操作子类型代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."BUREAU_CODE" IS '区局代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."SUB_BUREAU_CODE" IS '分局代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."BUREAU" IS '区局描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."SUB_BUREAU" IS '分局描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."DATE_POS_STARTED" IS '任务启动时间';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."ORD_STATE_ID" IS 'P6定单状态';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."CRM_PRODUCT_NAME" IS 'CRM产品代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."ID" IS '是否出外线标志    0: 没有出外线 ,1 外线工单 2局内工单外线施工中,3 外线施工完成。';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW"."P6_ORDER_CLASSFICATION" IS 'P6订单分类（资源、发工单、待缴款待预约、退单、其他）';

-- ----------------------------
-- Table structure for T_CACL_OM_ORDER_FLOW_OUT
-- ----------------------------
DROP TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT";
CREATE TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" (
"NAMESPACE_MNEMONIC" VARCHAR2(20 BYTE) NULL ,
"VERSION" VARCHAR2(20 BYTE) NULL ,
"ORDER_SEQ_ID" NUMBER(20) NULL ,
"REFERENCE_NUMBER" VARCHAR2(40 BYTE) NULL ,
"ORD_START_DATE" DATE NULL ,
"PROCESS_ID_DESCRIPTION" VARCHAR2(100 BYTE) NULL ,
"TASK_DESCRIPTION" VARCHAR2(100 BYTE) NULL ,
"DEVICE_VALUE" VARCHAR2(100 BYTE) NULL ,
"ACTION_CODE" VARCHAR2(100 BYTE) NULL ,
"SUB_ACTION_CODE" VARCHAR2(100 BYTE) NULL ,
"BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"SUB_BUREAU_CODE" VARCHAR2(100 BYTE) NULL ,
"BUREAU" VARCHAR2(100 BYTE) NULL ,
"SUB_BUREAU" VARCHAR2(100 BYTE) NULL ,
"DATE_POS_STARTED" DATE NULL ,
"ORD_STATE_ID" NUMBER(5) NULL ,
"CRM_PRODUCT_NAME" VARCHAR2(100 BYTE) NULL ,
"ID" NUMBER(20) NULL ,
"OUT_TYPE" CHAR(15 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."NAMESPACE_MNEMONIC" IS '业务类型（ADS，POTS，LAN）';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."ORDER_SEQ_ID" IS 'P6定单号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."REFERENCE_NUMBER" IS 'CRM订单号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."ORD_START_DATE" IS '定单启动时间';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."PROCESS_ID_DESCRIPTION" IS '流程描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."TASK_DESCRIPTION" IS '当前任务';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."DEVICE_VALUE" IS '设备号';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."ACTION_CODE" IS '操作类型代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."SUB_ACTION_CODE" IS '操作子类型代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."BUREAU_CODE" IS '区局代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."SUB_BUREAU_CODE" IS '分局代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."BUREAU" IS '区局描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."SUB_BUREAU" IS '分局描述';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."DATE_POS_STARTED" IS '任务启动时间';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."ORD_STATE_ID" IS 'P6定单状态';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."CRM_PRODUCT_NAME" IS 'CRM产品代码';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."ID" IS '是否出外线标志    0: 没有出外线 ,1 外线工单 2局内工单外线施工中,3 外线施工完成。';
COMMENT ON COLUMN "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT"."OUT_TYPE" IS '工单类型';

-- ----------------------------
-- Table structure for T_CACL_OM_ORDER_FLOW_TIME_LOG
-- ----------------------------
DROP TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_TIME_LOG";
CREATE TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_TIME_LOG" (
"ANA_START_SEQID" VARCHAR2(20 BYTE) NOT NULL ,
"START_TIMESTAMP" DATE NULL ,
"END_TIMESTAMP" DATE NULL ,
"ANA_SUM" NUMBER(18) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_CACL_WOP_WPSRQ
-- ----------------------------
DROP TABLE "ORDERMGMT"."T_CACL_WOP_WPSRQ";
CREATE TABLE "ORDERMGMT"."T_CACL_WOP_WPSRQ" (
"P6_ORDER_ID" VARCHAR2(50 BYTE) NOT NULL ,
"PLANE_TYPE" VARCHAR2(10 BYTE) NULL ,
"STATUS" NUMBER NOT NULL ,
"PROCESS_FLAG" VARCHAR2(3 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TEMP_DICTIONARY
-- ----------------------------
DROP TABLE "ORDERMGMT"."TEMP_DICTIONARY";
CREATE TABLE "ORDERMGMT"."TEMP_DICTIONARY" (
"AA" VARCHAR2(200 BYTE) NULL ,
"BB" VARCHAR2(200 BYTE) NULL ,
"CC" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WL_LLR_ADMINSERVER
-- ----------------------------
DROP TABLE "ORDERMGMT"."WL_LLR_ADMINSERVER";
CREATE TABLE "ORDERMGMT"."WL_LLR_ADMINSERVER" (
"XIDSTR" VARCHAR2(40 BYTE) NOT NULL ,
"POOLNAMESTR" VARCHAR2(64 BYTE) NULL ,
"RECORDSTR" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ZZ_ROAD_EXPLORING
-- ----------------------------
DROP TABLE "ORDERMGMT"."ZZ_ROAD_EXPLORING";
CREATE TABLE "ORDERMGMT"."ZZ_ROAD_EXPLORING" (
"ROAD_CODE" VARCHAR2(50 CHAR) NOT NULL ,
"ROAD_DESC" VARCHAR2(255 CHAR) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "ORDERMGMT"."ZZ_ROAD_EXPLORING" IS '�������';

-- ----------------------------
-- View structure for OI
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OI" AS 
select order_seq_id, order_node_id, node_value_text, node_value_num, node_value_clob, node_value_blob, complex_type_root_node_id
from om_order_instance;

-- ----------------------------
-- View structure for OI_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OI_NOLOB" AS 
select OID
,ORDER_NODE_ID
,NODE_VALUE_TEXT
,NODE_VALUE_NUM
,COMPLEX_TYPE_ROOT_NODE_ID from OI;

-- ----------------------------
-- View structure for OM_$INSTALL$PLAN_ACTIONS_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS_NOLOB" AS 
select PLAN_ID
,SEQ_ID
,SCHEMA_NAME
,OBJECT_TYPE
,OBJECT_NAME
,DB_OBJECT_NAME
,FROM_VERSION
,VERSION
,ACTION_NAME
,SUBTYPE
,SUBACTION
,STATUS
,START_TS
,END_TS from OM_$INSTALL$PLAN_ACTIONS;

-- ----------------------------
-- View structure for OM_ATTACHMENT_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ATTACHMENT_NOLOB" AS 
select ORDER_SEQ_ID
,HIST_SEQ_ID
,ATTACHMENT_ID
,ORDER_FLOW_REMARK_ID
,ATTACH_FILE_NAME
,CARTRIDGE_ID from OM_ATTACHMENT;

-- ----------------------------
-- View structure for OM_AUDIT_PURGE_ALL
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_AUDIT_PURGE_ALL" AS 
select purge_seq_id,
operation_name,
status,
start_date,
purge_duration_minutes,
----------------------------------------------------------------------------------------------------
-- Column est_or_actual_end_date                                                                  --
--                                                                                                --
-- Calculation: sysdate +((selected_order_count - selected_order_purged_count) / avg_purge_rate)  --
----------------------------------------------------------------------------------------------------
decode(status, 'STARTED', null, nvl(end_date, sysdate +((selected_order_count - selected_order_purged_count) /(nullif(selected_order_purged_count, 0) /
nullif(purge_duration_minutes,0)) / 60 / 24))) as est_or_actual_end_date,
om_$audit_purge_pkg.get_param_value_date(purge_seq_id, 'a_stop_date', 'U') as purge_window_end_date,
stopped_date,
resumed_date,
selected_order_count,
selected_order_purged_count,
decode(selected_order_count, 0, 100, round(selected_order_purged_count / selected_order_count * 100, 2)) as percent_complete,
round(selected_order_purged_count / nullif(purge_duration_minutes, 0)) as orders_purged_per_minute,
---------------------------------------------------------------------------------
-- Column orders_injected_per_minute                                                       --
--                                                                             --
-- Calculation: injection_rate = injected_order_count / purge_duration_minutes --
---------------------------------------------------------------------------------
round(
case
when status in('RUNNING', 'STARTED')
then injected_order_count +
(select count( *)
from om_order_header
where ord_creation_date between nvl(resumed_date, start_date) and sysdate
)
else injected_order_count
end / nullif(purge_duration_minutes, 0), 0) as orders_injected_per_minute,
nvl(om_$audit_purge_pkg.get_param_value(purge_seq_id, 'a_parallelism', 'U'), om_$audit_purge_pkg.get_param_value(purge_seq_id,
'degree_of_parallelism', 'C', '4')) as parallelism,
error_message
from
(select a.*,
(select count( *)
from om_audit_purge_order
where purge_seq_id = a.purge_seq_id
and cascaded_delete is null
) as selected_order_purged_count,
round(
case
when status in('STARTED', 'RUNNING')
then purge_duration_sec + round(to_number(sysdate - nvl(resumed_date, start_date)) * 1440)
else purge_duration_sec / 60
end, 2) as purge_duration_minutes
from om_audit_purge a
order by purge_seq_id desc
);

-- ----------------------------
-- View structure for OM_AUDIT_PURGE_LATEST
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_AUDIT_PURGE_LATEST" AS 
select purge_seq_id,
operation_name,
status,
start_date,
purge_duration_minutes,
----------------------------------------------------------------------------------------------------
-- Column est_or_actual_end_date                                                                  --
--                                                                                                --
-- Calculation: sysdate +((selected_order_count - selected_order_purged_count) / avg_purge_rate)  --
----------------------------------------------------------------------------------------------------
decode(status, 'STARTED', null, nvl(end_date, sysdate +((selected_order_count - selected_order_purged_count) /(nullif(selected_order_purged_count, 0) / nullif(
purge_duration_minutes, 0)) / 60 / 24))) as est_or_actual_end_date,
om_$audit_purge_pkg.get_param_value_date(purge_seq_id, 'a_stop_date', 'U') as purge_window_end_date,
stopped_date,
resumed_date,
selected_order_count,
selected_order_purged_count,
-----------------------------------------------------------------------
-- Column percent_complete                                           --
--                                                                   --
-- Calculation: selected_order_purged_count  / selected_order_count  --
-----------------------------------------------------------------------
decode(selected_order_count, 0, 100, round(selected_order_purged_count / selected_order_count * 100, 2)) as percent_complete,
round(selected_order_purged_count / nullif(purge_duration_minutes, 0)) as orders_purged_per_minute,
---------------------------------------------------------------------------------
-- Column orders_injected_per_minute                                                       --
--                                                                             --
-- Calculation: injection_rate = injected_order_count / purge_duration_minutes --
---------------------------------------------------------------------------------
round(
case
when status in('RUNNING', 'STARTED')
then injected_order_count +
(select count( *)
from om_order_header
where ord_creation_date between nvl(resumed_date, start_date) and sysdate
)
else injected_order_count
end / nullif(purge_duration_minutes, 0), 0) as orders_injected_per_minute,
------------------------
-- Column parallelism --
------------------------
nvl(om_$audit_purge_pkg.get_param_value(purge_seq_id, 'a_parallelism', 'U'), om_$audit_purge_pkg.get_param_value(purge_seq_id,
'degree_of_parallelism', 'C', '4')) as parallelism,
error_message
from
(select a.*,
(select count( *)
from om_audit_purge_order
where purge_seq_id = b.latest_purge_seq_id
and cascaded_delete is null
) as selected_order_purged_count,
round(
case
when status in('STARTED', 'RUNNING')
then purge_duration_sec + round(to_number(sysdate - nvl(resumed_date, start_date)) * 1440)
else purge_duration_sec / 60
end, 2) as purge_duration_minutes
from
(select max(purge_seq_id) as latest_purge_seq_id from om_audit_purge
) b,
om_audit_purge a
where a.purge_seq_id = b.latest_purge_seq_id
);

-- ----------------------------
-- View structure for OM_CARTRIDGE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_CARTRIDGE_NOLOB" AS 
select CARTRIDGE_ID
,STATUS
,NAMESPACE_MNEMONIC
,NAMESPACE_DESCRIPTION
,VERSION
,RECYCLE_BIN_ID
,TIMESTAMP
,DEFAULT_VERSION
,LAST_UPDATE
,BUILD_ID
,CARTRIDGE_TYPE
,CHECKSUM from OM_CARTRIDGE;

-- ----------------------------
-- View structure for OM_EXT_SYSTEM_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_EXT_SYSTEM_NOLOB" AS 
select ID
,NAME
,ENTITY_TYPE from OM_EXT_SYSTEM;

-- ----------------------------
-- View structure for OM_FALLOUT_GROUP_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_FALLOUT_GROUP_NOLOB" AS 
select ID
,MNEMONIC
,CARTRIDGE_ID from OM_FALLOUT_GROUP;

-- ----------------------------
-- View structure for OM_FALLOUT_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_FALLOUT_NOLOB" AS 
select ID
,MNEMONIC
,CARTRIDGE_ID from OM_FALLOUT;

-- ----------------------------
-- View structure for OM_HIST$FALLOUT_NODE_INS_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INS_NOLOB" AS 
select ORDER_SEQ_ID
,COMPENSATION_ID
,ORDER_NODE_INDEX
,HIST_SEQ_ID
,NODE_VALUE_NUM
,NODE_VALUE_TEXT from OM_HIST$FALLOUT_NODE_INSTANCE;

-- ----------------------------
-- View structure for OM_HIST$MODEL_CLOB_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_HIST$MODEL_CLOB_NOLOB" AS 
select CARTRIDGE_ID
,NAME
,ENTITY_VERSION
,ID
,ENTITY_TYPE from OM_HIST$MODEL_CLOB;

-- ----------------------------
-- View structure for OM_HIST$ORDER_INSTANCE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_HIST$ORDER_INSTANCE_NOLOB" AS 
select ORDER_SEQ_ID
,ORDER_NODE_INDEX
,H$INST_SEQ_ID
,ORDER_NODE_TYPE
,ORDER_NODE_ID
,DATA_DICTIONARY_ID
,ORDER_TYPE_ID
,ORDER_SOURCE_ID
,DML_ACTION
,H$INST_SEQ_ID_FROM
,PARENT_NODE_INDEX
,NODE_VALUE_NUM
,NODE_VALUE_TEXT
,REFERENCED_NODE_INDEX
,H$INST_TIMESTAMP
,USERNAME
,HIST_SEQ_ID
,CONTEXT_TYPE
,CONTEXT_MNEMONIC
,CARTRIDGE_ID
,ORDER_NODE_ID_TO
,IS_SECRET
,ROLLBACK
,CONTEXT_ID
,COMPLEX_TYPE_ROOT_NODE_ID from OM_HIST$ORDER_INSTANCE;

-- ----------------------------
-- View structure for OM_HIST$ORDER_STATE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_HIST$ORDER_STATE_NOLOB" AS 
select ORDER_SEQ_ID
,HIST_STATE_SEQ_ID
,STATE_ID
,ORD_TXN_START_DATE
,ORD_TXN_COMPLETION_DATE
,ORD_TXN_AUTHOR from OM_HIST$ORDER_STATE;

-- ----------------------------
-- View structure for OM_MODEL_CLOB_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_MODEL_CLOB_NOLOB" AS 
select CARTRIDGE_ID
,NAME
,ID
,ENTITY_TYPE
,RESOURCE_BLOB_LOCATION
,RESOURCE_BLOB_CHECKSUM from OM_MODEL_CLOB;

-- ----------------------------
-- View structure for OM_NODE_BY_PIVOT_ANCESTOR
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_NODE_BY_PIVOT_ANCESTOR" AS 
select /*+ ORDERED index(oi XIE1OM_ORDER_INSTANCE) */
oi.order_node_id,
oi.order_node_type,
oi.order_node_index,
oi.parent_node_index,
oi.node_value_num,
oi.node_value_text
from
(select parent_node_id from om_order_hier
where
order_node_id      = to_number(sys_context('ordermgmt','ORDER_NODE_ID')) ) h,
om_order_node_ancestry a,
om_order_instance     oi
where
a.order_seq_id           = to_number(sys_context('ordermgmt','ORDER_SEQ_ID'))
and a.order_node_id          = h.parent_node_id
and a.ancestor_node_index    = to_number(sys_context('ordermgmt','ORDER_NODE_INDEX'))
and oi.order_seq_id          = a.order_seq_id
and oi.parent_node_index     = a.ORDER_NODE_INDEX
and oi.order_node_id         = to_number(sys_context('ordermgmt','ORDER_NODE_ID'))
and oi.order_node_type       = sys_context('ordermgmt','ORDER_NODE_TYPE');

-- ----------------------------
-- View structure for OM_NODE_BY_PIVOT_ANCESTOR_HQ
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_NODE_BY_PIVOT_ANCESTOR_HQ" AS 
select /*+ ORDERED index(oi XIE1OM_ORDER_INSTANCE) */
order_node_id,
order_node_type,
order_node_index,
parent_node_index,
node_value_num,
node_value_text
from om_order_instance
--filter descendent by given order node criteria
where  order_node_id  = to_number(sys_context('ordermgmt','ORDER_NODE_ID'))
and order_node_type = sys_context('ordermgmt','ORDER_NODE_TYPE')
-- find descendents of the given pivot node
start with order_seq_id = to_number(sys_context('ordermgmt','ORDER_SEQ_ID'))
and  order_node_index = to_number(sys_context('ordermgmt','ORDER_NODE_INDEX'))
connect by prior order_seq_id  = order_seq_id
and prior order_node_index = parent_node_index;

-- ----------------------------
-- View structure for OM_NODE_BY_PIVOT_SELF
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_NODE_BY_PIVOT_SELF" AS 
select
order_node_id,
order_node_type,
order_node_index,
parent_node_index,
node_value_num,
node_value_text
from
om_order_instance
where
order_seq_id           = to_number(sys_context('ordermgmt','ORDER_SEQ_ID'))
and order_node_index       = to_number(sys_context('ordermgmt','ORDER_NODE_INDEX'))
and order_node_id          = to_number(sys_context('ordermgmt','ORDER_NODE_ID'))
and order_node_type        = sys_context('ordermgmt','ORDER_NODE_TYPE');

-- ----------------------------
-- View structure for OM_NOTIFICATION_DEF_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_NOTIFICATION_DEF_NOLOB" AS 
select NOTIFICATION_ID
,NOTIFICATION_MNEMONIC
,NOTIFICATION_DESCRIPTION
,RULE_ID
,PRIORITY
,INTERVAL
,AUTHOR
,LAST_START
,LAST_FINISH
,NEXT_START
,STATUS
,LOOP_TEXT
,LOOP_SOURCE
,TYPE
,DISPATCH_TYPE
,POOLER_ID
,E_MAIL
,CARTRIDGE_ID
,ORDER_VIEW_SEQ_ID from OM_NOTIFICATION_DEF;

-- ----------------------------
-- View structure for OM_ORCH_PLAN_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORCH_PLAN_NOLOB" AS 
select ORDER_SEQ_ID
,ORCH_PLAN_HIST_ID
,ORCH_PLAN_NODE_INDEX
,ORCH_PLAN_CONTEXT
,SPEC_NAME
,SPEC_NAMESPACE
,MODE_NAME
,MODE_NAMESPACE
,START_DATE from OM_ORCH_PLAN;

-- ----------------------------
-- View structure for OM_ORDER_DATA_DICTIONARY_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY_NOLOB" AS 
select DATA_DICTIONARY_ID
,DATA_DICTIONARY_MNEMONIC
,ATTRIBUTE_TYPE
,BUSINESS_NAME
,ATTRIBUTE_LENGTH
,ATTRIBUTE_ENCRYPTED
,ATTRIBUTE_MASK
,CARTRIDGE_ID
,SIGNIFICANT
,NAMESPACE
,COMPLEX_TYPE_NAME
,ELEMENT_CONTEXT
,IS_COMPLEX_TYPE_CHILD_ELEM from OM_ORDER_DATA_DICTIONARY;

-- ----------------------------
-- View structure for OM_ORDER_HEADER_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_HEADER_NOLOB" AS 
select ORDER_SEQ_ID
,PROCESS_STATUS_ID
,PROCESS_ID
,ORDER_TYPE_ID
,ORDER_SOURCE_ID
,REFERENCE_NUMBER
,FILE_NAME
,ORD_CREATION_DATE
,ORD_START_DATE
,EXPECTED_START_DATE
,ORD_COMPLETION_DATE
,ORD_COMPL_DATE_EXPECTED
,REQUESTED_DELIVERY_DATE
,EXPECTED_DURATION
,NUM_REMARKS
,CARTRIDGE_ID
,PRIORITY
,DB_INSTANCE
,ORD_STATE_ID
,ORD_TARGET_STATE_ID
,ORD_TXN_START_DATE
,ORD_TXN_COMPLETION_DATE
,ORD_TXN_GRACE_INTERVAL
,ORD_TXN_AUTHOR
,ORD_TXN_REASON
,VERSION
,CREATION_VIEW_ID from OM_ORDER_HEADER;

-- ----------------------------
-- View structure for OM_ORDER_HIER_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_HIER_NOLOB" AS 
select ORDER_NODE_ID
,ORDER_NODE_TYPE
,DATA_DICTIONARY_ID
,PARENT_NODE_ID
,PARENT_NODE_TYPE
,REFERENCED_NODE_ID
,REFERENCED_NODE_TYPE
,POSITION
,CARTRIDGE_ID
,SIGNIFICANT from OM_ORDER_HIER;

-- ----------------------------
-- View structure for OM_ORDER_INSTANCE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_INSTANCE_NOLOB" AS 
select ORDER_SEQ_ID
,ORDER_NODE_INDEX
,ORDER_NODE_ID
,ORDER_NODE_TYPE
,DATA_DICTIONARY_ID
,ORDER_TYPE_ID
,ORDER_SOURCE_ID
,DML_ACTION
,NODE_VALUE_NUM
,NODE_VALUE_TEXT
,NODE_VALUE_TEXT_UPPER
,PARENT_NODE_INDEX
,PARENT_NODE_ID
,PARENT_NODE_TYPE
,H$INST_SEQ_ID
,USERNAME
,HIST_SEQ_ID
,CONTEXT_TYPE
,CONTEXT_MNEMONIC
,H$INST_TIMESTAMP
,CARTRIDGE_ID
,IS_SECRET
,ROLLBACK
,CONTEXT_ID
,COMPLEX_TYPE_ROOT_NODE_ID
,SEARCHABLE from OM_ORDER_INSTANCE;

-- ----------------------------
-- View structure for OM_ORDER_SOURCE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_SOURCE_NOLOB" AS 
select ORDER_SOURCE_ID
,ORDER_SOURCE_MNEMONIC
,ORDER_IMPORT_DIRECTORY
,ORDER_SOURCE_DESCRIPTION
,ORDER_EXPORT_DIRECTORY
,ORDER_SOURCE_ICON_ID
,CARTRIDGE_ID from OM_ORDER_SOURCE;

-- ----------------------------
-- View structure for OM_ORDER_TYPE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_TYPE_NOLOB" AS 
select ORDER_TYPE_ID
,ORDER_TYPE_MNEMONIC
,ORDER_TYPE_CATEGORY_ID
,ORDER_TYPE_DESCRIPTION
,CARTRIDGE_ID from OM_ORDER_TYPE;

-- ----------------------------
-- View structure for OM_ORDER_VIEW_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_ORDER_VIEW_NOLOB" AS 
select ORDER_VIEW_SEQ_ID
,ORDER_VIEW_DESCRIPTION
,DATA_NAMESPACE
,STYLESHEET
,PRINT_STYLESHEET
,CARTRIDGE_ID
,ORDER_VIEW_MNEMONIC from OM_ORDER_VIEW;

-- ----------------------------
-- View structure for OM_OSPOLICY_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_OSPOLICY_NOLOB" AS 
select ID
,CARTRIDGE_ID
,MNEMONIC
,DESCRIPTION from OM_OSPOLICY;

-- ----------------------------
-- View structure for OM_OSPOLICY_RULE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_OSPOLICY_RULE_NOLOB" AS 
select STATE_POLICY_ID
,ID
,CONDITION_NAME
,ERROR_MESSAGE
,SEVERITY_LEVEL from OM_OSPOLICY_RULE;

-- ----------------------------
-- View structure for OM_OSPOLICY_STATE_TXN_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_OSPOLICY_STATE_TXN_NOLOB" AS 
select STATE_POLICY_ID
,STATE_ID
,TXN_ID
,TXN_MIN_GRACE_PERIOD
,TXN_MAX_GRACE_PERIOD
,TXN_EVENT_INTERVAL from OM_OSPOLICY_STATE_TXN;

-- ----------------------------
-- View structure for OM_PROCESS_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_PROCESS_NOLOB" AS 
select PROCESS_ID
,PROCESS_ID_DESCRIPTION
,PROCESS_EXPECTED_DURATION
,CARTRIDGE_ID
,PROCESS_ID_MNEMONIC
,WORKSTREAM
,PROCESS_TYPE
,ORCHESTRATION_NAMESPACE
,ORCHESTRATION_NAME from OM_PROCESS;

-- ----------------------------
-- View structure for OM_PROCESS_STATUS_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_PROCESS_STATUS_NOLOB" AS 
select PROCESS_STATUS_ID
,PROCESS_STATUS_MNEMONIC
,STATUS_CATEGORY_ID
,PROCESS_STATUS_DESCRIPTION
,PROCESS_STATUS_ICON_ID
,CARTRIDGE_ID
,CONSTRAINT_SEVERITY from OM_PROCESS_STATUS;

-- ----------------------------
-- View structure for OM_REGION_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_REGION_NOLOB" AS 
select REGION_ID
,REGION_MNEMONIC
,REGION_DESCRIPTION from OM_REGION;

-- ----------------------------
-- View structure for OM_RULE_DEF_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_RULE_DEF_NOLOB" AS 
select RULE_ID
,RULE_DESCRIPTION
,RULE_COMMENT
,STATUS
,MNEMONIC
,CARTRIDGE_ID from OM_RULE_DEF;

-- ----------------------------
-- View structure for OM_SCHEDULE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_SCHEDULE_NOLOB" AS 
select SCHEDULE_ID
,SCHEDULE_MNEMONIC
,SCHEDULE_DESCRIPTION from OM_SCHEDULE;

-- ----------------------------
-- View structure for OM_SORTED_NODE_SIMPLE
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_SORTED_NODE_SIMPLE" AS 
select
order_node_id,
order_node_index,
parent_node_index,
node_value_num,
node_value_text
from
om_order_instance OI
where
order_seq_id           = to_number(sys_context('ordermgmt','ORDER_SEQ_ID'))
and order_node_id          = to_number(sys_context('ordermgmt','ORDER_NODE_ID'))
and order_node_type        = sys_context('ordermgmt','ORDER_NODE_TYPE')
and (    parent_node_index    = to_number(sys_context('ordermgmt','PARENT_NODE_INDEX'))
or to_number(sys_context('ordermgmt','PARENT_NODE_INDEX'))  is null
);

-- ----------------------------
-- View structure for OM_STATE_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_STATE_NOLOB" AS 
select STATE_ID
,STATE_MNEMONIC
,STATE_CATEGORY_ID
,STATE_DESCRIPTION
,STATE_ICON_ID
,CARTRIDGE_ID from OM_STATE;

-- ----------------------------
-- View structure for OM_TASK_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_TASK_NOLOB" AS 
select TASK_ID
,TASK_TYPE
,TASK_DESCRIPTION
,TASK_MNEMONIC
,TASK_STATUS
,ORDER_NODE_ID
,ORDER_NODE_TYPE
,CARTRIDGE_ID
,CONTINUE_SUB_PROCESS
,SEQUENTIAL
,SORT_TYPE
,SORT_NODE_ID
,SORT_NODE_TYPE
,PRIORITY_OFFSET
,ROLLBACK_COMP_STRATEGY
,REEVALUATE_COMP_STRATEGY from OM_TASK;

-- ----------------------------
-- View structure for OM_WORKGROUP_FILTER_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_WORKGROUP_FILTER_NOLOB" AS 
select WORKGROUP_ID
,STATUS
,CARTRIDGE_ID from OM_WORKGROUP_FILTER;

-- ----------------------------
-- View structure for OM_WORKGROUPS_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_WORKGROUPS_NOLOB" AS 
select WORKGROUP_ID
,SCHEDULE_ID
,WORKGROUP_MNEMONIC
,WORKGROUP_DESCRIPTION
,REGION_ID
,STD_OFFSET_SECONDS
,DST_OFFSET_SECONDS
,DST_START_MONTH
,DST_START_WEEK
,DST_START_DAY
,DST_STOP_MONTH
,DST_STOP_WEEK
,DST_STOP_DAY
,DST_START_HOUR
,DST_START_MINUTE
,DST_START_SECOND
,DST_STOP_HOUR
,DST_STOP_MINUTE
,DST_STOP_SECOND
,LAST_CAL_START
,LAST_CAL_STOP
,LAST_CAL_RUN_START from OM_WORKGROUPS;

-- ----------------------------
-- View structure for OM_XML_SCHEMA_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."OM_XML_SCHEMA_NOLOB" AS 
select DATA_DICTIONARY_ID
,SCHEMA_FILE_NAME
,SCHEMA_URI
,CARTRIDGE_ID from OM_XML_SCHEMA;

-- ----------------------------
-- View structure for ORDER_INST_HIST_VIEW
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."ORDER_INST_HIST_VIEW" AS 
select
order_seq_id,
order_node_id,
order_node_type,
order_node_index,
parent_node_index,
hist_seq_id,
h$inst_seq_id,
data_dictionary_id,
NVL(DML_ACTION, decode(h$inst_seq_id, 1, 'I', 'U')) as DML_ACTION,
NODE_VALUE_NUM,
NODE_VALUE_TEXT,
is_secret,
context_id,
NODE_VALUE_CLOB,
NODE_VALUE_BLOB,
COMPLEX_TYPE_ROOT_NODE_ID
from om_order_instance
union all
select
order_seq_id,
order_node_id,
order_node_type,
order_node_index,
parent_node_index,
hist_seq_id,
h$inst_seq_id,
data_dictionary_id,
dml_action,
NODE_VALUE_NUM,
NODE_VALUE_TEXT,
is_secret,
context_id,
NODE_VALUE_CLOB,
NODE_VALUE_BLOB,
COMPLEX_TYPE_ROOT_NODE_ID
from om_hist$order_instance;

-- ----------------------------
-- View structure for ORDER_INST_HIST_VIEW_NOLOB
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "ORDERMGMT"."ORDER_INST_HIST_VIEW_NOLOB" AS 
select ORDER_SEQ_ID
,ORDER_NODE_ID
,ORDER_NODE_TYPE
,ORDER_NODE_INDEX
,PARENT_NODE_INDEX
,HIST_SEQ_ID
,H$INST_SEQ_ID
,DATA_DICTIONARY_ID
,DML_ACTION
,NODE_VALUE_NUM
,NODE_VALUE_TEXT
,IS_SECRET
,CONTEXT_ID
,COMPLEX_TYPE_ROOT_NODE_ID from ORDER_INST_HIST_VIEW;

-- ----------------------------
-- Procedure structure for ALIGN_SEQUENCE_VVF
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."ALIGN_SEQUENCE_VVF"
IS
v_max integer := -1;
v_temp integer := -1;
v_next_def_seq integer := -1;
v_next_exp_seq integer := -1;
BEGIN
select OM_VIEW_RULE_DEF_seq.nextval into v_next_def_seq from dual;
select max(VIEW_RULE_ID)
into v_temp
from OM_ORDER_VIEW_RULE_DEF_DD;
v_max := v_temp;
select max(VIEW_RULE_ID)
into v_temp
from OM_ORDER_VIEW_RULE_DEF_OH;
if (v_max < v_temp) then
v_max := v_temp;
end if;
select max(VIEW_RULE_ID)
into v_temp
from OM_ORDER_VIEW_RULE_DEF_OT;
if (v_max < v_temp) then
v_max := v_temp;
end if;
select max(VIEW_RULE_ID)
into v_temp
from OM_ORDER_VIEW_RULE_DEF_VN;
if (v_max < v_temp) then
v_max := v_temp;
end if;
if (v_max-v_next_def_seq <> 0) then
execute immediate 'alter sequence OM_VIEW_RULE_DEF_SEQ increment by ' || (v_max-v_next_def_seq);
end if;
select OM_VIEW_RULE_DEF_seq.nextval into v_next_def_seq from dual;
execute immediate 'alter sequence OM_VIEW_RULE_DEF_SEQ increment by 1 ';
select OM_VIEW_RULE_EXP_seq.nextval into v_next_exp_seq from dual;
select max(EXPRESSION_ID)
into v_temp
from OM_ORDER_VIEW_RULE_EXPR_DEF_VN;
v_max := v_temp;
select max(EXPRESSION_ID)
into v_temp
from OM_ORDER_VIEW_RULE_EXPR_DEF_OH;
if (v_max < v_temp) then
v_max := v_temp;
end if;
select max(EXPRESSION_ID)
into v_temp
from OM_ORDER_VIEW_RULE_EXPR_DEF_OT;
if (v_max < v_temp) then
v_max := v_temp;
end if;
select max(EXPRESSION_ID)
into v_temp
from OM_ORDER_VIEW_RULE_EXPR_DEF_DD;
if (v_max < v_temp) then
v_max := v_temp;
end if;
if (v_max-v_next_exp_seq <> 0) then
execute immediate 'alter sequence OM_VIEW_RULE_EXP_seq increment by ' || (v_max-v_next_exp_seq);
end if;
select OM_VIEW_RULE_EXP_seq.nextval into v_next_exp_seq from dual;
execute immediate 'alter sequence OM_VIEW_RULE_EXP_seq increment by 1' ;
select OM_VIEW_RULE_EXP_seq.nextval into v_next_exp_seq from dual;
END;
/

-- ----------------------------
-- Procedure structure for CHECK_DROP_OBJECT
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."CHECK_DROP_OBJECT"
( a_object_type    varchar2,
a_object_name    varchar2,
a_force          boolean      DEFAULT false,
a_cascade_const  boolean      DEFAULT false)
is
v_found         integer;
begin
select 1 into v_found
from user_objects
where
object_type  = upper(a_object_type) and
object_name  = upper(a_object_name);
if (a_object_type = 'TABLE' and a_force <> true) then
begin
execute immediate 'select 1 from '||a_object_name||' where rownum <2' into v_found;
raise_application_error(-20001, 'Cannot drop non-empty table ('||a_object_type||','||a_object_name||')');
exception when no_data_found then
null;
end;
end if;
if a_object_type = 'TABLE' and a_cascade_const then
execute immediate ' drop '||a_object_type||' '||a_object_name||' cascade constraints';
else
execute immediate ' drop '||a_object_type||' '||a_object_name;
end if;
exception when no_data_found then
null;
end check_drop_object;
/

-- ----------------------------
-- Procedure structure for CONFIG_KB_IBP_TASK
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."CONFIG_KB_IBP_TASK"(v_cartridge in varchar,
                                               v_qry_task  in varchar,
                                               v_qry_task2 in varchar) is
v_cartridge_id varchar(10);
v_sub_task_id  varchar(50);
v_sub_task_desc  varchar(500);
v_sub_task_mnem  varchar(500);
v_sub_proc_id  varchar(50);
v_task_id  varchar(50);
v_task_desc  varchar(500);
v_task_mnem  varchar(500);



begin
--查询 cartridge ID
  select cartridge_id into v_cartridge_id from om_cartridge
  where namespace_mnemonic=v_cartridge;

--查询sub task ID，sub task description,sub task mnemonic
begin
  select task_id,task_description,task_mnemonic
  into  v_sub_task_id, v_sub_task_desc, v_sub_task_mnem
  from om_task where task_description like v_qry_task
  and cartridge_id=v_cartridge_id and task_type='S' and rownum <=1;
  EXCEPTION
   WHEN OTHERS THEN
   v_sub_task_id := null;
   v_sub_task_desc:= v_qry_task;
   v_sub_task_mnem:= null;
   DBMS_OUTPUT.PUT_LINE('NO Sub_Task FOUND! : ' || v_qry_task);
   return;
end;
  --DBMS_OUTPUT.PUT_LINE('sub_task_id | desc | mnem : ' || v_sub_task_id || ' | ' ||v_sub_task_desc || ' | ' ||v_sub_task_mnem );

--查询sub process ID
begin
  select process_id into v_sub_proc_id from om_process
  where process_id_description like v_qry_task
  and cartridge_id=v_cartridge_id and rownum <=1;
   EXCEPTION
   WHEN OTHERS THEN
   v_sub_proc_id := v_cartridge_id;
end;
 -- DBMS_OUTPUT.PUT_LINE('sub_proc_id : ' || v_sub_proc_id );

--查询获取施工结果 task id,获取施工结果task description，获取施工结果task_mnemonic
--begin
  --select task_id,task_description,task_mnemonic into v_task_id, v_task_desc, v_task_mnem from om_task
  --where task_description like v_qry_task2 and cartridge_id=v_cartridge_id and task_type='A';
  --  EXCEPTION
  -- WHEN OTHERS THEN
  -- v_task_id := null;
  -- v_task_desc:= v_qry_task2;
  -- v_task_mnem:= null;
  -- DBMS_OUTPUT.PUT_LINE('NO Task FOUND! : ' || v_qry_task);
--end;
  --DBMS_OUTPUT.PUT_LINE('insert config:' || v_sub_proc_id || ' | ' || v_sub_task_id || ' | ' ||v_sub_task_desc || ' | ');
  --DBMS_OUTPUT.PUT_LINE( '==> ' || v_sub_task_mnem );
  --DBMS_OUTPUT.PUT_LINE( '==> ' || v_task_id || ' | ' ||v_task_desc || ' | ' ||v_task_mnem || ' | ' || v_cartridge_id);

--确认之前打印信息正确再执行插表, P7 sub task id -> task id
  --begin
  --insert into kb_ibp_config_task
  --values(v_cartridge,'2',v_task_id,v_sub_proc_id,v_sub_task_mnem,
  --       v_sub_task_desc,v_task_id,v_task_mnem,v_task_desc,v_cartridge_id);
  -- commit;
  -- DBMS_OUTPUT.PUT_LINE('cfg-ok:' || v_task_mnem);
  -- EXCEPTION
  -- WHEN OTHERS THEN
  --   rollback;
  --   DBMS_OUTPUT.PUT_LINE('insert fail! : '||v_task_id||':' || SQLCODE);
  --end;

  begin
  FOR task IN (
    select task_id,task_description,task_mnemonic
    from om_task
    where task_description like v_qry_task2
    and cartridge_id=v_cartridge_id and task_type='A'
        )
  LOOP
       begin
        insert into kb_ibp_config_task
        values(v_cartridge, '1.0.0.0.0', task.task_id,v_sub_proc_id,v_sub_task_mnem,
         v_sub_task_desc,task.task_id,task.task_mnemonic,task.task_description,v_cartridge_id);
         commit;
         DBMS_OUTPUT.PUT_LINE('cfg-ok:' || task.task_description||'|'||task.task_id);
         EXCEPTION
         WHEN OTHERS THEN
         rollback;
         DBMS_OUTPUT.PUT_LINE('insert fail! : '||v_task_id||':' || SQLCODE);
      end;
  END LOOP;
end;


end CONFIG_KB_IBP_TASK;
/

-- ----------------------------
-- Procedure structure for CREATE_NODE_CONFIG
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."CREATE_NODE_CONFIG"
is
      v_order_node_id om_order_hier.order_node_id%type;
      v_cartridge_id number;
begin
      FOR sw IN (
          select namespace_mnemonic,version,query_filter from kb_ibp_config_query_filter
      )
      LOOP
          begin
       --   CARTRIDGE_ID

            select cartridge_id into v_cartridge_id from om_cartridge
                   where om_cartridge.namespace_mnemonic=sw.namespace_mnemonic and om_cartridge.version=sw.version;
               v_order_node_id := cacl_ibp_work_process.get_order_node_id(sw.namespace_mnemonic,sw.version,sw.query_filter);
               update kb_ibp_config_query_filter
                      set order_node_id = v_order_node_id ,CARTRIDGE_ID=v_cartridge_id
               where
                     namespace_mnemonic = sw.namespace_mnemonic and version=sw.version and query_filter =sw.query_filter ;
               commit;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
               raise;
            --nerr := 0;
          end;
      END LOOP;


end;
/

-- ----------------------------
-- Procedure structure for DROP_SNAPSHOT_LOG
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."DROP_SNAPSHOT_LOG"(a_table_name in varchar2)
is
v_dummy		number;
v_sql_statement	varchar2(500);
begin
select 1
into v_dummy
from user_snapshot_logs
where master = UPPER(a_table_name)
and rownum = 1;
dbms_output.put_line('DROPPING');
v_sql_statement := 'drop materialized view log on '||a_table_name;
dbms_utility.exec_ddl_statement(v_sql_statement);
exception when no_data_found then
dbms_output.put_line('NO THERE');
NULL;
end;
/

-- ----------------------------
-- Procedure structure for ERROR_MSG
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."ERROR_MSG"
( a_error_code om_errors.error_code%type,
a_add_on_message varchar2 default null) is
v_err_msg om_errors.error_message%type;
begin
select error_message into v_err_msg from om_errors
where error_code  = a_error_code;
raise_application_error(a_error_code, v_err_msg||' '||a_add_on_message);
exception when no_data_found then
raise_application_error(a_error_code, a_add_on_message);
end error_msg;
/

-- ----------------------------
-- Procedure structure for GET_RETURN_TASK
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."GET_RETURN_TASK"(vi_wop_serial_no  in varchar2,
                                              vo_p6_order_id      out varchar2,
                                              vo_p6_order_histid   out varchar2,
                                              vo_p6_order_ver  out varchar2,
                                              vo_crm_order_id   out varchar2,
                                              vo_task_mnemonic  out varchar2,
                                              ivk_code         out number,
                                              ivk_desc         out varchar2) is
begin
     ivk_code := 0;
     --����
     if  vi_wop_serial_no is null then
         ivk_code := 300;
         ivk_desc := '�������null!';
         RETURN;
     end if;
     begin
      select CRM_ORDER_ID,
             P6_ORDER_ID,
             P6_ORDER_VERSION,
             P6_TASK_MNEMONIC,
             P6_ORDER_HIST_ID
        into vo_crm_order_id,
             vo_p6_order_id,
             vo_p6_order_ver,
             vo_task_mnemonic,
             vo_p6_order_histid
        from IBP_P6_TASK_ID
       where TRANSACTION_ID = vi_wop_serial_no;
    exception
      when others then
        ivk_code := 100;
        ivk_desc := '��������!';
        return;
    end;

end GET_RETURN_TASK;
/

-- ----------------------------
-- Procedure structure for OM_ALIGN_SEQUENCE
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."OM_ALIGN_SEQUENCE"(a_sequence_name IN varchar2)
IS
v_sequence_name om_sequence_table.sequence_name%type;
v_table_name    om_sequence_table.table_name%type;
v_column_name   om_sequence_table.column_name%type;
v_max_val     integer;
v_seq_val     integer;
v_seq_min_val integer;
v_original_cache_size INTEGER;
v_cache_size        INTEGER;
err_code             NUMBER;
BEGIN
SELECT sequence_name,
table_name,
column_name
INTO v_sequence_name,
v_table_name,
v_column_name
FROM om_sequence_table
WHERE upper(sequence_name)=upper(a_sequence_name);
EXECUTE immediate 'select nvl(abs(max('||v_column_name||')), 0) from '||v_table_name INTO v_max_val;
EXECUTE immediate 'select '||v_sequence_name||'.nextval from dual' INTO v_seq_val;
SELECT min_value,nvl(cache_size, 1)
INTO v_seq_min_val,v_original_cache_size
FROM user_sequences
WHERE sequence_name = upper(v_sequence_name);
BEGIN
IF (v_max_val - v_seq_val <> 0 AND v_max_val >= v_seq_min_val) THEN
EXECUTE immediate 'alter sequence '||v_sequence_name||' increment by ' || (v_max_val - v_seq_val);
END IF;
EXCEPTION
WHEN OTHERS THEN
err_code    := SQLCODE;
IF (err_code = -4013) THEN
-- When v_max_val - v_seq_val is a very large number, alter sequence may fail with the exception
-- ORA 4013 number to CACHE must be less than one cycle. So reduce the cache size to least possible value which is 2.
EXECUTE immediate 'alter sequence '||v_sequence_name|| ' cache 2';
END IF;
END;
EXECUTE immediate 'select '||v_sequence_name||'.nextval from dual' INTO v_seq_val;
-- if v_original_cache_size is 1 or less ORA-04010 is thrown
IF (v_original_cache_size > 1) THEN
EXECUTE immediate 'alter sequence '||v_sequence_name||' increment by 1 cache ' || v_original_cache_size;
ELSE
EXECUTE immediate 'alter sequence '||v_sequence_name||' increment by 1 nocache';
END IF;
--alter sequence increment by 2 succeeded. So set the cache size back to original value
END;
/

-- ----------------------------
-- Procedure structure for OM_ALIGN_SEQUENCES
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."OM_ALIGN_SEQUENCES"(a_sequence_names IN om_t_om_textvals default NULL)
IS
v_max_val     integer;
v_seq_val     integer;
v_seq_min_val integer;
begin
if a_sequence_names is null then
for r_seq in
( select sequence_name, table_name, column_name from om_sequence_table)
loop
om_align_sequence(r_seq.sequence_name);
end loop;
else
for i in 1..a_sequence_names.COUNT
loop
om_align_sequence(a_sequence_names(i));
end loop;
end if;
end;
/

-- ----------------------------
-- Procedure structure for OM_SET_PARAMETER
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."OM_SET_PARAMETER"(
a_mnemonic      varchar2,
a_description   varchar2,
a_value         varchar2)
is
begin
insert into om_parameter(mnemonic, description, value) values(a_mnemonic, a_description, a_value);
exception when om_exception_pkg.unique_constraint_violated then
update om_parameter set value  = a_value where mnemonic = a_mnemonic;
end om_set_parameter;
/

-- ----------------------------
-- Procedure structure for PURGE_PARALL_P7ORDER
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."PURGE_PARALL_P7ORDER"(vi_count number) is
v_count number(22);
v_count_close number(22);
v_status number(22);
v_logmsg varchar(4000);
v_testint number(22);
/*
Cursor C_order
is
select order_seq_id,reference_number,ord_state_id,COUNT(1) OVER() AS totalnum from om_order_header where ( (ORD_STATE_ID in (2) and ORD_TXN_COMPLETION_DATE<sysdate-1/24)
 )
and rownum<=vi_count
order by 1 asc;
*/

begin
/*
     v_count:=0;
     insert into log_purge_order  values ('init start',vi_count,'rownum<='||vi_count,sysdate);
         commit;
    for i in C_order loop
           om_new_purge_pkg.delete_order(i.order_seq_id);
           commit;
           insert into log_purge_order_his values(i.order_seq_id,i.reference_number,i.ord_state_id,sysdate);
           commit;
            if C_order%ROWCOUNT = 1 THEN
               v_count := i.totalnum;
            end if;

            dbms_lock.sleep(0.1);
    end loop;
*/
v_testint :=100;
/*
om_lock_pkg.acquire_lock_db_maintain(v_testint);
*/
--om_new_purge_pkg.select_orders(
--a_selected_count=>v_count_close,
--a_delete_before=>trunc(sysdate-80),
--a_order_states=> om_new_purge_pkg.v_closed_or_cancelled_orders
--);

--NEW PURGE PARALL

om_new_purge_pkg.purge_orders(
--a_output_logmsg=>v_logmsg,
a_status=>v_status,
a_stop_date => sysdate + 1, -- 15m
a_delete_before=>trunc(sysdate-80),
a_order_states=> om_new_purge_pkg.v_closed_or_cancelled_orders,
a_order_id_lt=>480,
a_commit_count=>10,
a_parallelism => 5);


   insert into log_purge_order  values ('purge end', v_count+v_count_close,'suspend='||v_count||' complete='||v_count_close,sysdate);
         commit;

   delete from log_purge_order_his where remove_time<sysdate-90;
   commit;

end PURGE_PARALL_P7ORDER;
/

-- ----------------------------
-- Procedure structure for SET_RETURN_TASK
-- ----------------------------
CREATE OR REPLACE procedure "ORDERMGMT"."SET_RETURN_TASK"(vi_wop_serial_no  in varchar2,
																						vi_crm_order_id      in varchar2,
																						vi_p6_order_id       in varchar2,
																						vi_p6_order_ver      in varchar2,
																						vi_task_mnemonic     in varchar2,
                                            vi_p6_order_histid   in varchar2,
                                            ivk_code             out number,
                                            ivk_desc             out varchar2) is

begin
  ivk_code := 0;
  BEGIN
    DELETE IBP_P6_TASK_ID where TRANSACTION_ID=vi_wop_serial_no;
    INSERT INTO IBP_P6_TASK_ID
     (TRANSACTION_ID,
      CRM_ORDER_ID,
      P6_ORDER_ID,
      P6_ORDER_VERSION,
      P6_TASK_MNEMONIC,
      P6_ORDER_HIST_ID,
      STATUS)
      values
      (vi_wop_serial_no,
       vi_crm_order_id,
       vi_p6_order_id,
       vi_p6_order_ver,
       vi_task_mnemonic,
       vi_p6_order_histid,
       '0');
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      ivk_code := 200;
      ivk_desc := 'IBP_P6_TASK_ID--' || SQLCODE || '--' || SQLERRM;
      RETURN;
  end;
end SET_RETURN_TASK;
/

-- ----------------------------
-- Procedure structure for TEST_RESTORE_COORD_SET
-- ----------------------------
CREATE OR REPLACE PROCEDURE "ORDERMGMT"."TEST_RESTORE_COORD_SET"
  (
    A_ORDER_SEQ_ID IN INTEGER,
    A_HIST_SEQ_ID  IN INTEGER,
    A_COORD_SET_ID IN INTEGER,
    A_CARTRIDGE_ID IN INTEGER
  )
IS
  V_PARENT_HIST_SEQ_ID INTEGER := NULL;
BEGIN
  BEGIN
    INSERT
    INTO OM_ORDER_FLOW_COORDINATOR
      (
        ORDER_SEQ_ID,
        COORD_SET_ID,
        CARTRIDGE_ID
      )
      VALUES
      (
        A_ORDER_SEQ_ID,
        A_COORD_SET_ID,
        A_CARTRIDGE_ID
      );
  EXCEPTION
  WHEN OM_EXCEPTION_PKG.UNIQUE_CONSTRAINT_VIOLATED THEN
    RETURN;
  END;
  IF (A_COORD_SET_ID > 0) THEN



    BEGIN
      SELECT OHOH1.HIST_SEQ_ID
      INTO V_PARENT_HIST_SEQ_ID
      FROM OM_HIST$ORDER_HEADER OHOH,
        OM_HIST$ORDER_HEADER OHOH1
      WHERE OHOH.ORDER_SEQ_ID = A_ORDER_SEQ_ID
      AND OHOH.ORDER_SEQ_ID   = OHOH1.ORDER_SEQ_ID
      AND OHOH.HIST_SEQ_ID    = A_HIST_SEQ_ID
      AND OHOH1.HIST_SEQ_ID   = OHOH.PARENT_HIST_SEQ_ID
      AND

        OHOH1.TASK_TYPE               = OM_CONST_PKG.V_SUBPROCESS_TASK_TYPE
      AND OHOH1.TASK_ORDER_NODE_ID   IS NOT NULL
      AND OHOH1.TASK_ORDER_NODE_TYPE IS NOT NULL;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_PARENT_HIST_SEQ_ID := NULL;
    END;
    /*
    INSERT
    INTO OM_COORD_NODE_INSTANCE
      (
        COORD_SET_ID,
        ORDER_NODE_ID,
        ORDER_NODE_TYPE,
        ORDER_NODE_INDEX,
        ORDER_SEQ_ID,
        CARTRIDGE_ID
      )
      */

    for rs in (
    SELECT A_COORD_SET_ID,
      ORDER_NODE_ID,
      ORDER_NODE_TYPE,
      ORDER_NODE_INDEX,
      A_ORDER_SEQ_ID,
      A_CARTRIDGE_ID
    FROM
      (SELECT LAG(TASK_ORDER_NODE_ID, 1, NULL) OVER(ORDER BY NVL(HH.BASE_HIST_SEQ_ID, HH.HIST_SEQ_ID) ASC, HH.HIST_SEQ_ID ASC) AS ORDER_NODE_ID,
        LAG(TASK_ORDER_NODE_TYPE, 1, NULL) OVER(ORDER BY NVL(HH.BASE_HIST_SEQ_ID, HH.HIST_SEQ_ID) ASC, HH.HIST_SEQ_ID ASC)     AS ORDER_NODE_TYPE,
        ORDER_NODE_INDEX
      FROM
        (SELECT ORDER_SEQ_ID,
          HIST_SEQ_ID
        FROM OM_HIST$FLOW HF
          START WITH ORDER_SEQ_ID = A_ORDER_SEQ_ID
        AND HIST_SEQ_ID          IN





          (
          (
          SELECT
            CASE
              WHEN EXECUTION_MODE IN (OM_CONST_PKG.V_TASK_MODE_UNDO)
              THEN
                (SELECT HIST_SEQ_ID
                FROM OM_ORDER_COMPENSATION_PLAN CP
                WHERE ORDER_SEQ_ID           = A_ORDER_SEQ_ID
                AND COMPENSATION_HIST_SEQ_ID = A_HIST_SEQ_ID
                )
              ELSE A_HIST_SEQ_ID
            END
          FROM OM_HIST$ORDER_HEADER
          WHERE ORDER_SEQ_ID = A_ORDER_SEQ_ID
          AND HIST_SEQ_ID    = A_HIST_SEQ_ID
          ), V_PARENT_HIST_SEQ_ID)
          CONNECT BY ORDER_SEQ_ID  = A_ORDER_SEQ_ID
        AND PRIOR HIST_SEQ_ID_FROM = HIST_SEQ_ID
        AND PRIOR
          (SELECT PARENT_HIST_SEQ_ID
          FROM OM_HIST$ORDER_HEADER
          WHERE ORDER_SEQ_ID = HF.ORDER_SEQ_ID
          AND HIST_SEQ_ID    = HF.HIST_SEQ_ID
          )                 <> -1
        AND







          NOT EXISTS
          (SELECT EXECUTION_MODE
          FROM OM_HIST$ORDER_HEADER
          WHERE ORDER_SEQ_ID      = HF.ORDER_SEQ_ID
          AND HIST_SEQ_ID         = HF.HIST_SEQ_ID
          AND COMPENSATOR_HIST_ID > 0
          )



        AND ( PRIOR
          (SELECT PARENT_HIST_SEQ_ID
          FROM OM_HIST$ORDER_HEADER
          WHERE ORDER_SEQ_ID = HF.ORDER_SEQ_ID
          AND HIST_SEQ_ID    = HF.HIST_SEQ_ID
          )                 IN (
          (SELECT PARENT_HIST_SEQ_ID
          FROM OM_HIST$ORDER_HEADER
          WHERE ORDER_SEQ_ID = HF.ORDER_SEQ_ID
          AND HIST_SEQ_ID    = HF.HIST_SEQ_ID
          ), HIST_SEQ_ID))
        GROUP BY ORDER_SEQ_ID,
          HIST_SEQ_ID
        ) HF1
      JOIN OM_HIST$ORDER_HEADER HH
      ON (HF1.ORDER_SEQ_ID = HH.ORDER_SEQ_ID
      AND HF1.HIST_SEQ_ID  = HH.HIST_SEQ_ID)
      )





    WHERE ORDER_NODE_ID  IS NOT NULL
    AND ORDER_NODE_INDEX IS NOT NULL
    ) loop
    dbms_output.put_line(rs.A_COORD_SET_ID);
    end loop;
  END IF;
END test_RESTORE_COORD_SET;
/

-- ----------------------------
-- Function structure for AGGT_BITOR
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."AGGT_BITOR" (a_input number) return number
parallel_enable aggregate using om_t_aggt_bitor_impl;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_ACTION
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_ADSL_ACTION"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  action_code varchar(100);
  sub_action_code varchar(100);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

begin
action_code :=get_v_node_text('adsl.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 action_code:=null;
end;

begin
sub_action_code :=get_v_node_text('adsl.sub_action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 sub_action_code:=null;
end;

if action_code='C' then
v_count :=1;
end if;
--拆机

if action_code='X' then
v_count :=2;
end if;
--修改

if action_code='X1' and sub_action_code='X102' then
v_count :=3;
end if;

--insert into tdelay(orderseqid,coord_set_id,tcount) values(v_order_seq_id,v_coord_set_id,v_count);
--commit;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_CRM_BANDWIDTH
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_ADSL_CRM_BANDWIDTH"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT('adsl.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

select count(*) into v_count from CRM_BANDWIDTH
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=v_p_line_item_no;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_CRM_INFO_BOOK
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_ADSL_CRM_INFO_BOOK"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  v_action_code VARCHAR2(10);
  v_crm_product_code VARCHAR2(10);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT('adsl.line_item.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from CRM_APPOINT_INFO
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) ;

IF(v_count=0) THEN
   v_action_code:=GET_V_NODE_TEXT('adsl.action_code',v_order_seq_id,v_coord_set_id);
   v_crm_product_code:=GET_V_NODE_TEXT('adsl.new.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
   IF v_action_code IN ('Z','Y') AND v_crm_product_code IN ('524') THEN
      SELECT COUNT(*) INTO v_count FROM om_order_flow f,om_task t WHERE f.order_seq_id=v_order_seq_id AND f.date_pos_started<(SYSDATE-1/(24*6))
      AND t.task_id=f.task_id AND t.task_mnemonic='adsl_wait_book_confirmed';
   END IF;
END IF;

RETURN v_count;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_DIRECT_FINISH_FLAG
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_ADSL_DIRECT_FINISH_FLAG"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  direct_finish_flag varchar(100);
  action_code varchar(100);
  new_crm_product_code varchar(100);
  old_crm_product_code varchar(100);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_p_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
action_code:= GET_V_NODE_TEXT('adsl.action_code',v_order_seq_id,v_coord_set_id);
begin
     new_crm_product_code:= GET_V_NODE_TEXT('adsl.new.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
exception
    when others then
    new_crm_product_code := '';
end ;
begin
     old_crm_product_code:= GET_V_NODE_TEXT('adsl.old.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
exception
    when others then
    old_crm_product_code := '';
end ;
begin
direct_finish_flag := GET_V_NODE_TEXT('adsl.direct_finish_flag',v_order_seq_id,v_coord_set_id);

if direct_finish_flag is null then
   direct_finish_flag := 'N';
end if;
exception
    when others then
    direct_finish_flag := 'N';
end ;
if direct_finish_flag = 'Y' then
   v_count :=1;
else
    if action_code = 'X' then
       if new_crm_product_code in ('452') and old_crm_product_code in ('162','163','164','165','166','167','168') then
          v_count :=1;
       end if;
    end if;

end if;
return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_EPON_TEST_DISTRICT
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_ADSL_EPON_TEST_DISTRICT"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  new_bureau_code varchar(100);
  old_bureau_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
new_bureau_code :=GET_V_NODE_TEXT('adsl.new.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 new_bureau_code:=null;
end;
begin
old_bureau_code :=GET_V_NODE_TEXT('adsl.old.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 old_bureau_code:=null;
end;

if new_bureau_code='8' or new_bureau_code='e' or old_bureau_code='8' or old_bureau_code='e' or new_bureau_code='7' or old_bureau_code='7' then
v_count :=1;
else if new_bureau_code='6' or old_bureau_code='6' or new_bureau_code='i' or old_bureau_code='i' or new_bureau_code='f' or old_bureau_code='f' then
v_count :=2;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_ADSL_SP_EPON_DISTRICT
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_ADSL_SP_EPON_DISTRICT"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  new_bureau_code varchar(100);
  old_bureau_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
new_bureau_code :=GET_V_NODE_TEXT('adsl_sp.new.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 new_bureau_code:=null;
end;
begin
old_bureau_code :=GET_V_NODE_TEXT('adsl_sp.old.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 old_bureau_code:=null;
end;

if new_bureau_code='8' or new_bureau_code='e' or old_bureau_code='8' or old_bureau_code='e' or new_bureau_code='7' or old_bureau_code='7' then
v_count :=1;
else if new_bureau_code='6' or old_bureau_code='6' or new_bureau_code='i' or old_bureau_code='i' or new_bureau_code='f' or old_bureau_code='f' then
v_count :=2;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_ASSO_GRP_WRK_COMPL
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_ASSO_GRP_WRK_COMPL"
( v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count NUMBER :=0;

  v_p_cartridge_id number(6);
  v_p_cartridge_name VARCHAR2(50);

  v_p_type_id number(6);
  v_p_type_name VARCHAR2(50);

  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_d_line_item_no varchar(15);

  v_p_event_id varchar(100);
BEGIN
  SELECT h.cartridge_id,c.namespace_mnemonic,h.order_type_id,t.order_type_mnemonic INTO v_p_cartridge_id,v_p_cartridge_name,v_p_type_id,v_p_type_name
         from om_order_header h,om_cartridge c,om_order_type t where
              h.order_seq_id=v_order_seq_id AND c.cartridge_id=h.cartridge_id AND t.order_type_id=h.order_type_id;

  if v_p_cartridge_name IN ('sp_product') THEN
    v_p_event_id := 'sp_product_work_finished_notice_line_item';

    v_p_sales_order_no := get_v_node_text('sp_product_info.depend_sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
    v_p_version:=get_v_node_text('sp_product_info.depend_sales_order.version',v_order_seq_id,v_coord_set_id);
    v_p_d_line_item_no:=get_v_node_text('sp_product_info.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);

    IF v_p_sales_order_no IS NULL THEN
       RETURN 1;
    END IF;
  end if;

select count(*) into v_count from p6_task_event
where CRM_ORDER_ID=v_p_sales_order_no and CRM_ORDER_VERSION=v_p_version and
LINE_ITEM_ID=v_p_d_line_item_no and event_id =v_p_event_id;

return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_B30_D_CRM_INFO_FEE
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_B30_D_CRM_INFO_FEE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
--insert into kfc_temp(ORDER_SEQ_ID,COORD_SET_ID,CREATE_TIME) values (v_order_seq_id,v_coord_set_id,sysdate);
--commit;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT('sp_product_info.line_item.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from crm_agreement_affirm
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) and USER_ID in ('B', 'C');
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_BST_ACTION_TYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_BST_ACTION_TYPE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_action_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
v_action_code :=om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_bst_node_value_fee('action_code',v_p_cartridge_id),NULL);
EXCEPTION
WHEN OTHERS THEN
 v_action_code:=null;
end;

if v_action_code='Z' then
v_count :=1;
else if v_action_code='C' then
v_count :=2;
else if v_action_code='X' then
v_count :=3;
else if v_action_code= null then
v_count :=3;
end if;
end if;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CENTREX_DELAY
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_CENTREX_DELAY"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
  v_group_member_count NUMBER;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  v_p_cartridge_mnemonic VARCHAR2(50);
  v_p_type_mnemonic VARCHAR2(50);
  v_p_sync_event_id varchar(100);
begin
select h.cartridge_id,c.namespace_mnemonic,t.order_type_mnemonic into v_cartridge_id,v_p_cartridge_mnemonic,v_p_type_mnemonic
from om_order_header h, om_cartridge c, om_order_type t
where h.order_seq_id=v_order_seq_id AND c.cartridge_id=h.cartridge_id AND t.order_type_id=h.order_type_id;
v_p_cartridge_id:=v_cartridge_id;
--select NAMESPACE_MNEMONIC into v_p_cartridge_mnemonic from OM_CARTRIDGE where CARTRIDGE_ID=v_cartridge_id;--��by kfc

if v_p_cartridge_mnemonic='sp_product' then
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('sp_product_info.line_item.line_item_no',v_order_seq_id,v_coord_set_id);
else
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('centrex.line_item.line_item_no',v_order_seq_id,v_coord_set_id);
end if;

v_group_member_count :=9999999;

begin
if v_p_cartridge_mnemonic='sp_product' THEN
   IF v_p_type_mnemonic='b30_d_crm' THEN
      v_group_member_count:=to_number(get_v_node_text('sp_product_info.tn_count',v_order_seq_id,v_coord_set_id))
                                + to_number(get_v_node_text('sp_product_info.module_count',v_order_seq_id,v_coord_set_id));
   ELSE
      v_group_member_count:=to_number(get_v_node_text('sp_product_info.tn_count',v_order_seq_id,v_coord_set_id));
   END IF;
else
   v_group_member_count:=to_number(get_v_node_text('centrex.group_member_count',v_order_seq_id,v_coord_set_id));
end if;

if v_group_member_count is null then
   v_group_member_count :=0;
end if;
EXCEPTION
WHEN  NO_DATA_FOUND THEN
v_group_member_count :=0;
WHEN OTHERS THEN
v_group_member_count :=9999999;
end;

if v_p_cartridge_mnemonic='sp_product' then
   v_p_sync_event_id := 'centrex_extension_notify_group';
else
   v_p_sync_event_id := 'centrex_extension_notify_group';
end if;

select count(*) into v_count from P6_Sync_Request
where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version and
SYNC_LINE_ITEM_ID=(v_p_line_item_ID) and event_id=v_p_sync_event_id ;

IF v_order_seq_id IN ('0') THEN
   v_count :=1;
elsif v_count>=v_group_member_count then
   v_count :=1;
else
   v_count :=0;
end if;


return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CENTREX_POTS_DELAY
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_CENTREX_POTS_DELAY"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
  v_group_member_count NUMBER;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  v_p_cartridge_mnemonic varchar(50);
  v_p_sync_event_id varchar(100);
  v_om_type_id number(9);
  v_om_type_mnemonic varchar2(50);
  v_temp number;
begin
select cartridge_id,order_type_id into v_cartridge_id,v_om_type_id from om_order_header where order_seq_id=v_order_seq_id;

select NAMESPACE_MNEMONIC into v_p_cartridge_mnemonic from OM_CARTRIDGE where CARTRIDGE_ID=v_cartridge_id;--靠by kfc
select t.order_type_mnemonic into v_om_type_mnemonic from om_order_type t where t.order_type_id=v_om_type_id;--靠by kfc

v_p_cartridge_id:=v_cartridge_id;

--靠by kfc
if v_p_cartridge_mnemonic='sp_product' then
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('sp_product_info.line_item.line_item_no',v_order_seq_id,v_coord_set_id);
else
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('centrex.line_item.line_item_no',v_order_seq_id,v_coord_set_id);
end if;

v_group_member_count :=9999999;

begin
--靠by kfc
if v_p_cartridge_mnemonic='sp_product' then
   v_group_member_count:=to_number(get_v_node_text('sp_product_info.group_member_count',v_order_seq_id,v_coord_set_id));
else
   v_group_member_count:=to_number(get_v_node_text('centrex.group_member_count',v_order_seq_id,v_coord_set_id));
end if;

if v_group_member_count is null then
   v_group_member_count :=0;
end if;
EXCEPTION
WHEN  NO_DATA_FOUND THEN
v_group_member_count :=0;
WHEN OTHERS THEN
v_group_member_count :=9999999;
end;

--靠by kfc
if v_p_cartridge_mnemonic='sp_product' then
   v_p_sync_event_id := 'zz_get_service_create_result';
--elsif v_om_type_mnemonic='centrex_zz_crm' then
--   v_p_sync_event_id := 'pots_get_create_service_result';
else
   v_p_sync_event_id := 'pots_get_create_service_result';
end if;

select count(*) into v_count from P6_Sync_Request
where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version and
SYNC_LINE_ITEM_ID=(v_p_line_item_ID) and sync_event_id=v_p_sync_event_id;

if v_count>=v_group_member_count then
   v_count :=1;
else
   v_count :=0;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CENTREX_WAC_DELAY
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_CENTREX_WAC_DELAY"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_id varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  v_p_cartridge_mnemonic varchar(50);
  v_p_event_id varchar(100);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

if v_p_cartridge_mnemonic='sp_product' then
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('sp_product_info.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);
else
   v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
   v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
   v_p_line_item_ID:=get_v_node_text('centrex.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);
end if;

if v_p_cartridge_mnemonic='sp_product' then
   v_p_event_id := 'zz_get_service_create_result';
else
   v_p_event_id := 'wac_get_create_service_result';
end if;

select count(*) into v_count from p6_task_event
where CRM_ORDER_ID=v_p_sales_order_no and CRM_ORDER_VERSION=v_p_version and
LINE_ITEM_ID=v_p_line_item_id and event_id =v_p_event_id;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CRM_INFO_ACCOUNT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_CRM_INFO_ACCOUNT"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2,
  v_first_node         in varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT(v_first_node||'.line_item.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from CRM_ACCOUNT
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=v_p_line_item_no;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CRM_INFO_BOOK
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_CRM_INFO_BOOK"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2,
  v_first_node         in varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
  v_count :=0;
--if v_count=0 then
--return v_count;
--end if;

select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT(v_first_node||'.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

select count(*) into v_count from CRM_APPOINT_INFO
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) ;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_CRM_INFO_FEE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_CRM_INFO_FEE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2,
  v_first_node         in varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
  v_count :=0;
--if v_count=0 then
--return v_count;
--end if;

select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT(v_first_node||'.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

select count(*) into v_count from CRM_PAYMENT_INFO
where CRM_ORDER_NUMBER=v_p_sales_order_no and CRM_VERSION=v_p_version and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) ;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_FTTH_NEW
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_FTTH_NEW"(
      v_order_seq_id IN VARCHAR2,
      v_coord_set_id IN VARCHAR2)
    RETURN NUMBER
  IS
    v_count                 NUMBER;
    action_code             VARCHAR(100);
    new_crm_product_code    VARCHAR(100);
    v_p_cartridge_id        NUMBER(6);
    v_broadband_access_type VARCHAR(100);
  BEGIN
    v_count := 0;
    SELECT cartridge_id
    INTO v_p_cartridge_id
    FROM om_order_header
    WHERE order_seq_id=v_order_seq_id;
    action_code      := GET_V_NODE_TEXT('lan.action_code',v_order_seq_id,v_coord_set_id);
    BEGIN
      new_crm_product_code:= GET_V_NODE_TEXT('lan.new.crm_product_code',v_order_seq_id,v_coord_set_id);
    EXCEPTION
    WHEN OTHERS THEN
      new_crm_product_code := '';
    END ;
    BEGIN
      v_broadband_access_type:= GET_V_NODE_TEXT('lan.new.broadband_access_type',v_order_seq_id,v_coord_set_id);
    EXCEPTION
    WHEN OTHERS THEN
      v_broadband_access_type := '';
    END ;
    IF new_crm_product_code IN ('431','506') THEN
      IF action_code         = 'Z' THEN
        v_count             :=1;
      ELSE
        IF action_code = 'C' THEN
          v_count     :=2;
        ELSE
          IF action_code = 'X' THEN
            v_count     :=3;
          ELSE
            IF action_code = 'T' THEN
              v_count     :=4;
            ELSE
              IF action_code = 'U' THEN
                v_count     :=5;
              ELSE
                IF action_code = 'Y' THEN
                  v_count     :=6;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF new_crm_product_code IN ('522','523') AND v_broadband_access_type='5' THEN
      IF action_code         = 'Z' THEN
        v_count             :=1;
      ELSE
        IF action_code = 'C' THEN
          v_count     :=2;
        ELSE
          IF action_code = 'X' THEN
            v_count     :=3;
          ELSE
            IF action_code = 'T' THEN
              v_count     :=4;
            ELSE
              IF action_code = 'U' THEN
                v_count     :=5;
              ELSE
                IF action_code = 'Y' THEN
                  v_count     :=6;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    RETURN v_count;
  END;
/

-- ----------------------------
-- Function structure for CHECK_GROUP_WORK_COMPLETED
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_GROUP_WORK_COMPLETED"
( v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count NUMBER :=0;

  v_p_cartridge_id number(6);
  v_p_cartridge_name VARCHAR2(50);

  v_p_type_id number(6);
  v_p_type_name VARCHAR2(50);

  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_d_line_item_no varchar(15);

  v_p_event_id varchar(100);
begin
  SELECT h.cartridge_id,c.namespace_mnemonic,h.order_type_id,t.order_type_mnemonic INTO v_p_cartridge_id,v_p_cartridge_name,v_p_type_id,v_p_type_name
         from om_order_header h,om_cartridge c,om_order_type t where
              h.order_seq_id=v_order_seq_id AND c.cartridge_id=h.cartridge_id AND t.order_type_id=h.order_type_id;

if v_p_type_name IN ('did_number_crm','30b_d_num_crm')THEN
    v_p_event_id := 'sp_product_work_finished_notice_line_item';

   v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_POTS_NODE_VALUE('order_no',v_p_cartridge_id));
   v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_POTS_NODE_VALUE('version_no',v_p_cartridge_id));
   v_p_d_line_item_no:=GET_V_NODE_TEXT('pots.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_POTS_NODE_VALUE('d_line_item_no',v_p_cartridge_id),v_coord_set_id);
elsif v_p_type_name IN ('b30_d_module_crm') THEN
    v_p_event_id := 'sp_product_work_finished_notice_line_item';

   v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_SP_PRODUCT_NODE_VALUE('order_no',v_p_cartridge_id));
   v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_SP_PRODUCT_NODE_VALUE('version_no',v_p_cartridge_id));
   v_p_d_line_item_no:=GET_V_NODE_TEXT('sp_product_info.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);--om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,GET_SP_PRODUCT_NODE_VALUE('d_line_item_no',v_p_cartridge_id),v_coord_set_id);
end if;

IF v_p_d_line_item_no IS NULL THEN
  RETURN 1;
END IF;

select count(*) into v_count from p6_task_event
where CRM_ORDER_ID=v_p_sales_order_no and CRM_ORDER_VERSION=v_p_version and
LINE_ITEM_ID=v_p_d_line_item_no and event_id =v_p_event_id;
return v_count;

/*IF v_order_seq_id IN ('360720','360721','360722','360723','360724') then
   return 1;
ELSE
   RETURN 0;

END IF;*/
end;
/

-- ----------------------------
-- Function structure for CHECK_LAN_ACTION_TYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_LAN_ACTION_TYPE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_action_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
v_action_code :=GET_V_NODE_TEXT('lan.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 v_action_code:=null;
end;

if v_action_code='Z' then
v_count :=1;
else if v_action_code='C' then
v_count :=2;
else if v_action_code='X' then
v_count :=3;
else if v_action_code='T' then
v_count :=4;
else if v_action_code='U' then
v_count :=5;
else if v_action_code='X1' then
v_count :=6;
else if v_action_code= null then
v_count :=3;
end if;
end if;
end if;
end if;
end if;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_LAN_DIRECT_FINISH_FLAG
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_LAN_DIRECT_FINISH_FLAG"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  direct_finish_flag varchar(100);
  action_code varchar(100);
  new_crm_product_code varchar(100);
  old_crm_product_code varchar(100);
  v_p_cartridge_id number(6);
  expected_date varchar(100);
begin
v_count := 0;
select cartridge_id into v_p_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;

--direct_finish_flag :=om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_lan_node_value('order_no',direct_finish_flag));
begin
direct_finish_flag := GET_V_NODE_TEXT('lan.direct_finish_flag',v_order_seq_id,v_coord_set_id);

if direct_finish_flag is null then
   direct_finish_flag := 'No';
end if;
exception
    when others then
    direct_finish_flag := 'No';
end ;

if direct_finish_flag is null then
   direct_finish_flag := 'No';
end if;
action_code:= GET_V_NODE_TEXT('lan.action_code',v_order_seq_id,v_coord_set_id);

begin
     expected_date:= GET_V_NODE_TEXT('lan.expected_date',v_order_seq_id,v_coord_set_id);
exception
    when others then
    expected_date := null;
end ;


begin
     new_crm_product_code:= GET_V_NODE_TEXT('lan.new.crm_product_code',v_order_seq_id,v_coord_set_id);
exception
    when others then
    new_crm_product_code := '';
end ;

begin
    old_crm_product_code:= GET_V_NODE_TEXT('lan.old.crm_product_code',v_order_seq_id,v_coord_set_id);
exception
    when others then
    old_crm_product_code := '';
end ;

if direct_finish_flag = 'Yes' then
   v_count :=1;
else
    if action_code = 'X' then
       if new_crm_product_code in ('453') and old_crm_product_code in ('138','139','140','141','142','143','144') then
          v_count :=1;
       end if;
       if new_crm_product_code in ('151','209','153') and expected_date is not null   then
          v_count :=1;
       end if;
    end if;
    if action_code = 'Z' then
       if new_crm_product_code in ('151','209','153') and expected_date is not null   then
          v_count :=1;
       end if;
    end if;

end if;
return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_LAN_EPON_TEST_DISTRICT
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_LAN_EPON_TEST_DISTRICT"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  bureau_code_new varchar(100);
  bureau_code_old varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
bureau_code_new :=GET_V_NODE_TEXT('lan.new.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 bureau_code_new:=null;
end;
begin
bureau_code_old :=GET_V_NODE_TEXT('lan.old.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 bureau_code_old:=null;
end;

if bureau_code_new='8' or bureau_code_new='e' or bureau_code_old='8' or bureau_code_old='e'then
v_count :=1;
else if bureau_code_new='7' or bureau_code_old='7' then
v_count :=2;
else if bureau_code_new='6' or bureau_code_old='6' or bureau_code_new='i' or bureau_code_old='i' or bureau_code_new='f' or bureau_code_old='f' then
v_count :=3;
else if bureau_code_new='1' or bureau_code_old='1' or bureau_code_new='2' or bureau_code_old='2' or bureau_code_new='4' or bureau_code_old='4' or bureau_code_new='h' or bureau_code_old='h' then
v_count :=4;
else if bureau_code_new=null or bureau_code_old=null then
v_count :=0;
else
v_count :=5;
end if;
end if;
end if;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_LAN_VPC_IS_NULL
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_LAN_VPC_IS_NULL"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  vpc varchar(100);
  v_p_cartridge_id number(6);
begin
v_count := 1;
select cartridge_id into v_p_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;

begin
vpc := GET_V_NODE_TEXT('lan.new.fusion_line_tianyi_cloud.VPC-ID_Number',v_order_seq_id,v_coord_set_id);

if vpc is null then
   v_count := 0;
end if;
exception
    when others then
    v_count := 0;
end ;

return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_OLD_GROUP_SDH_CANCEL
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_OLD_GROUP_SDH_CANCEL"
(  v_order_seq_id     in  number,
  v_coord_set_id     in  number)
  return number
is
  v_action_code varchar(100);
  v_loadtype varchar(100);
  v_crm_product_code varchar(100);
BEGIN
  v_action_code :=get_v_node_text('sdh.action_code',v_order_seq_id,v_coord_set_id);
  v_loadtype:=get_v_node_text('sdh.loadtype',v_order_seq_id,v_coord_set_id);
  v_crm_product_code:=get_v_node_text('sdh.old.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);

  IF v_action_code='C' AND v_loadtype in ('集团SDH','集团MSTP') AND v_crm_product_code IN ('270','272') THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
end;

/

-- ----------------------------
-- Function structure for CHECK_PBX_DELAY
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_PBX_DELAY"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
  v_group_member_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
if v_order_seq_id = 438722 then
return 1;
end if;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
v_p_line_item_ID:=get_v_node_text('pbx.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

v_group_member_count :=9999999;

begin
v_group_member_count:= to_number(get_v_node_text('pbx.group_member_count',v_order_seq_id,v_coord_set_id));
if v_group_member_count is null then
   v_group_member_count :=0;
end if;
EXCEPTION
WHEN  NO_DATA_FOUND THEN
v_group_member_count :=0;
WHEN OTHERS THEN
v_group_member_count :=9999999;
end;


select count(*) into v_count from P6_Sync_Request
where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version and
SYNC_LINE_ITEM_ID=(v_p_line_item_ID) and event_id='pbx_trunk_notify_group' ;

if (to_char(v_count)>=v_group_member_count) then
   v_count :=1;
else
   v_count :=0;
end if;


return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_PBX_GROUP
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_PBX_GROUP"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  sub_action_code varchar(100);
  action_code varchar(100);
  group_service_id varchar(100);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
group_service_id :=get_v_node_text('pots.new.service_info.group_service_id',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 group_service_id:=null;
end;

begin
sub_action_code :=get_v_node_text('pots.sub_action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 sub_action_code:=null;
end;

begin
action_code :=get_v_node_text('pots.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 action_code:=null;
end;


if (group_service_id='null') and (action_code='Z') then
v_count :=1;
end if;
--PBX分机新装

if (group_service_id='null') and (sub_action_code='V01') then
v_count :=1;
end if;
--PBX分机入群

if (action_code='Y') then
v_count :=1;
end if;
--PBX分机移机

--insert into tdelay(orderseqid,coord_set_id,tcount) values(v_order_seq_id,v_coord_set_id,v_count);
--commit;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_PBX_POTS_DELAY
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_PBX_POTS_DELAY"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
  v_group_member_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin


select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
v_p_line_item_ID:=get_v_node_text('pbx.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

begin
v_group_member_count:= to_number(get_v_node_text('pbx.group_member_count',v_order_seq_id,v_coord_set_id));
if v_group_member_count is null then
   v_group_member_count :=0;
end if;
EXCEPTION
WHEN  NO_DATA_FOUND THEN
v_group_member_count :=0;
WHEN OTHERS THEN
v_group_member_count :=9999999;
end;


select count(*) into v_count from P6_Sync_Request
where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version and
--SYNC_LINE_ITEM_ID=(v_p_line_item_ID) and sync_event_id='pots_get_create_service_result' ;
SYNC_LINE_ITEM_ID=(v_p_line_item_ID) and sync_event_id in  ('pots_get_create_service_result','pots_get_service_modify_result','pbx_get_assign_result') ;

if (to_char(v_count)>=v_group_member_count) then
   v_count :=1;
else
   v_count :=0;
end if;


return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_POTS_ACTION_TYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_POTS_ACTION_TYPE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_action_code varchar(100);
  v_sub_action_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
v_action_code :=GET_V_NODE_TEXT('pots.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 v_action_code:=null;
end;

begin
v_sub_action_code :=GET_V_NODE_TEXT('pots.sub_action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 v_sub_action_code:=null;
end;

if v_action_code='Z' then
v_count :=1;
else if v_action_code='C' then
v_count :=2;
else if v_action_code='X' then
v_count :=3;
else if v_action_code='J1' then
v_count :=4;
else if v_action_code='Q1' then
v_count :=5;
else if v_action_code='Y' then
v_count :=6;
else if v_action_code='T' then
v_count :=7;
else if v_action_code='U' then
v_count :=8;
else if v_action_code='V' then
v_count :=9;
else if v_action_code='X1' and v_sub_action_code='X101' then
v_count :=10;
else if v_action_code='X1' and v_sub_action_code='X102'  then
v_count :=11;
else if v_action_code= null then
v_count :=3;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_POTS_EPON_TEST_DISTRICT
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_POTS_EPON_TEST_DISTRICT"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  new_bureau_code varchar(100);
  old_bureau_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
new_bureau_code :=get_v_node_text('pots.new.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 new_bureau_code:=null;
end;
begin
old_bureau_code :=get_v_node_text('pots.old.inventory_info.bureau_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 old_bureau_code:=null;
end;

if new_bureau_code='8' or new_bureau_code='e' or old_bureau_code='8' or old_bureau_code='e' or new_bureau_code='7' or old_bureau_code='7' then
v_count :=1;
else if new_bureau_code='6' or old_bureau_code='6' or new_bureau_code='i' or old_bureau_code='i' or new_bureau_code='f' or old_bureau_code='f' then
v_count :=2;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_POTS_GROUP
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_POTS_GROUP"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  wac_id varchar(100);
  ivpn_group_num varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
  process_type varchar(100);
  sub_action_code varchar(100);
  action_code varchar(100);
  is_wac varchar(100);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
wac_id :=get_v_node_text('pots.new.service_info.wac_id',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 wac_id:=null;
end;
begin
ivpn_group_num:=get_v_node_text('pots.new.service_info.ivpn_group_num',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 ivpn_group_num:=null;
end;

begin
process_type :=get_v_node_text('pots.depend_sales_order.process_type',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 process_type:=null;
end;

begin
sub_action_code :=get_v_node_text('pots.sub_action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 sub_action_code:=null;
end;

begin
action_code :=get_v_node_text('pots.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 action_code:=null;
end;

begin
is_wac :=get_v_node_text('pots.new.service_info.is_wac',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 is_wac:=null;
end;

if ivpn_group_num is null and wac_id is null and (process_type='CENTREX-J') and (action_code='J1') and (is_wac='0')then
v_count :=1;
end if;
--WAC新装，Centrex入群，Centrex分机入WAC

if ivpn_group_num is null and wac_id is null and (process_type='CENTREX-J') and (sub_action_code='V01') and (is_wac='0')then
v_count :=1;
end if;
--WAC新装，Centrex入群，Centrex直改中

if ivpn_group_num is null and wac_id is null and (process_type='CENTREX-J') and (action_code='Z') and (is_wac='0')then
v_count :=1;
end if;
--WAC新装，Centrex入群，Centrex新装

--insert into tdelay(orderseqid,coord_set_id,tcount) values(v_order_seq_id,v_coord_set_id,v_count);
--commit;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_QQY_ADSL
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_QQY_ADSL"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_id varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=get_v_node_text('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=get_v_node_text('sales_order.version',v_order_seq_id,v_coord_set_id);
v_p_line_item_ID:=get_v_node_text('pbx.line_item.line_item_no',v_order_seq_id,v_coord_set_id);

select count(*) into v_count from p6_task_event
where CRM_ORDER_ID=v_p_sales_order_no and CRM_ORDER_VERSION=v_p_version and
LINE_ITEM_ID=v_p_line_item_id and event_id ='adsl_get_new_res_prcing_result';
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SDH_JT_ZJ_NO_WORK
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SDH_JT_ZJ_NO_WORK"
(  v_order_seq_id     in  NUMBER,
  v_coord_set_id     in  NUMBER)
  return number
is
  v_action_code varchar(100);
  v_need_local_allocation varchar(100);
  v_crm_product_code varchar(100);
BEGIN
  v_action_code :=get_v_node_text('sdh.action_code',v_order_seq_id,v_coord_set_id);
  v_crm_product_code:=get_v_node_text('sdh.new.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
  IF v_crm_product_code IS NULL THEN
    v_crm_product_code:=get_v_node_text('sdh.old.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
  END IF;
  
  IF v_action_code='C' THEN
    v_need_local_allocation:=get_v_node_text('sdh.old.service_info.need_local_allocation',v_order_seq_id,v_coord_set_id);
  ELSE
    v_need_local_allocation:=get_v_node_text('sdh.new.service_info.need_local_allocation',v_order_seq_id,v_coord_set_id);
  END IF;

  IF v_crm_product_code IN ('ZJ001','ZJ002','ZJ003','ZJ004','ZJ005','ZJ006','ZJ007','ZJ008','ZJ009','ZJ010','ZJ011','ZJ012','ZJ013','ZJ014','ZJ015','ZJ001SJ','ZJ009SJ','ZJ010SJ','ZJ011SJ','ZJ012SJ') 
     AND v_need_local_allocation='否'
  THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
end;
/

-- ----------------------------
-- Function structure for CHECK_SDH_START_RENT_LOCAL
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SDH_START_RENT_LOCAL"
(  v_order_seq_id     in  NUMBER,
  v_coord_set_id     in  NUMBER)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_id varchar(15);
BEGIN
  v_p_sales_order_no := GET_V_NODE_TEXT('sales_order.sales_order_no', v_order_seq_id, v_coord_set_id);
  --v_p_version:= GET_V_NODE_TEXT('sales_order.version', v_order_seq_id, v_coord_set_id);
  --v_p_line_item_id:= GET_V_NODE_TEXT('sdh.line_item.line_item_id', v_order_seq_id, v_coord_set_id);

  select count(*) into v_count from crm_start_charge t
  where t.crm_order_number=v_p_sales_order_no
  /*and t.crm_version=v_p_version*/
  /*and t.crm_line_id=v_p_line_item_id*/;

  return v_count;
end;

/

-- ----------------------------
-- Function structure for CHECK_SDH_TEST_NOTE
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SDH_TEST_NOTE"
(  v_order_seq_id     in  NUMBER,
  v_coord_set_id     in  NUMBER)
  return number
is
  v_count number;

  v_custorderid csb_notice_info.custorderid%type;
  v_dispatchorderno varchar(100);
  v_prodinstid varchar(100);
  v_productitemid varchar(100);
  v_workorderid varchar(100);
BEGIN
  v_custorderid := GET_V_NODE_TEXT('jt_sales_order.cust_order_id', v_order_seq_id, v_coord_set_id);--客户订单标识
  v_dispatchorderno := GET_V_NODE_TEXT('jt_sales_order.dispatch_order_no', v_order_seq_id, v_coord_set_id);--调度单流水号
  v_prodinstid := GET_V_NODE_TEXT('jt_sales_order.prod_inst_id', v_order_seq_id, v_coord_set_id);--产品实例标识
  --v_productitemid := GET_V_NODE_TEXT('jt_sales_order.product_item_id', v_order_seq_id, v_coord_set_id);--产品订单项标识
  v_workorderid := GET_V_NODE_TEXT('jt_sales_order.work_order_id', v_order_seq_id, v_coord_set_id);--集团工单ID

  select count(*) into v_count from csb_notice_info t
  where t.custorderid=v_custorderid
  and t.dispatchorderno=v_dispatchorderno
  and t.prodinstid=v_prodinstid
  --and t.productitemid=v_productitemid
  and t.workorderid=v_workorderid
  and t.statustype='2011102001';

  return v_count;
end;

/

-- ----------------------------
-- Function structure for CHECK_SDH_WHOLE_COMPLETE
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SDH_WHOLE_COMPLETE"
(  v_order_seq_id     in  NUMBER,
  v_coord_set_id     in  NUMBER)
  return number
is
  v_count number;

  v_custorderid csb_notice_info.custorderid%type;
  v_dispatchorderno varchar(100);
  v_prodinstid varchar(100);
  v_productitemid varchar(100);
  v_workorderid varchar(100);
BEGIN
  IF v_order_seq_id IN (6025806) THEN
     RETURN 1;
  END IF;

  v_custorderid := GET_V_NODE_TEXT('jt_sales_order.cust_order_id', v_order_seq_id, v_coord_set_id);--客户订单标识
  v_dispatchorderno := GET_V_NODE_TEXT('jt_sales_order.dispatch_order_no', v_order_seq_id, v_coord_set_id);--调度单流水号
  v_prodinstid := GET_V_NODE_TEXT('jt_sales_order.prod_inst_id', v_order_seq_id, v_coord_set_id);--产品实例标识
  --v_productitemid := GET_V_NODE_TEXT('jt_sales_order.product_item_id', v_order_seq_id, v_coord_set_id);--产品订单项标识
  v_workorderid := GET_V_NODE_TEXT('jt_sales_order.work_order_id', v_order_seq_id, v_coord_set_id);--集团工单ID

  select count(*) into v_count from csb_notice_info t
  where t.custorderid=v_custorderid
  and t.dispatchorderno=v_dispatchorderno
  and t.prodinstid=v_prodinstid
  --and t.productitemid=v_productitemid
  and t.workorderid=v_workorderid
  and t.statustype='2011102002';

  return v_count;
end;

/

-- ----------------------------
-- Function structure for CHECK_SP_ONLINE_NEW
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_ONLINE_NEW"
( v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  action_code varchar(100);
  new_crm_product_code varchar(100);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_p_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
action_code:= GET_V_NODE_TEXT('lan.action_code',v_order_seq_id,v_coord_set_id);
begin
    new_crm_product_code:= GET_V_NODE_TEXT('lan.new.crm_product_code',v_order_seq_id,v_coord_set_id);
exception
    when others then
    new_crm_product_code := '';
end ;
 if new_crm_product_code in ('482','521','181','622') then
          if action_code = 'Z' then
            v_count :=1;
          else
            if action_code = 'C' then
            v_count :=2;
          else
            if action_code = 'X' then
            v_count :=3;
          ELSE
            IF action_code = 'T' THEN
              v_count :=4;
            ELSE
            IF action_code = 'U' THEN
              v_count :=5;
          end if;
          end if;
          end if;
          end if;
          end if;
    end if;
return v_count;

end;
/

-- ----------------------------
-- Function structure for CHECK_SP_PRODUCT_ACTION_TYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_SP_PRODUCT_ACTION_TYPE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return number
is
  v_count number;
  v_action_code varchar(100);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
v_count := 0;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;
begin
v_action_code :=GET_V_NODE_TEXT('sp_product_info.action_code',v_order_seq_id,v_coord_set_id);
EXCEPTION
WHEN OTHERS THEN
 v_action_code:=null;
end;

if v_action_code='Z' then
v_count :=1;
else if v_action_code='C' then
v_count :=2;
else if v_action_code='X' then
v_count :=3;
else if v_action_code='J' then
v_count :=4;
else if v_action_code='Q' then
v_count :=5;
else if v_action_code='Y' then
v_count :=6;
else if v_action_code='M' then
v_count :=7;
else if v_action_code= null then
v_count :=3;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;

return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SP_PRODUCT_LD
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_PRODUCT_LD"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
--insert into kfc_temp(ORDER_SEQ_ID,COORD_SET_ID,CREATE_TIME) values (v_order_seq_id,v_coord_set_id,sysdate);
--commit;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT('sp_product_info.line_item.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from crm_agreement_affirm
where CRM_ORDER_NUMBER=v_p_sales_order_no /*and CRM_VERSION=v_p_version*/ and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) and USER_ID in ('B', 'C');
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SP_PRODUCT_LOCAL
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_PRODUCT_LOCAL"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  --v_p_version varchar(100);
  v_p_line_item_no varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
--v_p_version:=GET_V_NODE_TEXT('sales_order.version',v_order_seq_id,v_coord_set_id);

v_p_line_item_no:=GET_V_NODE_TEXT('sp_product_info.line_item.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from crm_agreement_affirm
where CRM_ORDER_NUMBER=v_p_sales_order_no /*and CRM_VERSION=v_p_version*/ and
CRM_LINE_NUMBER=to_number(v_p_line_item_no) and USER_ID in ('A','C');
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SP_START_RENT_LOCAL
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_START_RENT_LOCAL"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  --v_p_version varchar(100);
  --v_p_line_item_id varchar(15);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin
--insert into kfc_temp(ORDER_SEQ_ID,COORD_SET_ID,CREATE_TIME) values (v_order_seq_id,v_coord_set_id,sysdate);
commit;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=GET_V_NODE_TEXT('sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);

--v_p_version:=om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_sp_product_node_value_fee('version_no',v_p_cartridge_id));

--v_p_line_item_id:=om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_sp_product_node_value_fee('line_item_id',v_p_cartridge_id),v_coord_set_id);

select count(*) into v_count from crm_start_charge t
where t.crm_order_number=v_p_sales_order_no /*and t.crm_version=v_p_version and
t.crm_line_id=v_p_line_item_id*/;
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SP_TEST_NOTE
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_TEST_NOTE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);

  v_custorderid csb_notice_info.custorderid%type;
  v_dispatchorderno varchar(100);
  v_prodinstid varchar(100);
  --v_productitemid varchar(100);
  v_workorderid varchar(100);
begin
--insert into kfc_temp(ORDER_SEQ_ID,COORD_SET_ID,CREATE_TIME) values (v_order_seq_id,v_coord_set_id,sysdate);
--commit;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_custorderid :=GET_V_NODE_TEXT('jt_sales_order.cust_order_id',v_order_seq_id,v_coord_set_id);
v_dispatchorderno :=GET_V_NODE_TEXT('jt_sales_order.dispatch_order_no',v_order_seq_id,v_coord_set_id);
v_prodinstid :=GET_V_NODE_TEXT('jt_sales_order.prod_inst_id',v_order_seq_id,v_coord_set_id);
v_workorderid :=GET_V_NODE_TEXT('jt_sales_order.work_order_id',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from csb_notice_info t
where t.custorderid=v_custorderid and t.dispatchorderno=v_dispatchorderno and t.prodinstid=v_prodinstid
/*and t.productitemid=v_productitemid*/ and t.workorderid=v_workorderid and t.statustype='2011102001';
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_SP_WHOLE_COMPLETE
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."CHECK_SP_WHOLE_COMPLETE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);

  v_custorderid csb_notice_info.custorderid%type;
  v_dispatchorderno varchar(100);
  v_prodinstid varchar(100);
  --v_productitemid varchar(100);
  v_workorderid varchar(100);
begin
--insert into kfc_temp(ORDER_SEQ_ID,COORD_SET_ID,CREATE_TIME) values (v_order_seq_id,v_coord_set_id,sysdate);
--commit;
select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_custorderid :=GET_V_NODE_TEXT('jt_sales_order.cust_order_id',v_order_seq_id,v_coord_set_id);
v_dispatchorderno:=GET_V_NODE_TEXT('jt_sales_order.dispatch_order_no',v_order_seq_id,v_coord_set_id);

v_prodinstid:=GET_V_NODE_TEXT('jt_sales_order.prod_inst_id',v_order_seq_id,v_coord_set_id);
v_workorderid:=GET_V_NODE_TEXT('jt_sales_order.work_order_id',v_order_seq_id,v_coord_set_id);

select count(*) into v_count from csb_notice_info t
where t.custorderid=v_custorderid and t.dispatchorderno=v_dispatchorderno and t.prodinstid=v_prodinstid
/*and t.productitemid=v_productitemid*/ and t.workorderid=v_workorderid and t.statustype='2011102002';
return v_count;
end;
/

-- ----------------------------
-- Function structure for CHECK_VPDN_G_WORK
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."CHECK_VPDN_G_WORK"
( v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_count number;
  vpdn_atrribute varchar(100);
  if_batch_imsi_and_domain varchar(100);
  v_p_cartridge_id number(6);
  user_in_the_province varchar(100);
begin
v_count := 1;
select cartridge_id into v_p_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
begin
if_batch_imsi_and_domain:= GET_V_NODE_TEXT('vpdn_g.new.service_info.if_batch_imsi_and_domain',v_order_seq_id,v_coord_set_id);
exception
    when others then
    if_batch_imsi_and_domain := '0';
end;
begin
    vpdn_atrribute:= GET_V_NODE_TEXT('vpdn_g.new.service_info.vpdn_atrribute',v_order_seq_id,v_coord_set_id);
exception
    when others then
    vpdn_atrribute := '1';
end ;
begin
    user_in_the_province:= GET_V_NODE_TEXT('vpdn_g.new.service_info.user_in_the_province',v_order_seq_id,v_coord_set_id);
exception
    when others then
    user_in_the_province := '0';
end ;
 if user_in_the_province in ('1') then
    v_count :=0;
 else
    if vpdn_atrribute in ('0') and if_batch_imsi_and_domain in ('1') then
    v_count :=0;
    end if;
 end if;
return v_count;

end;
/

-- ----------------------------
-- Function structure for COUNT_ORDER_NODES
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."COUNT_ORDER_NODES"(V_NODE_PATH    IN VARCHAR2,
                                             V_ORDER_SEQ_ID IN NUMBER,
                                             V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX   OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;

  V_NODE_EXISTS NUMBER;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;

    V_NODE_EXISTS:=1;
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = 'T'
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      ELSE
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      END IF;
    END LOOP;
    --v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NODE_EXISTS := 0;
  END;

  RETURN V_NODE_EXISTS;
END;

/

-- ----------------------------
-- Function structure for EXISTS_OMS_NODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."EXISTS_OMS_NODE"(V_NODE_PATH    IN VARCHAR2,
                                             V_ORDER_SEQ_ID IN NUMBER,
                                             V_COORD_SET_ID IN NUMBER)
  RETURN VARCHAR2 IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX   OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  
  V_EXISTS VARCHAR2(1) := 'N';
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
  
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = 'T'
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
        
        IF I=CSTR.COUNT THEN
           V_EXISTS:='Y';
           RETURN V_EXISTS;
        END IF;
      ELSE
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
        
        IF I=CSTR.COUNT THEN
           V_EXISTS:='Y';
           RETURN V_EXISTS;
        END IF;
      END IF;
    END LOOP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_EXISTS := 'N';
  END;

  RETURN V_EXISTS;
END;
/

-- ----------------------------
-- Function structure for GET_ACTION_CODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_ACTION_CODE"(
      v_order_seq_id IN VARCHAR2)
    RETURN VARCHAR2
  IS
    v_order_node_id om_order_hier.order_node_id%type;
    v_action_code VARCHAR(100);
  BEGIN
    SELECT tmp.order_node_id
    INTO v_order_node_id
    FROM om_order_template tmp,
      om_order_type typ,
      om_order_data_dictionary dict,
      om_order_hier hier,
      om_cartridge c,
      om_order_header h
    WHERE tmp.order_type_id           = typ.order_type_id
    AND hier.data_dictionary_id       = dict.data_dictionary_id(+)
    AND hier.order_node_id(+)         = tmp.order_node_id
    AND dict.data_dictionary_mnemonic = 'action_code'
    AND typ.order_type_description   != '��'
    AND tmp.cartridge_id              = c.cartridge_id(+)
    AND h.order_seq_id                = v_order_seq_id
    AND h.order_type_id               = tmp.order_type_id(+)
    ORDER BY c.namespace_description,
      typ.order_type_description ;
    BEGIN
      v_action_code :=om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
      SELECT look.code_description
      INTO v_action_code
      FROM om_order_hier hier,
        om_lookup look
      WHERE hier.order_node_id    = v_order_node_id
      AND hier.data_dictionary_id = look.data_dictionary_id(+)
      AND look.code               = v_action_code;
    EXCEPTION
    WHEN OTHERS THEN
      v_action_code:=NULL;
    END;
    RETURN v_action_code;
  END;
/

-- ----------------------------
-- Function structure for GET_ADDSERV_CRM_PRODUCT_CODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_ADDSERV_CRM_PRODUCT_CODE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return varchar2
is

  v_cartridge_id number(6);
  v_crm_product_code varchar2(20);
begin
  select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
 -- v_crm_product_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_addserv_node_value('crm_product_code',v_cartridge_id),null);
v_crm_product_code :=GET_V_NODE_TEXT('addserv.new.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
  return v_crm_product_code;
end;
/

-- ----------------------------
-- Function structure for GET_ADDSERV_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_ADDSERV_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
BEGIN
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_addserv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_addserv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='addserv';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_addserv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_addserv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='action_code' then
     ms(1):='addserv';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='crm_product_code' then
     ms(1):='addserv';
     ms(2):='new';
     ms(3):='service_info';
     ms(4):='crm_product_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_addserv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
  end if;

--  select count(*) as bfee from ADSL_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_ADSL_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_ADSL_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin


  if input_value='new_bureau_code' then
     ms(1):='adsl';
     ms(2):='new';
     ms(3):='inventory_info';
     ms(4):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='old_bureau_code' then
     ms(1):='adsl';
     ms(2):='old';
     ms(3):='inventory_info';
     ms(4):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

 if input_value='action_code' then
     ms(1):='adsl';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

   if input_value='sub_action_code' then
     ms(1):='adsl';
     ms(2):='sub_action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='adsl_ims_hm_work_judge'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='adsl_ims_hm_work_judge'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;

--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

   if input_value='service_id' then
     ms(1):='adsl';
     ms(2):='service_id';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_adsl_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;

--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--  select count(*) as bfee from ADSL_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_BIZNV_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_BIZNV_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
      t:='';
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_biznv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_biznv_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

 if input_value='action_code' then
    ms(1):='biznv';
    ms(2):='action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='biznv';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_biznv_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

--  select count(*) as bfee from BIZNV_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_BST_NODE_VALUE_FEE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_BST_NODE_VALUE_FEE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='bst';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='action_code' then
     ms(1):='bst';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='bst_test_group_query...bst_zz_crm'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--  select count(*) as bfee from BST_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_BUREAU_DESC
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_BUREAU_DESC" (
   vi_bureau_id in VARCHAR2
) return VARCHAR2
is
  bureau_desc VARCHAR2(200);
begin
BEGIN
   bureau_desc:='';
   select t.bureau_name INTO bureau_desc from wp_org_bureau t WHERE t.bureau_id=vi_bureau_id;
EXCEPTION
  WHEN OTHERS THEN
  bureau_desc := '';
END;

  return(bureau_desc);
end GET_BUREAU_DESC;
/

-- ----------------------------
-- Function structure for GET_CENTREX_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_CENTREX_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='centrex_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='centrex_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='centrex';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;


  if input_value='d_line_item_no' then
    ms(1):='centrex';
    ms(2):='depend_sales_order';
    ms(3):='line_item_id';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;


--centrex.group_member_count
  if input_value='group_member_count' then
    ms(1):='centrex';
    ms(2):='group_member_count';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
  end if;

  if input_value='action_code' then
    ms(1):='centrex';
    ms(2):='action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='centrex_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
  end if;

  return v_order_node_id;
end;
/

-- ----------------------------
-- Function structure for GET_CRBTG_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_CRBTG_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='action_code' then
     ms(1):='crbtg';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_crbtg_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_crbtg_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='sub_action_code' then
    ms(1):='crbtg';
    ms(2):='sub_action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_crbtg_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_crbtg_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_version :=(v_order_node_id);
  end if;


--  select count(*) as bfee from CRBTG_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_sales_order_no and CRM_VERSION=:v_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_LAN_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_LAN_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='direct_finish_flag' then
     ms(1):='lan';
     ms(2):='direct_finish_flag';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='action_code' then
     ms(1):='lan';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='new_crm_product_code' then
     ms(1):='lan';
     ms(2):='new';
     ms(3):='crm_product_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='old_crm_product_code' then
     ms(1):='lan';
     ms(2):='old';
     ms(3):='crm_product_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='lan_order_view'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_lan_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_lan_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='lan';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_lan_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_lan_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='expected_date' then
    ms(1):='lan';
    ms(2):='expected_date';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='lan_order_view'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='lan_order_view'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='bureau_code_new' then
     ms(1):='lan';
     ms(2):='new';
     ms(3):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

    if input_value='bureau_code_old' then
     ms(1):='lan';
     ms(2):='old';
     ms(3):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;
--  select count(*) as bfee from LAN_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;



--- kuan dai jie ru fang shi


    if input_value='broadband_access_type' then
     ms(1):='lan';
     ms(2):='new';
     ms(3):='broadband_access_type';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_lan_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_NODE_COUNT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_NODE_COUNT"(V_NODE_PATH    IN VARCHAR2,
                                            V_ORDER_SEQ_ID IN NUMBER,
                                            V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_NODE_TYPE        OM_ORDER_INSTANCE.ORDER_NODE_TYPE%TYPE;

  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE := 0;
  V_P_NODE_TYPE        OM_ORDER_INSTANCE.ORDER_NODE_TYPE%TYPE := 'T';

  V_NODE_COUNT NUMBER := 0;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
  
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = CSTR.COUNT THEN
        SELECT COUNT(*)
          INTO V_NODE_COUNT
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = V_P_NODE_TYPE
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        RETURN V_NODE_COUNT;
      ELSE
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_TYPE
          INTO V_ORDER_NODE_INDEX, V_NODE_TYPE
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = V_P_NODE_TYPE
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_NODE_TYPE        := V_NODE_TYPE;
      END IF;
    END LOOP;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NODE_COUNT := 0;
  END;

  RETURN V_NODE_COUNT;
END;
/

-- ----------------------------
-- Function structure for GET_NODE_ID
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_NODE_ID"(V_CARTRIDGE_NAME IN VARCHAR2,
                                         V_NODE_PATH    IN VARCHAR2)
  RETURN NUMBER IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_CARTRIDGE_ID    OM_ORDER_HIER.CARTRIDGE_ID%TYPE;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
    
    SELECT C.CARTRIDGE_ID INTO V_CARTRIDGE_ID FROM OM_CARTRIDGE C WHERE C.NAMESPACE_MNEMONIC=V_CARTRIDGE_NAME;

    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        SELECT H.ORDER_NODE_ID
          INTO V_ORDER_NODE_ID
          FROM OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE H.CARTRIDGE_ID = V_CARTRIDGE_ID
           AND H.PARENT_NODE_TYPE = 'T'
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_ID := V_ORDER_NODE_ID;
      ELSE
        V_ORDER_NODE_ID := NULL;
        SELECT H.ORDER_NODE_ID
          INTO V_ORDER_NODE_ID
          FROM OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE H.CARTRIDGE_ID = V_CARTRIDGE_ID
           AND H.PARENT_NODE_ID = V_P_ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      END IF;
    END LOOP;
    --v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_ORDER_NODE_ID := -999;
  END;

  RETURN V_ORDER_NODE_ID;
END;

/

-- ----------------------------
-- Function structure for GET_NONPHS_ORD_STATE_ID
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_NONPHS_ORD_STATE_ID"(V_ORDER_SEQ_ID IN NUMBER,
                                                     V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  V_RESULT NUMBER := -1;

  V_COUNT  NUMBER := 0;
  V_COUNT2 NUMBER := 0;

  v_nonphs_cartridge_id number(6);
  v_nonphs_cartridge_name VARCHAR2(50);

  v_nonphs_type_id number(6);
  v_nonphs_type_name VARCHAR2(50);

  V_DEPEND_NONPHS_CRM_NO VARCHAR2(100);
  v_syn_nonphs_archive VARCHAR2(10);
BEGIN
  BEGIN
    v_syn_nonphs_archive := get_v_node_text('sdh.syn_nonphs_archive',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_nonphs_archive IS NULL OR v_syn_nonphs_archive!='0' THEN
       RETURN 1;
    END IF;

    V_DEPEND_NONPHS_CRM_NO := get_v_node_text('sdh.depend_nonphs_crm_order_no',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF V_DEPEND_NONPHS_CRM_NO IS NULL THEN
       RETURN 0;--1
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM OM_ORDER_HEADER h,om_cartridge c,om_order_type t
     WHERE h.REFERENCE_NUMBER = V_DEPEND_NONPHS_CRM_NO AND c.cartridge_id=h.cartridge_id AND c.namespace_mnemonic='sp_product'
       AND t.order_type_id=h.order_type_id AND t.order_type_mnemonic IN ('did_crm','b30_d_crm');

    IF V_COUNT = 0 THEN
      V_RESULT := 0;
    ELSE
      SELECT COUNT(*) INTO V_COUNT2 FROM OM_ORDER_HEADER h,om_cartridge c,om_order_type t
        WHERE h.REFERENCE_NUMBER = V_DEPEND_NONPHS_CRM_NO AND c.cartridge_id=h.cartridge_id AND c.namespace_mnemonic='sp_product'
          AND t.order_type_id=h.order_type_id AND t.order_type_mnemonic IN ('did_crm','b30_d_crm') AND h.ord_state_id=7;

      IF V_COUNT2 = V_COUNT THEN
        V_RESULT := 1;
      ELSE
        V_RESULT := 0;
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      V_RESULT := -1;
  END;

  RETURN V_RESULT;
END;
/

-- ----------------------------
-- Function structure for GET_OMS_NODE_TEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_OMS_NODE_TEXT"(V_NODE_PATH    IN VARCHAR2,
                                                   V_ORDER_SEQ_ID IN NUMBER,
                                                   V_COORD_SET_ID IN NUMBER)
  RETURN VARCHAR2 IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX   OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;

  V_NODE_TEXT OM_ORDER_INSTANCE.NODE_VALUE_TEXT%TYPE := NULL;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
  
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        V_NODE_TEXT := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.NODE_VALUE_TEXT
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_TEXT
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = 'T'
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      ELSE
        V_NODE_TEXT := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.NODE_VALUE_TEXT
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_TEXT
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      END IF;
    END LOOP;
    --v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NODE_TEXT := NULL;
  END;

  RETURN V_NODE_TEXT;
END GET_OMS_NODE_TEXT;
/

-- ----------------------------
-- Function structure for GET_ORDER_CREATE_DATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_ORDER_CREATE_DATE"(
      v_order_seq_id IN VARCHAR2,
      v_order_date IN VARCHAR2)
    RETURN NUMBER
  IS
    v_ord_creation_date DATE;
  --  v_ord_date DATE;
    v_count NUMBER;

  BEGIN
    v_count:=0;
    SELECT ord_creation_date
      INTO v_ord_creation_date
      FROM om_order_header
      WHERE order_seq_id    = v_order_seq_id;

      IF v_ord_creation_date>to_date(v_order_date,'yyyy-MM-dd HH24:mi:ss') THEN
      v_count:=1;
      END IF;
      RETURN v_count;
    EXCEPTION
    WHEN OTHERS THEN
      v_ord_creation_date:=NULL;
    RETURN v_count;
  END;
/

-- ----------------------------
-- Function structure for GET_PARAMETER_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_PARAMETER_VALUE"(a_param_name IN varchar2)
return VARCHAR2
RESULT_CACHE
RELIES_ON (om_parameter) IS
v_value varchar2(255);
BEGIN
select value into v_value
from
om_parameter
where
MNEMONIC=a_param_name;
return v_value;
end;
/

-- ----------------------------
-- Function structure for GET_PARAMETER_VALUE_DEFAULT
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."GET_PARAMETER_VALUE_DEFAULT"(
a_param_name varchar2,
a_default varchar2) return varchar2
RESULT_CACHE RELIES_ON (om_parameter)
is
v_value varchar2(1000);
begin
begin
select value into v_value
from om_parameter
where mnemonic = a_param_name;
exception when no_data_found then
v_value := a_default;
end;
return v_value;
end get_parameter_value_default;
/

-- ----------------------------
-- Function structure for GET_PBX_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_PBX_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='pbx_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='pbx_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='pbx';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;
  if input_value='group_member_count' then
    ms(1):='pbx';
    ms(2):='group_member_count';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='pbx_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='action_code' then
     ms(1):='pbx';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='pbx_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='pbx_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;
--  select count(*) as bfee from ADSLZ_CRM_BOOK_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_POTS_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_POTS_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin

  if input_value='action_code' then
     ms(1):='pots';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='sub_action_code' then
     ms(1):='pots';
     ms(2):='sub_action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='new_bureau_code' then
     ms(1):='pots';
     ms(2):='new';
     ms(3):='inventory_info';
     ms(4):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

  if input_value='old_bureau_code' then
     ms(1):='pots';
     ms(2):='old';
     ms(3):='inventory_info';
     ms(4):='bureau_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
  end if;

  if input_value='new_serv_tn' then
     ms(1):='pots';
     ms(2):='new';
     ms(3):='service_info';
     ms(4):='tn';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
  end if;

  if input_value='new_crm_product_code' then
     ms(1):='pots';
     ms(2):='new';
     ms(3):='service_info';
     ms(4):='crm_product_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
  end if;

  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_pots_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='pots';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='d_line_item_no' then
    ms(1):='pots';
    ms(2):='depend_sales_order';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_pots_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

--  select count(*) as bfee from ADSL_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_QQY_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_QQY_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qqy_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qqy_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qqy_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qqy_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

if input_value='action_code' then
     ms(1):='qqy';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qqy_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qqy_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='qqy';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qqy_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qqy_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

--  select count(*) as bfee from qqy_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_QXT_NODE_VALUE_FEE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_QXT_NODE_VALUE_FEE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qxt_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qxt_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='qxt';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

 if input_value='action_code' then
     ms(1):='qxt';
     ms(2):='action_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qxt_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_qxt_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='sub_action_code' then
    ms(1):='qxt';
    ms(2):='sub_action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_qxt_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_version :=(v_order_node_id);
  end if;
--  select count(*) as bfee from QXT_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_p_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for GET_SP_PROC_CRM_PROC_CODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_SP_PROC_CRM_PROC_CODE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return varchar2
IS
  --v_cartridge_id number(6);
  v_crm_product_code varchar2(20) := NULL;
begin
  --select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;

  --v_crm_product_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_sp_product_node_value('crm_product_code',v_cartridge_id));

  v_crm_product_code := get_v_node_text('sp_product_info.new.service_info.crm_product_code',v_order_seq_id,v_coord_set_id);
  return v_crm_product_code;
end;
/

-- ----------------------------
-- Function structure for GET_SP_PRODUCT_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_SP_PRODUCT_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  --t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_sp_product_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_sp_product_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='sp_product_info';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;


  if input_value='d_line_item_no' then
    ms(1):='sp_product_info';
    ms(2):='depend_sales_order';
    ms(3):='line_item_no';--ms(3):='line_item_id';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;


--centrex.group_member_count
  if input_value='group_member_count' then
    ms(1):='sp_product_info';
    ms(2):='group_member_count';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
  end if;

--centrex.tn_count
  if input_value='tn_count' then
    ms(1):='sp_product_info';
    ms(2):='tn_count';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
  end if;

  if input_value='action_code' then
    ms(1):='sp_product_info';
    ms(2):='action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_sp_product_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
  end if;

  if input_value='crm_product_code' then
     ms(1):='sp_product_info';
     ms(2):='new';
     ms(3):='service_info';
     ms(4):='crm_product_code';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_sp_product_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_sp_product_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
  end if;

  return v_order_node_id;
end;
/

-- ----------------------------
-- Function structure for GET_SUB_ACTION_CODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_SUB_ACTION_CODE"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2
)
  return VARCHAR2
is
  v_cartridge_id number(6);
  v_cartridge_mnemo VARCHAR2(50 CHAR);
  v_type_mnemo VARCHAR2(50 CHAR);
  sub_action_code VARCHAR2(100);
BEGIN
sub_action_code:='';

select h.cartridge_id,c.namespace_mnemonic,t.order_type_mnemonic into v_cartridge_id,v_cartridge_mnemo,v_type_mnemo from om_order_header h, om_cartridge c, om_order_type t where h.order_seq_id=v_order_seq_id AND c.cartridge_id=h.cartridge_id AND t.order_type_id=h.order_type_id;

BEGIN
   IF v_cartridge_mnemo='ADSL' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_adsl_node_value('sub_action_code',v_cartridge_id),NULL);

   ELSIF v_cartridge_mnemo='pots' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_pots_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='addserv' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_addserv_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='lan' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_lan_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='biznv' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_biznv_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='bst' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_bst_node_value_fee('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='centrex' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_centrex_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='crbtg' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_crbtg_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='pbx' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_pbx_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='qqy' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_qqy_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='qxt' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_qxt_node_value_fee('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='sp_product' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_sp_product_node_value('sub_action_code',v_cartridge_id),NULL);
   ELSIF v_cartridge_mnemo='vpdn' THEN
      sub_action_code := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,get_vpdn_p_node_value('sub_action_code',v_cartridge_id),NULL);
   END IF;
EXCEPTION
WHEN OTHERS THEN
 sub_action_code:='';
end;

return sub_action_code;
end;
/

-- ----------------------------
-- Function structure for GET_V_NODE_NUM
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_V_NODE_NUM"(V_NODE_PATH    IN VARCHAR2,
                                             V_ORDER_SEQ_ID IN NUMBER,
                                             V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX   OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;

  V_NODE_NUM OM_ORDER_INSTANCE.NODE_VALUE_NUM%TYPE := NULL;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
  
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        V_NODE_NUM := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.Node_Value_Num
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_NUM
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = 'T'
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      ELSE
        V_NODE_NUM := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.Node_Value_Num
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_NUM
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      END IF;
    END LOOP;
    --v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NODE_NUM := NULL;
  END;

  RETURN V_NODE_NUM;
END;
/

-- ----------------------------
-- Function structure for GET_V_NODE_TEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_V_NODE_TEXT"(V_NODE_PATH    IN VARCHAR2,
                                             V_ORDER_SEQ_ID IN NUMBER,
                                             V_COORD_SET_ID IN NUMBER)
  RETURN VARCHAR2 IS
  TYPE VARCHARARRAY IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  V_PATTERN VARCHAR2(5) := '.';

  LEN      NUMBER; --分割的数组元素个数
  I        NUMBER; --position位置
  RES      VARCHAR2(100);
  UP_LEN   NUMBER; --上一个位置
  DOWN_LEN NUMBER; --下一个位置

  CSTR VARCHARARRAY; --声明集合

  V_ORDER_NODE_INDEX   OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_P_ORDER_NODE_INDEX OM_ORDER_INSTANCE.ORDER_NODE_INDEX%TYPE;
  V_ORDER_NODE_ID      OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;
  V_P_ORDER_NODE_ID    OM_ORDER_INSTANCE.ORDER_NODE_ID%TYPE;

  V_NODE_TEXT OM_ORDER_INSTANCE.NODE_VALUE_TEXT%TYPE := NULL;
BEGIN
  BEGIN
    --判断有多少个','号，那么分割的集合元素个数是len+1
    LEN := LENGTH(V_NODE_PATH) -
           LENGTH(REPLACE(V_NODE_PATH, V_PATTERN, ''));
    LEN := NVL(LEN, 0); --防止输入如"1",","
    IF (LEN = 0) THEN
      CSTR(1) := V_NODE_PATH;
    ELSE
      FOR J IN 1 .. LEN + 1 LOOP
        --j是集合元素下标
        IF J = 1 THEN
          I   := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          RES := SUBSTR(V_NODE_PATH, 1, I - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN   := I;
          DOWN_LEN := I;
        ELSIF J < LEN + 1 THEN
          I        := INSTR(V_NODE_PATH, V_PATTERN, 1, J);
          DOWN_LEN := I;
          RES      := SUBSTR(V_NODE_PATH, UP_LEN + 1, DOWN_LEN - UP_LEN - 1);
          --cstr.extend(1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
          UP_LEN := I;
        ELSE
          RES := SUBSTR(V_NODE_PATH, DOWN_LEN + 1);
          RES := NVL(RES, ''); --防止输入"1,,,2", ","
          IF LENGTH(RES) > 0 THEN
            CSTR(CSTR.COUNT + 1) := TRIM(RES);
          END IF;
        END IF;
      END LOOP;
    END IF;
  
    FOR I IN 1 .. CSTR.COUNT LOOP
      IF I = 1 THEN
        V_NODE_TEXT := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.NODE_VALUE_TEXT
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_TEXT
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_TYPE = 'T'
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(1);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      ELSE
        V_NODE_TEXT := NULL;
        SELECT I.ORDER_NODE_INDEX, I.ORDER_NODE_ID, I.NODE_VALUE_TEXT
          INTO V_ORDER_NODE_INDEX, V_ORDER_NODE_ID, V_NODE_TEXT
          FROM OM_ORDER_INSTANCE        I,
               OM_ORDER_HIER            H,
               OM_ORDER_DATA_DICTIONARY D
         WHERE I.ORDER_SEQ_ID = V_ORDER_SEQ_ID
           AND I.PARENT_NODE_INDEX = V_P_ORDER_NODE_INDEX
           AND H.ORDER_NODE_ID = I.ORDER_NODE_ID
           AND D.DATA_DICTIONARY_ID = H.DATA_DICTIONARY_ID
           AND D.DATA_DICTIONARY_MNEMONIC = CSTR(I);
        V_P_ORDER_NODE_INDEX := V_ORDER_NODE_INDEX;
        V_P_ORDER_NODE_ID    := V_ORDER_NODE_ID;
      END IF;
    END LOOP;
    --v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_NODE_TEXT := NULL;
  END;

  RETURN V_NODE_TEXT;
END;
/

-- ----------------------------
-- Function structure for GET_V_NODE_TEXT_OLD
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_V_NODE_TEXT_OLD"
(v_node_path     in  VARCHAR2,
 v_order_seq_id     in  varchar2,
 v_coord_set_id     in  varchar2)
  return varchar2
IS
  TYPE varcharArray IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;

  v_p_cartridge_id number(6);
  v_p_cartridge_name VARCHAR2(50);

  v_p_type_id number(6);
  v_p_type_name VARCHAR2(50);

  v_pattern VARCHAR2(5) :='.';

  len number;--???
  i number;--position靠
  res varchar2(100);
  up_len number;--靠靠?
  down_len number;--靠靠?

  cstr varcharArray;--靠靠

  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;

  v_view VARCHAR2(50);

  v_node_text om_order_instance.node_value_text%TYPE := NULL;
begin
  SELECT h.cartridge_id,c.namespace_mnemonic,h.order_type_id,t.order_type_mnemonic INTO v_p_cartridge_id,v_p_cartridge_name,v_p_type_id,v_p_type_name
         from om_order_header h,om_cartridge c,om_order_type t where
              h.order_seq_id=v_order_seq_id AND c.cartridge_id=h.cartridge_id AND t.order_type_id=h.order_type_id;

   begin
       --靠靠靠','?靠靠靠靠靠靠len+1
       len:=length(v_node_path)-length(replace(v_node_path,v_pattern,''));
       len := nvl(len, 0);--靠靠?1",","
       if (len = 0) then
          cstr(1) := v_node_path;
       ELSE
       for j in 1..len+1 loop--j靠靠靠?
         if j=1 then
             i:=instr(v_node_path,v_pattern,1,j);
             res:=substr(v_node_path,1,i-1);
             --cstr.extend(1);
             res := nvl(res, '');--靠靠"1,,,2", ","
             if length( res) > 0 then
                cstr(cstr.count + 1):=trim(res);
             end if;
             up_len := i;
             down_len := i;
          elsif j<len+1 then
             i:=instr(v_node_path,v_pattern,1,j);
             down_len:=i;
             res:=substr(v_node_path,up_len+1,down_len-up_len-1);
             --cstr.extend(1);
             res := nvl(res, '');--靠靠"1,,,2", ","
             if length( res) > 0 then
                cstr(cstr.count + 1):=trim(res);
             end if;
             up_len:=i;
           else
             res:=substr(v_node_path,down_len+1);
             res := nvl(res, '');--靠靠"1,,,2", ","
             if length( res) > 0 then
                cstr(cstr.count + 1):=trim(res);
             end if;
           end if;
      end loop;
     END IF;

     IF v_p_cartridge_name='sp_product' THEN
        IF v_p_type_name IN ('atm_crm') THEN
           v_view := 'sp_test_group_query...atm_crm';
        ELSIF v_p_type_name IN ('b30_d_crm') THEN
           v_view := 'sp_test_group_query...b30_d_crm';
        ELSIF v_p_type_name IN ('b30_d_module_crm') THEN
           v_view := 'sp_test_group_query...b30_d_module_crm';
        ELSIF v_p_type_name IN ('ddn_crm') THEN
           v_view := 'sp_test_group_query...ddn_crm';
        ELSIF v_p_type_name IN ('did_crm') THEN
           v_view := 'sp_test_group_query...did_crm';
        ELSIF v_p_type_name IN ('ipman_crm') THEN
           v_view := 'sp_test_group_query...ipman_crm';
        ELSIF v_p_type_name IN ('ipvpn_group_crm') THEN
           v_view := 'sp_test_group_query...ipvpn_group_crm';
        ELSIF v_p_type_name IN ('ipvpn_node_crm') THEN
           v_view := 'sp_test_group_query...ipvpn_node_crm';
        ELSIF v_p_type_name IN ('user_net_crm') THEN
           v_view := 'sp_test_group_query...user_net_crm';
        ELSIF v_p_type_name IN ('zzj_ddn_crm') THEN
           v_view := 'sp_test_group_query...zzj_ddn_crm';
       END IF;
     ELSIF v_p_cartridge_name='adsl' THEN
        v_view := 'adsl_test_group_query';
     ELSIF v_p_cartridge_name='adsl_sp' THEN
        v_view := 'adsl_sp_test_group_query';
     ELSIF v_p_cartridge_name='bst' THEN
        v_view := 'bst_test_group_query';
     ELSIF v_p_cartridge_name='biznv' THEN
        v_view := 'biznv_test_group_query';
     ELSIF v_p_cartridge_name='centrex' THEN
        IF v_p_type_name IN ('centrex_zz_crm') THEN
           v_view := 'centrex_test_group_query...centrex_zz_crm';
        ELSIF v_p_type_name IN ('wac_zz_crm') THEN
           v_view := 'centrex_test_group_query...wac_zz_crm';
       END IF;
     ELSIF v_p_cartridge_name='crbtg' THEN
        v_view := 'crbtg_test_group_query';
     ELSIF v_p_cartridge_name='lan' THEN
        v_view := 'lan_test_group_query';
     ELSIF v_p_cartridge_name='pbx' THEN
        v_view := 'pbx_test_group_query';
     ELSIF v_p_cartridge_name='pots' THEN
        IF v_p_type_name IN ('30b_d_num_crm') THEN
           v_view := 'pots_test_group_query...30b_d_num_crm';
        ELSIF v_p_type_name IN ('centrex_extension_zz_crm') THEN
           v_view := 'pots_test_group_query...centrex_extension_zz_crm';
        ELSIF v_p_type_name IN ('did_number_crm') THEN
           v_view := 'pots_test_group_query...did_number_crm';
        ELSIF v_p_type_name IN ('pbx_trunk_zz_crm') THEN
           v_view := 'pots_test_group_query...pbx_trunk_zz_crm';
        ELSIF v_p_type_name IN ('pots_zz_crm') THEN
           v_view := 'pots_test_group_query...pots_zz_crm';
        ELSIF v_p_type_name IN ('tn_change_notify_zz_crm') THEN
           v_view := 'pots_test_group_query...tn_change_notify_zz_crm';
        ELSIF v_p_type_name IN ('yw_zz_crm') THEN
           v_view := 'pots_test_group_query...yw_zz_crm';
       END IF;
     ELSIF v_p_cartridge_name='qqy' THEN
        v_view := 'qqy_test_group_query';
     ELSIF v_p_cartridge_name='qxt' THEN
        v_view := 'qxt_test_group_query';
     ELSIF v_p_cartridge_name='addserv' THEN
        v_view := 'addserv_test_group_query';
     ELSIF v_p_cartridge_name='vpdn' THEN
        IF v_p_type_name IN ('vpdn_p_zz_crm') THEN
           v_view := 'vpdn_test_group_query...vpdn_p_zz_crm';
        ELSIF v_p_type_name IN ('e_vpn_p_zz_crm') THEN
           v_view := 'vpdn_test_group_query...e_vpn_p_zz_crm';
        ELSIF v_p_type_name IN ('vpdn_g_zz_crm') THEN
           v_view := 'vpdn_test_group_query...vpdn_g_zz_crm';
        ELSIF v_p_type_name IN ('e_vpn_g_zz_crm') THEN
           v_view := 'vpdn_test_group_query...e_vpn_g_zz_crm';
        END IF;
     END IF;

     FOR i IN 1..cstr.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v,
          om_order_view_node vn,
          om_order_hier h,
          om_order_data_dictionary d
          where
          v.order_view_mnemonic=v_view
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=cstr(1) and d.cartridge_id=v_p_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v,
          om_order_view_node vn,
          om_order_hier h,
          om_order_data_dictionary d
          where
          v.order_view_mnemonic=v_view
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=cstr(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=v_p_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
    v_node_text := om_ordinst_value_pkg.get_node_text_value(v_order_seq_id,v_order_node_id,null);
  EXCEPTION
  WHEN OTHERS THEN
       v_node_text:=null;
  end;
    return v_node_text;
end;
/

-- ----------------------------
-- Function structure for GET_VPDN_P_NODE_VALUE
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."GET_VPDN_P_NODE_VALUE"
(  input_value     in  varchar,
   input_cartridge_id in number)
  return number
is

  TYPE m_array IS TABLE OF VARCHAR2(255) INDEX BY BINARY_INTEGER;
  t   varchar2 (50)   ;
  ms  m_array ;
  v_order_node_id om_order_hier.order_node_id%type;
  v_p_order_node_id om_order_hier.order_node_id%type;
begin
--????
  if input_value='order_no' then
     ms(1):='sales_order';
     ms(2):='sales_order_no';
     FOR i IN 1..ms.count LOOP
       if i=1 then
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       else
          select h.order_node_id into v_order_node_id from
          om_order_view v
          ,om_order_view_node vn
          ,om_order_hier h
          ,om_order_data_dictionary d
          where
          v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
          and v.order_view_seq_id = vn.order_view_seq_id
          and vn.order_node_id = h.order_node_id
          and h.data_dictionary_id = d.data_dictionary_id
          and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
          v_p_order_node_id := v_order_node_id;
       end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_sales_order_no :=(v_order_node_id);
  end if;

--???
  if input_value='version_no' then
    ms(1):='sales_order';
    ms(2):='version';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_g_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
--    v_p_version :=(v_order_node_id);
  end if;

--?????
  if input_value='line_item_no' then
    ms(1):='vpdn_p';
    ms(2):='line_item';
    ms(3):='line_item_no';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  --?????
  if input_value='action_code' then
    ms(1):='vpdn_p';
    ms(2):='action_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='v_vpdn_p_crm_message_reply'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

  if input_value='new_crm_product_code' then
    ms(1):='vpdn_p';
    ms(2):='new';
    ms(3):='service_info';
    ms(4):='crm_product_code';
    FOR i IN 1..ms.count LOOP
         if i=1 then
            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='vpdn_query_view'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(1) and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         else

            select h.order_node_id into v_order_node_id from
            om_order_view v
            ,om_order_view_node vn
            ,om_order_hier h
            ,om_order_data_dictionary d
            where
            v.order_view_mnemonic='vpdn_query_view'
            and v.order_view_seq_id = vn.order_view_seq_id
            and vn.order_node_id = h.order_node_id
            and h.data_dictionary_id = d.data_dictionary_id
            and d.data_dictionary_mnemonic=ms(i) and h.parent_node_id=v_p_order_node_id and d.cartridge_id=input_cartridge_id;
            v_p_order_node_id := v_order_node_id;
         end if;
    END LOOP;
--    v_p_line_item_no :=(v_order_node_id);
--    DBMS_OUTPUT.PUT_LINE(v_order_node_id);
  end if;

--  select count(*) as bfee from VPDN_P_CRM_PAYMENT_INFO
--  where CRM_ORDER_NUMBER=:v_sales_order_no and CRM_VERSION=:v_p_version and CRM_LINE_NUMBER=to_number(:v_p_line_item_no)

--into v_count;

--  if v_count>0 then :rule_result := 'true';
--  else :rule_result := 'false'; end if;
  return v_order_node_id;
--          DBMS_OUTPUT.PUT_LINE(om_ordinst_value_pkg.get_node_text_value(11,v_order_node_id));
end;
/

-- ----------------------------
-- Function structure for LAN_CHECK_657_VPC
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."LAN_CHECK_657_VPC"
(  v_order_seq_id     in  varchar2,
  v_coord_set_id     in  varchar2)
  return number
is
  v_vpc varchar(100);
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
  v_cartridge_id number(6);
  v_p_cartridge_id number(6);
begin

v_count :=0;

select cartridge_id into v_cartridge_id from om_order_header where order_seq_id=v_order_seq_id;
v_p_cartridge_id:=v_cartridge_id;

v_p_sales_order_no :=get_v_node_text('lan.depend_sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=get_v_node_text('lan.depend_sales_order.version',v_order_seq_id,v_coord_set_id);
v_p_line_item_ID:=get_v_node_text('lan.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);


select count(*) into v_count from P6_TASK_EVENT  where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version;
-- and LINE_ITEM_ID=(v_p_line_item_ID);


return v_count;

end;
/

-- ----------------------------
-- Function structure for LOCAL_IPRAN_CHECK_657_VPC
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."LOCAL_IPRAN_CHECK_657_VPC"
(  v_order_seq_id     in  NUMBER,
  v_coord_set_id     in  NUMBER)
  return number
is
  v_count number;
  v_p_sales_order_no varchar(100);
  v_p_version number;
  v_p_line_item_ID varchar(20);
begin

v_count :=0;

v_p_sales_order_no :=get_v_node_text('sdh.depend_sales_order.sales_order_no',v_order_seq_id,v_coord_set_id);
v_p_version:=get_v_node_num('sdh.depend_sales_order.version',v_order_seq_id,v_coord_set_id);
v_p_line_item_ID:=get_v_node_text('sdh.depend_sales_order.line_item_no',v_order_seq_id,v_coord_set_id);

IF v_order_seq_id IN (28852) THEN
   v_count :=1;
ELSE
  select count(*) into v_count from P6_TASK_EVENT  where CRM_ORDER_id=v_p_sales_order_no and CRM_order_VERSION=v_p_version;
  -- and LINE_ITEM_ID=(v_p_line_item_ID); 
END IF;

return v_count;

end;
/

-- ----------------------------
-- Function structure for OM_CHAR_FILTER
-- ----------------------------
CREATE OR REPLACE function "ORDERMGMT"."OM_CHAR_FILTER"(a_text	in	varchar2)
return varchar2
is
v_text	varchar2(2000);
begin
v_text := a_text;
v_text :=replace(v_text, '?','_');
v_text :=replace(v_text, '/','_');
v_text :=replace(v_text, '\','_');
v_text :=replace(v_text, '*','_');
v_text :=replace(v_text, '<','_');
v_text :=replace(v_text, '>','_');
v_text :=replace(v_text, ' ','_');
v_text :=replace(v_text, '&','_');
v_text :=replace(v_text, ';','_');
v_text :=replace(v_text, ':','_');
v_text :=replace(v_text, '$','_');
v_text :=replace(v_text, '#','_');
v_text :=replace(v_text, '@','_');
v_text :=replace(v_text, '!','_');
v_text :=replace(v_text, '%','_');
v_text :=replace(v_text, '~','_');
v_text :=replace(v_text, '^','_');
v_text :=replace(v_text, '(','_');
v_text :=replace(v_text, ')','_');
v_text :=replace(v_text, '"','_');
v_text :=replace(v_text, '\','_');
v_text :=replace(v_text, '|','_');
v_text :=replace(v_text, '{','_');
v_text :=replace(v_text, '}','_');
v_text :=replace(v_text, '[','_');
v_text :=replace(v_text, ']','_');
v_text :=replace(v_text, '.','_');
v_text :=replace(v_text, ',','_');
v_text :=replace(v_text, '-','_');
v_text :=replace(v_text, '`','_');
v_text :=replace(v_text, '+','_');
v_text :=replace(v_text, '=','_');
v_text :=replace(v_text, '''','_');
return v_text;
end;
/

-- ----------------------------
-- Function structure for SDH_ARCHIVE_SYN
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."SDH_ARCHIVE_SYN"(V_ORDER_SEQ_ID IN NUMBER,
                                            V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  V_RESULT NUMBER := -1;

  V_COUNT  NUMBER := 0;

  V_DEPEND_NONPHS_CRM_NO VARCHAR2(100);
  v_syn_nonphs_archive VARCHAR2(10);
  
  v_syn_ord_count_str VARCHAR2(10);
  v_syn_ord_count number(10);
  v_product_code VARCHAR2(20);
BEGIN
  BEGIN
    v_syn_nonphs_archive := get_v_node_text('sdh.syn_nonphs_archive',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_nonphs_archive IS NULL OR v_syn_nonphs_archive!='0' THEN
       RETURN 1;
    END IF;

    V_DEPEND_NONPHS_CRM_NO := get_v_node_text('sdh.depend_nonphs_crm_order_no',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF V_DEPEND_NONPHS_CRM_NO IS NULL THEN
       RETURN 0;--1
    END IF;
    
    v_syn_ord_count_str := get_v_node_text('sdh.depend_nonphs_order_count',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_ord_count_str IS NULL THEN
       v_syn_ord_count:=1;
    ELSE 
       v_syn_ord_count:=to_number(v_syn_ord_count_str);
    END IF;
    
    v_product_code := get_v_node_text('sdh.new.service_info.crm_product_code',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_product_code IS NULL THEN
       v_product_code := get_v_node_text('sdh.old.service_info.crm_product_code',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    END IF;
    
    IF v_product_code='DN21' THEN
       /*SELECT COUNT(*) INTO V_COUNT FROM P6_TASK_EVENT e WHERE e.crm_order_id=V_DEPEND_NONPHS_CRM_NO 
          AND e.event_id IN ('sdh_new_send_resources_archive_general','sdh_cancel_send_resources_archive_general','sdh_move_send_resources_archive_general','sdh_modify_send_resources_archive_general');*/
       V_RESULT:=1;--mantis19842 ipran670产品，放装单不需要等业务单完工再完工
    ELSE
       SELECT COUNT(*) INTO V_COUNT FROM P6_TASK_EVENT e WHERE e.crm_order_id=V_DEPEND_NONPHS_CRM_NO 
          AND e.event_id IN ('sp_product_finised_processing');
          
       IF V_COUNT>=v_syn_ord_count THEN
          V_RESULT:=1;
       ELSE
          V_RESULT:=0;
       END IF;          
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      V_RESULT := -1;
  END;

  RETURN V_RESULT;
END;
/

-- ----------------------------
-- Function structure for SPLIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."SPLIT"
   (src VARCHAR2, delimiter varchar2)
  RETURN mytable IS
  psrc VARCHAR2(500);
  a mytable := mytable();
  i NUMBER := 1;  --
  j NUMBER := 1;
BEGIN
  psrc := RTrim(LTrim(src, delimiter), delimiter);
  LOOP
    i := InStr(psrc, delimiter, j);
    --Dbms_Output.put_line(i);
    IF i>0 THEN
      a.extend;
      a(a.Count) := Trim(SubStr(psrc, j, i-j));
      j := i+1;
      --Dbms_Output.put_line(a(a.Count-1));
    END IF;
    EXIT WHEN i=0;
  END LOOP;
  IF j < Length(psrc) THEN
    a.extend;
    a(a.Count) := Trim(SubStr(psrc, j, Length(psrc)+1-j));
  END IF;
  RETURN a;
END;
/

-- ----------------------------
-- Function structure for SYN_670_ORD
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."SYN_670_ORD"(V_ORDER_SEQ_ID IN NUMBER,
                                            V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  V_RESULT NUMBER := -1;

  V_COUNT  NUMBER := 0;

  V_DEPEND_NONPHS_CRM_NO VARCHAR2(100);
  v_syn_nonphs_archive VARCHAR2(10);
  
  v_syn_ord_count_str VARCHAR2(10);
  v_syn_ord_count number(10);
BEGIN
  BEGIN
    v_syn_nonphs_archive := get_v_node_text('sdh.syn_nonphs_archive',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_nonphs_archive IS NULL OR v_syn_nonphs_archive!='0' THEN
       RETURN 1;
    END IF;

    V_DEPEND_NONPHS_CRM_NO := get_v_node_text('sdh.depend_nonphs_crm_order_no',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF V_DEPEND_NONPHS_CRM_NO IS NULL THEN
       RETURN 0;--1
    END IF;
    
    v_syn_ord_count_str := get_v_node_text('sdh.depend_nonphs_order_count',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_ord_count_str IS NULL THEN
       v_syn_ord_count:=1;
    ELSE 
       v_syn_ord_count:=to_number(v_syn_ord_count_str);
    END IF;
    
    SELECT COUNT(*) INTO V_COUNT FROM P6_TASK_EVENT e WHERE e.crm_order_id=V_DEPEND_NONPHS_CRM_NO 
    AND e.event_id IN ('sdh_new_send_resources_archive_general','sdh_cancel_send_resources_archive_general','sdh_move_send_resources_archive_general','sdh_modify_send_resources_archive_general');

    IF V_ORDER_SEQ_ID IN (28852) OR V_COUNT>=v_syn_ord_count THEN
      V_RESULT:=1;
    ELSE
      V_RESULT:=0;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      V_RESULT := -1;
  END;

  RETURN V_RESULT;
END;
/

-- ----------------------------
-- Function structure for SYN_JHGC_ORD
-- ----------------------------
CREATE OR REPLACE FUNCTION "ORDERMGMT"."SYN_JHGC_ORD"(V_ORDER_SEQ_ID IN NUMBER,
                                            V_COORD_SET_ID IN NUMBER)
  RETURN NUMBER IS
  V_RESULT NUMBER := -1;

  V_COUNT  NUMBER := 0;

  V_DEPEND_NONPHS_CRM_NO VARCHAR2(100);
  v_syn_nonphs_archive VARCHAR2(10);
  
  v_syn_ord_count_str VARCHAR2(10);
  v_syn_ord_count number(10);
BEGIN
  BEGIN
    v_syn_nonphs_archive := get_v_node_text('sdh.syn_nonphs_archive',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_nonphs_archive IS NULL OR v_syn_nonphs_archive!='0' THEN
       RETURN 1;
    END IF;

    V_DEPEND_NONPHS_CRM_NO := get_v_node_text('sdh.depend_nonphs_crm_order_no',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF V_DEPEND_NONPHS_CRM_NO IS NULL THEN
       RETURN 0;--1
    END IF;
    
    v_syn_ord_count_str := get_v_node_text('sdh.depend_nonphs_order_count',V_ORDER_SEQ_ID,V_COORD_SET_ID);
    IF v_syn_ord_count_str IS NULL THEN
       v_syn_ord_count:=1;
    ELSE 
       v_syn_ord_count:=to_number(v_syn_ord_count_str);
    END IF;
    
    SELECT COUNT(*) INTO V_COUNT FROM P6_TASK_EVENT e WHERE e.crm_order_id=V_DEPEND_NONPHS_CRM_NO 
    AND e.event_id IN ('sp_product_finised_processing...did_crm','sp_product_finised_processing');

    IF V_COUNT>=v_syn_ord_count THEN
      V_RESULT:=1;
    ELSE
      V_RESULT:=0;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      V_RESULT := -1;
  END;

  RETURN V_RESULT;
END;
/

-- ----------------------------
-- Sequence structure for OM_ATTACHMENT_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ATTACHMENT_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ATTACHMENT_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_AUDIT_PURGE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_AUDIT_PURGE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_AUDIT_PURGE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 298733
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_AUTOMATION_CTX_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_AUTOMATION_CTX_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_AUTOMATION_CTX_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1
 CACHE 5000
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_BEHAVIOR_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_BEHAVIOR_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_BEHAVIOR_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE ;

-- ----------------------------
-- Sequence structure for OM_CARTRIDGE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_CARTRIDGE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_CARTRIDGE_SEQ"
 INCREMENT BY 1
 MINVALUE 2
 MAXVALUE 999999
 START WITH 283
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_CDT_PATH_SEGMENT_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_CDT_PATH_SEGMENT_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_CDT_PATH_SEGMENT_SEQ"
 INCREMENT BY 1
 MINVALUE 2
 MAXVALUE 999999
 START WITH 2
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_COMPENSATION_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_COMPENSATION_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_COMPENSATION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 5881
 CACHE 20
 CYCLE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_DATA_CHANGE_NOTIF_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_DATA_CHANGE_NOTIF_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_DATA_CHANGE_NOTIF_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_EVENT_DEF_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_EVENT_DEF_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_EVENT_DEF_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10007
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_EXT_SYSTEM_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_EXT_SYSTEM_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_EXT_SYSTEM_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_FALLOUT_GROUP_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_FALLOUT_GROUP_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_FALLOUT_GROUP_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_FALLOUT_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_FALLOUT_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_FALLOUT_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_HIST$COMPONENT_STATE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$COMPONENT_STATE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$COMPONENT_STATE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_HIST$NOTIFICATION_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$NOTIFICATION_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$NOTIFICATION_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 CYCLE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_HIST$ORCH_DEPENDENCY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 2000;

-- ----------------------------
-- Sequence structure for OM_HIST$ORDER_INSTANCE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_HIST$ORDER_STATE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$ORDER_STATE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$ORDER_STATE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_HIST$STATUS_MAP_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_HIST$STATUS_MAP_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_HIST$STATUS_MAP_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_INSIGNIFICANT_SELECTOR_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_JMS_EVENT_POOLER_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_JMS_EVENT_POOLER_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_JMS_EVENT_POOLER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 1100
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_JMS_EVENT_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_JMS_EVENT_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_JMS_EVENT_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 962001
 CACHE 2000
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_JMS_THREAD_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_JMS_THREAD_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_JMS_THREAD_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 1000;

-- ----------------------------
-- Sequence structure for OM_MNEMONIC_PATH_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_MNEMONIC_PATH_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_MNEMONIC_PATH_SEQ"
 INCREMENT BY 1
 MINVALUE 2
 MAXVALUE 999999
 START WITH 36842
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_MODEL_CLOB_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_MODEL_CLOB_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_MODEL_CLOB_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 2801
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_NOTIFICATION_DEF_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_NOTIFICATION_DEF_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_NOTIFICATION_DEF_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 2383963
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORCH_ERRORS_HIST_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORCH_ERRORS_HIST_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORCH_ERRORS_HIST_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_ORDER_DATA_DICTIONA_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_DATA_DICTIONA_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_DATA_DICTIONA_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 34017
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_FLOW_COORDINA_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_FLOW_COORDINA_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_FLOW_COORDINA_SEQ"
 INCREMENT BY 1
 MINVALUE 2
 MAXVALUE 9999999999
 START WITH 406002
 CACHE 2000
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_ORDER_FLOW_REMARKS_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 36401
 CACHE 200
 CYCLE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_HEADER_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_HEADER_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_HEADER_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 20
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_HIER_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_HIER_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_HIER_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 2220028
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_INSTANCE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_INSTANCE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_INSTANCE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 CYCLE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_REMARKS_TYPE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_SOURCE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_SOURCE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_SOURCE_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10043
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_TYPE_CATEGORY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_TYPE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_TYPE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_TYPE_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10097
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_ORDER_VIEW_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_ORDER_VIEW_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_ORDER_VIEW_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 31077
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_OSPOLICY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_OSPOLICY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_OSPOLICY_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 16240
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_PREFERENCES_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_PREFERENCES_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_PREFERENCES_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999
 START WITH 8
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for OM_PROCESS_POSITION_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_PROCESS_POSITION_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_PROCESS_POSITION_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 101766
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_PROCESS_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_PROCESS_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_PROCESS_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 19800
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_PROCESS_STATUS_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_PROCESS_STATUS_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_PROCESS_STATUS_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10647
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_REGION_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_REGION_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_REGION_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_RESPONSIBILITY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_RESPONSIBILITY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_RESPONSIBILITY_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10012
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_RULE_DEF_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_RULE_DEF_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_RULE_DEF_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 13315
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_SCHEDULE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_SCHEDULE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_SCHEDULE_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_SQL_LOG_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_SQL_LOG_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_SQL_LOG_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999
 START WITH 1
 CACHE 200
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_STATE_CATEGORY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_STATE_CATEGORY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_STATE_CATEGORY_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_STATE_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_STATE_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_STATE_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_STATUS_CATEGORY_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_STATUS_CATEGORY_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_STATUS_CATEGORY_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_SYSTEM_EVENT_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_SYSTEM_EVENT_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_SYSTEM_EVENT_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 START WITH 1401
 CACHE 200
 CYCLE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_TASK_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_TASK_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_TASK_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 67631
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_VIEW_ORDER_NODE_LAB_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LAB_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LAB_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10000
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_VIEW_RULE_DEF_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_VIEW_RULE_DEF_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_VIEW_RULE_DEF_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 135991
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_VIEW_RULE_EXP_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_VIEW_RULE_EXP_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_VIEW_RULE_EXP_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 135991
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for OM_WORKGROUPS_SEQ
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."OM_WORKGROUPS_SEQ";
CREATE SEQUENCE "ORDERMGMT"."OM_WORKGROUPS_SEQ"
 INCREMENT BY 1
 MINVALUE 10000
 MAXVALUE 999999999
 START WITH 10052
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for SEQ_ACTIVATION_KB
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."SEQ_ACTIVATION_KB";
CREATE SEQUENCE "ORDERMGMT"."SEQ_ACTIVATION_KB"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999
 START WITH 141
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SEQ_LOG_OMS_UPDATE_FAIL
-- ----------------------------
DROP SEQUENCE "ORDERMGMT"."SEQ_LOG_OMS_UPDATE_FAIL";
CREATE SEQUENCE "ORDERMGMT"."SEQ_LOG_OMS_UPDATE_FAIL"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999
 START WITH 3351
 CACHE 50
 CYCLE ;

-- ----------------------------
-- Indexes structure for table IBP_P6_TASK_ID
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_IBP_P6_TASK_ID_ORDER_ID"
ON "ORDERMGMT"."IBP_P6_TASK_ID" ("P6_ORDER_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table IBP_P6_TASK_ID
-- ----------------------------
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("TRANSACTION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("CRM_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("P6_ORDER_VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("P6_TASK_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("P6_ORDER_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table IBP_P6_TASK_ID
-- ----------------------------
ALTER TABLE "ORDERMGMT"."IBP_P6_TASK_ID" ADD PRIMARY KEY ("TRANSACTION_ID", "P6_TASK_MNEMONIC");

-- ----------------------------
-- Indexes structure for table KB_IBP_CONFIG_QUERY_FILTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table KB_IBP_CONFIG_QUERY_FILTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_QUERY_FILTER" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_QUERY_FILTER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KB_IBP_CONFIG_QUERY_FILTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_QUERY_FILTER" ADD PRIMARY KEY ("CARTRIDGE_ID", "ORDER_NODE_ID");

-- ----------------------------
-- Indexes structure for table KB_IBP_CONFIG_SUBPROCESS
-- ----------------------------

-- ----------------------------
-- Checks structure for table KB_IBP_CONFIG_SUBPROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS" ADD CHECK ("SUB_TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS" ADD CHECK ("SUB_PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KB_IBP_CONFIG_SUBPROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_SUBPROCESS" ADD PRIMARY KEY ("CARTRIDGE_ID", "SUB_PROCESS_ID", "SUB_TASK_ID");

-- ----------------------------
-- Indexes structure for table KB_IBP_CONFIG_TASK
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_CT"
ON "ORDERMGMT"."KB_IBP_CONFIG_TASK" ("CARTRIDGE_ID" ASC, "SUB_TASK_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table KB_IBP_CONFIG_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" ADD CHECK ("SUB_TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" ADD CHECK ("SUB_PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table KB_IBP_CONFIG_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_CONFIG_TASK" ADD PRIMARY KEY ("CARTRIDGE_ID", "SUB_TASK_ID", "SUB_PROCESS_ID", "TASK_ID");

-- ----------------------------
-- Indexes structure for table KB_IBP_DEVICE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."PK_KB_DEVICE_ID"
ON "ORDERMGMT"."KB_IBP_DEVICE" ("ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table KB_IBP_DEVICE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_DEVICE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_DEVICE" ADD CHECK ("CRM_ORDER_NUMBER" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_DEVICE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table KB_IBP_WORKPROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."KB_IBP_WORKPROCESS" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_WORKPROCESS" ADD CHECK ("TASK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."KB_IBP_WORKPROCESS" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table LOG_OMS_UPDATE_FAILURE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_LOG_OMS_UPD_FAIL_CRT_TIM"
ON "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ("CREATE_TIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_LOG_OMS_UPD_FAIL_ORDID"
ON "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ("ORDER_SEQ_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_LOG_OMS_UPD_FAIL_REFNO"
ON "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ("REFERENCE_NUMBER" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_LOG_OMS_UPD_FAIL_TASK"
ON "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ("TASK" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_LOG_OMS_UPD_FAIL_TASK_NS"
ON "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ("NAME_SPACE" ASC, "TASK" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOG_OMS_UPDATE_FAILURE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("SEQID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("REFERENCE_NUMBER" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("ORDER_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("NAME_SPACE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("TASK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD CHECK ("CREATE_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table LOG_OMS_UPDATE_FAILURE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."LOG_OMS_UPDATE_FAILURE" ADD PRIMARY KEY ("SEQID");

-- ----------------------------
-- Checks structure for table LOG_PURGE_ORDER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."LOG_PURGE_ORDER" ADD CHECK ("TIME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table LOG_PURGE_ORDER_HIS
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_PURGE_ORDERID"
ON "ORDERMGMT"."LOG_PURGE_ORDER_HIS" ("ORDER_SEQ_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_PURGE_TIME"
ON "ORDERMGMT"."LOG_PURGE_ORDER_HIS" ("REMOVE_TIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table LOG_PURGE_ORDER_HIS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."LOG_PURGE_ORDER_HIS" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."LOG_PURGE_ORDER_HIS" ADD CHECK ("REFERENCE_NUMBER" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table MAIN_CONFIG_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table MAIN_CONFIG_INFO
-- ----------------------------
ALTER TABLE "ORDERMGMT"."MAIN_CONFIG_INFO" ADD CHECK ("INNER_PACKAGE_SERIAL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."MAIN_CONFIG_INFO" ADD CHECK ("CRM_PACKAGE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."MAIN_CONFIG_INFO" ADD CHECK ("CRM_PACKAGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table MAIN_CONFIG_INFO
-- ----------------------------
ALTER TABLE "ORDERMGMT"."MAIN_CONFIG_INFO" ADD PRIMARY KEY ("INNER_PACKAGE_SERIAL");

-- ----------------------------
-- Indexes structure for table OM_$INSTALL$PLAN
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_$INSTALL$PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" ADD CHECK ("PLAN_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" ADD CHECK ("FROM_VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_$INSTALL$PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN" ADD PRIMARY KEY ("PLAN_ID");

-- ----------------------------
-- Indexes structure for table OM_$INSTALL$PLAN_ACTIONS
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_$INSTALL$PLAN_ACTIONS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD UNIQUE ("SEQ_ID", "PLAN_ID", "SCHEMA_NAME", "OBJECT_TYPE", "OBJECT_NAME", "FROM_VERSION", "VERSION", "ACTION_NAME", "SUBTYPE", "SUBACTION");

-- ----------------------------
-- Checks structure for table OM_$INSTALL$PLAN_ACTIONS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("PLAN_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("SCHEMA_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("OBJECT_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("DB_OBJECT_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_$INSTALL$PLAN_ACTIONS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD PRIMARY KEY ("PLAN_ID", "SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_$INSTALL$TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_$INSTALL$TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" ADD CHECK (table_content in ('ORDER DATA','CARTRIDGE METADATA','CONFIGURATION DATA','OTHER'));
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" ADD CHECK ("TABLE_CONTENT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" ADD CHECK ("VOLATILITY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_$INSTALL$TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$TABLE" ADD PRIMARY KEY ("TABLE_NAME");

-- ----------------------------
-- Indexes structure for table OM_$INSTALL$VERSION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_$INSTALL$VERSION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$VERSION" ADD CHECK ("OBJECT_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$VERSION" ADD CHECK ("OBJECT_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$VERSION" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_$INSTALL$VERSION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$VERSION" ADD PRIMARY KEY ("OBJECT_TYPE", "OBJECT_NAME");

-- ----------------------------
-- Indexes structure for table OM_ACTIVE_NOTIFICATION
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIEOM_ACTIVE_NOTIFICATION"
ON "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ("ORDER_SEQ_ID" ASC, "ORDER_HIST_SEQ_ID" ASC, "NOTIFICATION_ID" ASC, "DATA_MODIFICATION_ID" ASC, "NOTIFICATION_HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ACTIVE_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("DATA_MODIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("NOTIFICATION_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("ORDER_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ACTIVE_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "DATA_MODIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_APP_FUNC_WORKGROUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_APP_FUNC_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD CHECK (STARTUP IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD CHECK (instr(APP_FUNCTION_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD CHECK ("APP_FUNCTION_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD CHECK ("STARTUP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_APP_FUNC_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD PRIMARY KEY ("WORKGROUP_ID", "APP_FUNCTION_MNEMONIC");

-- ----------------------------
-- Indexes structure for table OM_APPLICATION_FUNCTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_APPLICATION_FUNCTION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION" ADD CHECK (instr(APP_FUNCTION_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION" ADD CHECK ("APP_FUNCTION_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION" ADD CHECK ("APP_FUNCTION_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_APPLICATION_FUNCTION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_APPLICATION_FUNCTION" ADD PRIMARY KEY ("APP_FUNCTION_MNEMONIC");

-- ----------------------------
-- Indexes structure for table OM_ATTACHMENT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ATTACHMENT"
ON "ORDERMGMT"."OM_ATTACHMENT" ("ORDER_SEQ_ID" ASC, "HIST_SEQ_ID" ASC, "ORDER_FLOW_REMARK_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ATTACHMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("ATTACHMENT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("ORDER_FLOW_REMARK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("ATTACH_FILE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ATTACHMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ATTACHMENT_ID");

-- ----------------------------
-- Indexes structure for table OM_ATTRIBUTE_CODE_LOOKUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ATTRIBUTE_CODE_LOOKUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD CHECK ("KEY_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD CHECK ("DATA_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ATTRIBUTE_CODE_LOOKUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD PRIMARY KEY ("DATA_DICTIONARY_ID");

-- ----------------------------
-- Indexes structure for table OM_ATTRIBUTE_TYPE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ATTRIBUTE_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ADD CHECK (instr(STORAGE_TYPE, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ADD CHECK ("ATTRIBUTE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ADD CHECK ("ATTRIBUTE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ADD CHECK ("STORAGE_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ATTRIBUTE_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ADD PRIMARY KEY ("ATTRIBUTE_TYPE");

-- ----------------------------
-- Indexes structure for table OM_AUDIT_PURGE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_AUDIT_PURGE"
ON "ORDERMGMT"."OM_AUDIT_PURGE" ("START_DATE" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_AUDIT_PURGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK (status in ('STARTED','RUNNING','STOPPED','EXPIRED','FINISHED','FINISHED_WITH_ERROR','FAILED','NO_PURGE'));
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("PURGE_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("OPERATION_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("PURGE_DURATION_SEC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("INJECTED_ORDER_COUNT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD CHECK ("SELECTED_ORDER_COUNT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_AUDIT_PURGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE" ADD PRIMARY KEY ("PURGE_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_AUDIT_PURGE_ORDER
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_AUDIT_PURGE_ORDER"
ON "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ("ORDER_SEQ_ID" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE2OM_AUDIT_PURGE_ORDER"
ON "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ("PURGE_SEQ_ID" ASC, "ORDER_SEQ_ID" ASC, "CASCADED_DELETE" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_AUDIT_PURGE_ORDER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("PURGE_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("DELETED_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("REFERENCE_NUMBER" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORD_CREATION_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORD_START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD CHECK ("ORD_COMPLETION_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_AUDIT_PURGE_ORDER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD PRIMARY KEY ("PURGE_SEQ_ID", "ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_AUDIT_PURGE_PARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_AUDIT_PURGE_PARAM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD CHECK (parameter_type in ('P','U','S','C'));
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD CHECK ("PARAMETER_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD CHECK ("PURGE_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD CHECK ("PARAMETER_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_AUDIT_PURGE_PARAM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD PRIMARY KEY ("PURGE_SEQ_ID", "PARAMETER_NAME", "PARAMETER_TYPE");

-- ----------------------------
-- Indexes structure for table OM_AUTOMATION_CORRELATION
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_AUTOMATION_CORRELATION"
ON "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ("CORRELATION_TYPE" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_AUTOMATION_CORRELATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD CHECK ("AUTOMATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD CHECK ("CORRELATION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_AUTOMATION_CORRELATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD PRIMARY KEY ("ORDER_SEQ_ID", "AUTOMATION_ID", "CORRELATION_TYPE");

-- ----------------------------
-- Indexes structure for table OM_AUTOMATION_CTX
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_AUTOMATION_CTX
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD CHECK ("AUTOMATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD CHECK ("CTX_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_AUTOMATION_CTX
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD PRIMARY KEY ("ORDER_SEQ_ID", "AUTOMATION_ID");

-- ----------------------------
-- Indexes structure for table OM_BEAJMSSTATE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."OM_BEAJMSMSG_X"
ON "ORDERMGMT"."OM_BEAJMSSTATE" ("RECORDHANDLE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table OM_BEAJMSSTORE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."OM_BEAJMSMSGQ_X"
ON "ORDERMGMT"."OM_BEAJMSSTORE" ("RECORDHANDLE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table OM_BEHAVIOR
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_BEHAVIOR
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__BEHAVIOR_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_BEHAVIOR" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.BEHAVIOR_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.BEHAVIOR_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.BEHAVIOR_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.BEHAVIOR_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_BEHAVIOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK (instr(behavior_mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK ("BEHAVIOR_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK ("PROCESS_POINT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK ("BEHAVIOR_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK ("BEHAVIOR_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD CHECK ("JNDI" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_BEHAVIOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD PRIMARY KEY ("BEHAVIOR_ID");

-- ----------------------------
-- Indexes structure for table OM_BEHAVIOR_PROPERTIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_BEHAVIOR_PROPERTIES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD CHECK ("BEHAVIOR_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD CHECK ("PROPERTY_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD CHECK ("PROPERTY_VALUE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD CHECK ("TASK_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_BEHAVIOR_PROPERTIES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD PRIMARY KEY ("BEHAVIOR_ID", "PROPERTY_NAME", "PROPERTY_VALUE", "TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_CALENDAR
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_CALENDAR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD UNIQUE ("RUNNING_TOTAL", "WORKGROUP_ID");
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD UNIQUE ("STOP_DATE", "WORKGROUP_ID");

-- ----------------------------
-- Checks structure for table OM_CALENDAR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK (start_date < stop_date);
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK ("START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK ("STOP_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK ("PREV_TOTAL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD CHECK ("RUNNING_TOTAL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_CALENDAR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD PRIMARY KEY ("WORKGROUP_ID", "START_DATE");

-- ----------------------------
-- Indexes structure for table OM_CARTRIDGE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_CARTRIDGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD UNIQUE ("NAMESPACE_MNEMONIC", "VERSION", "RECYCLE_BIN_ID");

-- ----------------------------
-- Checks structure for table OM_CARTRIDGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK (cartridge_type in ('COMPONENT', 'SOLUTION'));
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK (instr(namespace_mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("NAMESPACE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("NAMESPACE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("DEFAULT_VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("LAST_UPDATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("BUILD_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD CHECK ("CARTRIDGE_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_CARTRIDGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CARTRIDGE" ADD PRIMARY KEY ("CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_CDT_HIER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_CDT_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CDT_HIER" ADD CHECK ("ROOT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CDT_HIER" ADD CHECK ("PARENT_ROOT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_CDT_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CDT_HIER" ADD PRIMARY KEY ("ROOT_ID");

-- ----------------------------
-- Indexes structure for table OM_CDT_PATH_SEGMENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_CDT_PATH_SEGMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ADD CHECK ("SEGMENT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ADD CHECK ("ANCHOR_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ADD CHECK ("CDT_ROOT_NODE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_CDT_PATH_SEGMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ADD PRIMARY KEY ("SEGMENT_ID");

-- ----------------------------
-- Indexes structure for table OM_COMPL_TASK_HOUR_SUMMARY
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_COMPL_TASK_HOUR_SUMMARY"
ON "ORDERMGMT"."OM_COMPL_TASK_HOUR_SUMMARY" ("DATE_HOUR" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table OM_COORD_NODE_INSTANCE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_COORD_NODE_INSTANCE"
ON "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ("ORDER_SEQ_ID" ASC, "ORDER_NODE_INDEX" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_COORD_NODE_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R'));
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("COORD_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_COORD_NODE_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COORD_SET_ID", "ORDER_NODE_ID", "ORDER_NODE_TYPE", "ORDER_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_COUNTRIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_COUNTRIES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_COUNTRIES" ADD CHECK ("CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_COUNTRIES" ADD CHECK ("COUNTRY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_COUNTRIES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_COUNTRIES" ADD PRIMARY KEY ("CODE");

-- ----------------------------
-- Indexes structure for table OM_CREATION_TASK_ORDER_VIEW
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_CREATION_TASK_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK (TASK_TYPE IN ('C'));
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_CREATION_TASK_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "ORDER_VIEW_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_DATA_NOTIFICATION_DEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_DATA_NOTIFICATION_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_DATA_NOTIFICATION_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD PRIMARY KEY ("ORDER_NODE_ID", "NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_DD_INSIGNIFICANT_SEL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_DD_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" ADD CHECK ("SELECTOR_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_DD_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" ADD PRIMARY KEY ("DATA_DICTIONARY_ID", "SELECTOR_ID");

-- ----------------------------
-- Checks structure for table OM_DO_NOT_PURGE_LIST_TMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DO_NOT_PURGE_LIST_TMP" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table OM_ERRORS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ERRORS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ERRORS" ADD CHECK ("ERROR_CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ERRORS" ADD CHECK ("ERROR_MESSAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ERRORS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ERRORS" ADD PRIMARY KEY ("ERROR_CODE");

-- ----------------------------
-- Indexes structure for table OM_EVENT_DEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_EVENT_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK (EVENT_TYPE IN ('C','D','X','M','H'));
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("EVENT_DEF_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("EVENT_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("POOLER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD CHECK ("DISPATCH_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_EVENT_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD PRIMARY KEY ("EVENT_DEF_ID");

-- ----------------------------
-- Indexes structure for table OM_EXCEPTION_POSITION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_EXCEPTION_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_EXCEPTION_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_STATUS_ID", "PROCESS_POSITION_ID");

-- ----------------------------
-- Indexes structure for table OM_EXCEPTION_TYPE_N_SOURCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_EXCEPTION_TYPE_N_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_EXCEPTION_TYPE_N_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_STATUS_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_EXCEPTION_WORKGROUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_EXCEPTION_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_EXCEPTION_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_STATUS_ID", "WORKGROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_EXT_SYSTEM
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_EXT_SYSTEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD UNIQUE ("NAME");

-- ----------------------------
-- Checks structure for table OM_EXT_SYSTEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK ("ENTITY_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK ("XMLDEF" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK (instr(name, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD CHECK (entity_type in ('httpWsSystem','jmsWsSystem','osmSystem'));

-- ----------------------------
-- Primary Key structure for table OM_EXT_SYSTEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXT_SYSTEM" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_EXTERNAL_TASK
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_EXTERNAL_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK (DURATION_TYPE in ('SYSTEM', 'SCHEDULE'));
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK (TASK_TYPE IN ('M', 'A', 'C', 'K'));
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("RESPONSIBILITY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("TASK_INSTRUCTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("EXPECTED_DURATION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("DURATION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("TASK_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_EXTERNAL_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_FALLOUT
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD UNIQUE ("MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD CHECK (instr(mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD CHECK ("MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_FALLOUT_GROUP
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_FALLOUT_GROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD UNIQUE ("MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_FALLOUT_GROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD CHECK (instr(mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD CHECK ("MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_FALLOUT_GROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_FALLOUT_GROUP_MEMBER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_FALLOUT_GROUP_MEMBER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD CHECK ("FALLOUT_GROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD CHECK ("FALLOUT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_FALLOUT_GROUP_MEMBER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD PRIMARY KEY ("FALLOUT_GROUP_ID", "FALLOUT_ID");

-- ----------------------------
-- Indexes structure for table OM_FALLOUT_NODE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_FALLOUT_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD CHECK ("FALLOUT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD CHECK ("NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD CHECK ("NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_FALLOUT_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD PRIMARY KEY ("FALLOUT_ID", "NODE_ID");

-- ----------------------------
-- Indexes structure for table OM_GENERIC_MNEMONIC
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_GENERIC_MNEMONIC
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK (instr(CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK (instr(MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK ("CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK ("MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD CHECK ("DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_GENERIC_MNEMONIC
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_GENERIC_MNEMONIC" ADD PRIMARY KEY ("CLASS", "ID");

-- ----------------------------
-- Indexes structure for table OM_HINT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HINT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HINT" ADD CHECK ("OM_REQ_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HINT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HINT" ADD PRIMARY KEY ("OM_REQ_TYPE");

-- ----------------------------
-- Indexes structure for table OM_HIST$COMPENSATION_PLAN
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XFK_OM_HIST$COMP_PLAN_04"
ON "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ("ORDER_SEQ_ID" ASC, "COMPENSATION_HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$COMPENSATION_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK (execution_mode in ('D', 'U', 'R', 'A'));
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK (compensation_action in ('PROCESS', 'NONE'));
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK ("ORDER_AMENDMENT_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD CHECK ("COMPENSATION_ACTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$COMPENSATION_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ORDER_NODE_INDEX", "ORDER_AMENDMENT_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$COMPONENT_STATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$COMPONENT_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("COMP_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("COMP_STATE_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("ORCH_PLAN_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("ORCH_PLAN_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("STATE_TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD CHECK ("CONTEXT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$COMPONENT_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX", "COMP_STATE_HIST_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$DATA_CHANGE_NOTIF
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$DATA_CHANGE_NOTIF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("DATA_MODIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("NOTIFICATION_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("ORDER_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD CHECK ("H$INST_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$DATA_CHANGE_NOTIF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID", "ORDER_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_HIST$FALLOUT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XFK_HIST$FALLOUT_02"
ON "ORDERMGMT"."OM_HIST$FALLOUT" ("ORDER_SEQ_ID" ASC, "INITIATOR_HIST_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD CHECK ("COMPENSATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD CHECK ("INITIATOR_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD CHECK ("FALLOUT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMPENSATION_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$FALLOUT_NODE_INSTANCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$FALLOUT_NODE_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD CHECK ("COMPENSATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$FALLOUT_NODE_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMPENSATION_ID", "ORDER_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_HIST$FLOW
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_HIST$FLOW"
ON "ORDERMGMT"."OM_HIST$FLOW" ("ORDER_SEQ_ID" ASC, "HIST_SEQ_ID_FROM" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$FLOW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD CHECK ("HIST_SEQ_ID_FROM" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$FLOW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "HIST_SEQ_ID_FROM");

-- ----------------------------
-- Indexes structure for table OM_HIST$MODEL_CLOB
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$MODEL_CLOB
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK (instr(name, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("ENTITY_VERSION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("ENTITY_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD CHECK ("MODEL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$MODEL_CLOB
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD PRIMARY KEY ("ID", "ENTITY_VERSION");

-- ----------------------------
-- Indexes structure for table OM_HIST$NOTIFICATION
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_HIST$NOTIFICATION"
ON "ORDERMGMT"."OM_HIST$NOTIFICATION" ("NOTIFICATION_ID" ASC, "ORDER_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK (ACTION IN ('I', 'D', 'U'));
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("DATA_MODIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("NOTIFICATION_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("ORDER_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$ORCH_DEPENDENCY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$ORCH_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ((state = 'NO_STATE' or state = 'CREATED' or state = 'DELAYED' or state = 'RESOLVED' or state = 'DELETED'));
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ((target_state = 'NO_STATE' or target_state = 'CREATED' or target_state = 'DELAYED' or target_state = 'RESOLVED' or target_state = 'DELETED'));
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("DEPENDENCY_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("CONTEXT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("TARGET_STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("TARGET_STATE_EXPECTED_TIME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD CHECK ("TIMESTAMP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$ORCH_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "DEPENDENCY_HIST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$ORDER_HEADER
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_HIST$ORDER_HEADER"
ON "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("HIST_ORDER_STATE_ID" ASC, "TIMESTAMP_IN" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE2OM_HIST$ORDER_HEADER"
ON "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("TASK_ID" ASC, "TASK_TYPE" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$ORDER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK (COMPL_EXPECTED_TYPE in ('W', 'U'));
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK (EXECUTION_MODE in ('D', 'R', 'U', 'A', 'I')) ENABLE NOVALIDATE;
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("HIST_PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("HIST_ORDER_STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("HIST_ORDER_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("HIST_REPORTING_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TIMESTAMP_IN" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TIMESTAMP_OUT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TASK_TIMESTAMP_IN" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("AUTHOR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TRANS_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD CHECK ("EXECUTION_MODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$ORDER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$ORDER_INSTANCE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_HIST$ORDER_INSTANCE"
ON "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ("ORDER_SEQ_ID" ASC, "HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE2OM_HIST$ORDER_INSTANCE"
ON "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ("ORDER_NODE_ID" ASC, "ORDER_TYPE_ID" ASC, "ORDER_SOURCE_ID" ASC)
PARALLEL 4
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$ORDER_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK (DML_ACTION IN ('I', 'D', 'U'));
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK (instr(CONTEXT_TYPE, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK (instr(CONTEXT_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("H$INST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("DML_ACTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("H$INST_SEQ_ID_FROM" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("PARENT_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("H$INST_TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$ORDER_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_NODE_INDEX", "H$INST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$ORDER_STATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HIST$ORDER_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD CHECK ("HIST_STATE_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD CHECK ("ORD_TXN_START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD CHECK ("ORD_TXN_COMPLETION_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$ORDER_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_STATE_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HIST$STATUS_MAP
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XFK_HIST$STATUS_MAP_01"
ON "ORDERMGMT"."OM_HIST$STATUS_MAP" ("ORDER_SEQ_ID" ASC, "HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE1OM_HIST$STATUS_MAP"
ON "ORDERMGMT"."OM_HIST$STATUS_MAP" ("ORDER_SEQ_ID" ASC, "PARENT_HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_HIST$STATUS_MAP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("HIST_MAP_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("PARENT_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("SUBPROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("TASK_TRANS_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("TERMINATE_CHILDREN" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("REPORTING_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("TASK_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HIST$STATUS_MAP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_MAP_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_HOLIDAYS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_HOLIDAYS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD CHECK (HOLIDAY_DATE = trunc(HOLIDAY_DATE));
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD CHECK ("REGION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD CHECK ("HOLIDAY_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD CHECK ("HOLIDAY_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_HOLIDAYS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD PRIMARY KEY ("REGION_ID", "HOLIDAY_DATE");

-- ----------------------------
-- Indexes structure for table OM_I18N_DESCRIPTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_I18N_DESCRIPTION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" ADD CHECK ("ENTITY_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" ADD CHECK ("ENTITY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" ADD CHECK ("LANG_CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" ADD CHECK ("DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_I18N_DESCRIPTION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_I18N_DESCRIPTION" ADD PRIMARY KEY ("ENTITY_TYPE", "ENTITY_ID", "LANG_CODE");

-- ----------------------------
-- Indexes structure for table OM_INSIGNIFICANT_SELECTOR
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_INSIGNIFICANT_SELECTOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ADD CHECK ("SOURCE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_INSIGNIFICANT_SELECTOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_JMS_EVENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_JMS_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK (EXECUTION_MODE in ('D', 'R', 'U','A'));
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK (STATUS in ('SUSPENDED', 'FAILURE'));
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK (EVENT_TYPE IN ('C','D','X','M','S','O','R','T','H'));
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("EVENT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("ORDER_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("POOLER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("EVENT_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("NOTIFICATION_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("EVENT_DEF_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD CHECK ("EXECUTION_MODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_JMS_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_HIST_ID", "EVENT_ID");

-- ----------------------------
-- Indexes structure for table OM_JMS_THREAD
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_JMS_THREAD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK (STATUS in ('SUSPENDED', 'FAILURE'));
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("THREAD_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("BEHAVIOR_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_JMS_THREAD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "THREAD_ID");

-- ----------------------------
-- Indexes structure for table OM_JOB_MONITOR
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_JOB_MONITOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JOB_MONITOR" ADD CHECK (job_type IN ('R', 'N'));
ALTER TABLE "ORDERMGMT"."OM_JOB_MONITOR" ADD CHECK ("JOB_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JOB_MONITOR" ADD CHECK ("WHAT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JOB_MONITOR" ADD CHECK ("LAST_CHECK" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_JOB_MONITOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JOB_MONITOR" ADD PRIMARY KEY ("WHAT");

-- ----------------------------
-- Indexes structure for table OM_JUMP_NOTIFICATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_JUMP_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_JUMP_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_STATUS_ID", "NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_KEY_HASH_BUCKET
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_KEY_HASH_BUCKET
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_KEY_HASH_BUCKET" ADD CHECK ("BUCKET_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_KEY_HASH_BUCKET
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_KEY_HASH_BUCKET" ADD PRIMARY KEY ("BUCKET_ID");

-- ----------------------------
-- Indexes structure for table OM_LANGUAGES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_LANGUAGES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LANGUAGES" ADD CHECK ("CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_LANGUAGES" ADD CHECK ("LANGUAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_LANGUAGES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LANGUAGES" ADD PRIMARY KEY ("CODE");

-- ----------------------------
-- Indexes structure for table OM_LOCALIZATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_LOCALIZATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LOCALIZATION" ADD CHECK ("LANG_CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_LOCALIZATION" ADD CHECK ("RESOURCE_KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_LOCALIZATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LOCALIZATION" ADD PRIMARY KEY ("LANG_CODE", "RESOURCE_KEY");

-- ----------------------------
-- Indexes structure for table OM_LOOKUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_LOOKUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD CHECK ("CODE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD CHECK ("CODE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_LOOKUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD PRIMARY KEY ("DATA_DICTIONARY_ID", "CODE");

-- ----------------------------
-- Indexes structure for table OM_MNEMONIC_PATH
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_MNEMONIC_PATH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD CHECK ("PATH_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD CHECK ("MNEMONIC_PATH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD CHECK ("COMPILE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_MNEMONIC_PATH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD PRIMARY KEY ("PATH_ID");

-- ----------------------------
-- Indexes structure for table OM_MODEL_CLOB
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_MODEL_CLOB
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD UNIQUE ("CARTRIDGE_ID", "NAME", "ENTITY_TYPE");

-- ----------------------------
-- Checks structure for table OM_MODEL_CLOB
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK (instr(name, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK ("ENTITY_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD CHECK ("MODEL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_MODEL_CLOB
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_MOT_INSIGNIFICANT_SEL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_MOT_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD CHECK ("SELECTOR_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_MOT_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD PRIMARY KEY ("ORDER_NODE_ID", "SELECTOR_ID");

-- ----------------------------
-- Indexes structure for table OM_NODE_FILTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_NODE_FILTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_NODE_FILTER" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NODE_FILTER" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NODE_FILTER" ADD CHECK ("DEPTH" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table OM_NOTIFICATION_DEF
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_NOTIFICATION_DEF
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__NOTIFICATION_DEF_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_NOTIFICATION_DEF" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.NOTIFICATION_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.NOTIFICATION_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.NOTIFICATION_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.NOTIFICATION_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_NOTIFICATION_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD UNIQUE ("NOTIFICATION_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_NOTIFICATION_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK (E_MAIL IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK (instr(NOTIFICATION_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK (STATUS IN ('ENABLED', 'DISABLED'));
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK (TYPE IN ('POLL', 'PROCESS', 'DATA'));
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("NOTIFICATION_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("NOTIFICATION_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("INTERVAL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("AUTHOR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("LAST_START" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("LAST_FINISH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("NEXT_START" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("DISPATCH_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("POOLER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("E_MAIL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_NOTIFICATION_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD PRIMARY KEY ("NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_COMP_DECOMPOSITION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_COMP_DECOMPOSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD CHECK ("COMP_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD CHECK ("STAGE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD CHECK ("STAGE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD CHECK ("CONTEXT_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_COMP_DECOMPOSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX", "STAGE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_COMPLDEP_ITEM_DETAIL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_COMPLDEP_ITEM_DETAIL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD CHECK ("PREDECESSOR_ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD CHECK ("SUCCESSOR_ITEM_NODE_INDEX" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_COMPLDEP_ITEM_DETAIL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "SUCCESSOR_ITEM_NODE_INDEX", "PREDECESSOR_ITEM_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_COMPLETION_DEPENDENCY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_COMPLETION_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD CHECK ("COMP_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD CHECK ("PREDECESSOR_ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD CHECK ("PREDECESSOR_COMP_NODE_INDEX" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_COMPLETION_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_DATACHANGE_DEPEND_ITEM
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_DATACHANGE_DEPEND_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" ADD CHECK ("ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_DATACHANGE_DEPEND_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "ITEM_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_DEPEND_DATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_DEPEND_DATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD CHECK ("DELAY_UNTIL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD CHECK ("DURATION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_DEPEND_DATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_DEPEND_DURATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_DEPEND_DURATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" ADD CHECK ("DURATION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_DEPEND_DURATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_DEPENDENCY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ((state = 'NO_STATE' or state = 'CREATED' or state= 'DELAYED' or state = 'RESOLVED' or state = 'DELETED'));
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ((target_state = 'NO_STATE' or target_state = 'CREATED' or target_state= 'DELAYED' or target_state = 'RESOLVED' or target_state = 'DELETED'));
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("CONTEXT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("TARGET_STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD CHECK ("TARGET_STATE_EXPECTED_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_DEPENDENCY_PENDING
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_DEPENDENCY_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" ADD CHECK ("DEPENDENCY_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_DEPENDENCY_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "DEPENDENCY_HIST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ITEM_DEPEND_PRED
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_ITEM_DEPEND_PRED
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD CHECK ("ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD CHECK ("SUCCESSOR_ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ITEM_DEPEND_PRED
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ITEM_NODE_INDEX", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ITEM_DEPEND_SUCC
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_ITEM_DEPEND_SUCC
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD CHECK ("ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ITEM_DEPEND_SUCC
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "ITEM_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ITEM_DEPENDENCY
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_ORCH_ITEM_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD UNIQUE ("PREDECESSOR_ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Checks structure for table OM_ORCH_ITEM_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD CHECK ("DEPENDENCY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD CHECK ("PREDECESSOR_ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ITEM_DEPENDENCY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD PRIMARY KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ITEM_HIER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_ITEM_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD CHECK ("CHILD_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD CHECK ("PARENT_NODE_INDEX" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ITEM_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD PRIMARY KEY ("ORDER_SEQ_ID", "PARENT_NODE_INDEX", "CHILD_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ORDER_COMPONENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_ORDER_COMPONENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("COMP_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("ORCH_PLAN_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("ORCH_PLAN_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("COMP_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("COMP_TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("STATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("CONTEXT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD CHECK ("EXPECTED_START_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ORDER_COMPONENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ORDER_COMPONENT_ITEM
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XFK2OM_ORCH_ORDER_COMP_ITEM"
ON "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ("ORDER_SEQ_ID" ASC, "ITEM_NODE_INDEX" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORCH_ORDER_COMPONENT_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD CHECK ("COMP_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD CHECK ("ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ORDER_COMPONENT_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX", "ITEM_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_ORDER_ITEM
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_ORDER_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("ITEM_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("ORCH_PLAN_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("ORCH_PLAN_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("CONTEXT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD CHECK ("EXPECTED_COMPL_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_ORDER_ITEM
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ITEM_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORCH_PLAN
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORCH_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("ORCH_PLAN_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("ORCH_PLAN_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("SPEC_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("SPEC_NAMESPACE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("MODE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("MODE_NAMESPACE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD CHECK ("START_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORCH_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_AMENDMENT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE2OM_ORDER_AMENDMENT"
ON "ORDERMGMT"."OM_ORDER_AMENDMENT" ("AMENDMENT_ORDER_ID" ASC, "ORDER_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_AMENDMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK (COMPENSATION_TYPE in ('A', 'C', 'F'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("COMPENSATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("AMENDMENT_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("COMPENSATION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("AMENDMENT_CHANGES_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("AMENDMENT_SUBMIT_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("SKIPPED_AMENDING" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("ACTIVE_AMENDMENT_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD CHECK ("COMPENSATION_STAGE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_AMENDMENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COMPENSATION_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_AMENDMENT_KEY
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_ORDER_AMENDMENT_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD UNIQUE ("KEY", "ORDER_TYPE_MNEMONIC", "ORDER_SOURCE_MNEMONIC", "NAMESPACE_MNEMONIC");

-- ----------------------------
-- Checks structure for table OM_ORDER_AMENDMENT_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD CHECK ("ORDER_TYPE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD CHECK ("ORDER_SOURCE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD CHECK ("NAMESPACE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD CHECK ("KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_AMENDMENT_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_COMPENSATION_PLAN
-- ----------------------------
CREATE UNIQUE INDEX "ORDERMGMT"."XIE1OM_ORDER_COMPENSATION_PLAN"
ON "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ("ORDER_SEQ_ID" ASC, "ORDER_AMENDMENT_SEQ_ID" ASC, "HIST_SEQ_ID" ASC, "ORDER_NODE_INDEX" ASC)
NOLOGGING
VISIBLE;
CREATE UNIQUE INDEX "ORDERMGMT"."XIE2OM_ORDER_COMPENSATION_PLAN"
ON "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ("ORDER_SEQ_ID" ASC, "COMPENSATION_HIST_SEQ_ID" ASC, "HIST_SEQ_ID" ASC, "ORDER_NODE_INDEX" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_COMPENSATION_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK (execution_mode in ('D', 'U', 'R', 'A', 'I'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK (compensation_action in ('PROCESS', 'NONE'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("COMPENSATION_STAGE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("ORDER_AMENDMENT_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD CHECK ("COMPENSATION_ACTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_COMPENSATION_PLAN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ORDER_NODE_INDEX", "COMPENSATION_STAGE");

-- ----------------------------
-- Indexes structure for table OM_ORDER_DATA_DICTIONARY
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_ORDER_DATA_DICTIONARY
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_DATA_DICTION_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.DATA_DICTIONARY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.DATA_DICTIONARY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.DATA_DICTIONARY_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.DATA_DICTIONARY_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_ORDER_DATA_DICTIONARY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD UNIQUE ("DATA_DICTIONARY_MNEMONIC", "ELEMENT_CONTEXT", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_DATA_DICTIONARY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK (ATTRIBUTE_ENCRYPTED IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK (instr(DATA_DICTIONARY_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK (significant in ('Y','N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("DATA_DICTIONARY_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("ATTRIBUTE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("BUSINESS_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("ATTRIBUTE_LENGTH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("ATTRIBUTE_ENCRYPTED" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD CHECK ("SIGNIFICANT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_DATA_DICTIONARY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD PRIMARY KEY ("DATA_DICTIONARY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_FLOW
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_FLOW"
ON "ORDERMGMT"."OM_ORDER_FLOW" ("TASK_ID" ASC, "TASK_TYPE" ASC, "ORDER_SEQ_ID" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIEOM_ORDER_FLOW_DELAY_TASK"
ON "ORDERMGMT"."OM_ORDER_FLOW" (DECODE("TASK_TYPE",'D',"ORDER_SEQ_ID",NULL) ASC, DECODE("TASK_TYPE",'D',"TASK_ID",NULL) ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIEOM_ORDER_FLOW_RULE_TASK"
ON "ORDERMGMT"."OM_ORDER_FLOW" (DECODE("TASK_TYPE",'R',"ORDER_SEQ_ID",NULL) ASC, DECODE("TASK_TYPE",'R',"TASK_ID",NULL) ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_FLOW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK (EXECUTION_MODE in ('D', 'R', 'U', 'A', 'I'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK (TASK_TYPE IN ('C', 'M', 'A', 'R', 'D', 'N', 'S', 'X', 'K'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("DATE_POS_STARTED" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("AUTHOR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("COMPLETION_DATE_EXPECTED" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("COMPL_EXPECTED_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("PARENT_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("COORD_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD CHECK ("EXECUTION_MODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_FLOW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_FLOW_COORDINATOR
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_FLOW_COORDINATOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ADD CHECK ("COORD_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_FLOW_COORDINATOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ADD PRIMARY KEY ("ORDER_SEQ_ID", "COORD_SET_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_FLOW_REMARKS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_FLOW_REMARKS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("ORDER_FLOW_REMARK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("REMARKS_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("REMARK_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("REMARK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_FLOW_REMARKS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ORDER_FLOW_REMARK_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_FLOW_START
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_FLOW_START
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("PRECEDENCE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_FLOW_START
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD PRIMARY KEY ("ORDER_SOURCE_ID", "ORDER_TYPE_ID", "RULE_ID", "PRECEDENCE");

-- ----------------------------
-- Indexes structure for table OM_ORDER_HEADER
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" (RTRIM(UPPER("REFERENCE_NUMBER")) ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE4OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" ("ORD_START_DATE" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE5OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" ("ORD_CREATION_DATE" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE6OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" ("ORD_COMPLETION_DATE" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE7OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" ("ORD_COMPL_DATE_EXPECTED" ASC)
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE8OM_ORDER_HEADER"
ON "ORDERMGMT"."OM_ORDER_HEADER" ("CARTRIDGE_ID" ASC, "ORDER_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK (ord_completion_date <> to_date('31/12/9999', 'DD/MM/YYYY') 
                or (ord_state_id is not null AND ord_target_state_id is not null and ord_txn_start_date is not null and ord_txn_completion_date is not null 
                and ord_txn_grace_interval is not null and ord_txn_author is not null));
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("REFERENCE_NUMBER" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("FILE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORD_CREATION_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORD_START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORD_COMPLETION_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("ORD_COMPL_DATE_EXPECTED" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("NUM_REMARKS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("DB_INSTANCE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD CHECK ("CREATION_VIEW_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_HIER
-- ----------------------------
CREATE UNIQUE INDEX "ORDERMGMT"."XAK2OM_ORDER_HIER"
ON "ORDERMGMT"."OM_ORDER_HIER" ("PARENT_NODE_ID" ASC, "DATA_DICTIONARY_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XAK3OM_ORDER_HIER"
ON "ORDERMGMT"."OM_ORDER_HIER" ("REFERENCED_NODE_ID" ASC, "REFERENCED_NODE_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table OM_ORDER_HIER
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_ORDER_HIER_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.ORDER_NODE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.ORDER_NODE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.ORDER_NODE_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.ORDER_NODE_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_HIER_D_BR" BEFORE DELETE ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.remove_node(:old.order_node_id, :old.order_node_type);
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_HIER_I_A" AFTER INSERT ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.add_nodes_filters;
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_HIER_I_B" BEFORE INSERT ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.init_nodes;
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_HIER_I_BR" BEFORE INSERT ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.add_node(:new.order_node_id, :new.order_node_type);
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_HIER_U_BR" BEFORE UPDATE ON "ORDERMGMT"."OM_ORDER_HIER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if :new.order_node_id <> :old.order_node_id
or :new.order_node_type <> :old.order_node_type
or :new.parent_node_id <> :old.parent_node_id
or :new.parent_node_type <> :old.parent_node_type
then
error_msg(om_error_pkg.v_operation_not_allowed);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_ORDER_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD UNIQUE ("ORDER_NODE_ID", "PARENT_NODE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ((order_node_type <> 'T' 
                        and parent_node_id is not null
                        and parent_node_type is not null) or 
                        (order_node_id = 0 and order_node_type = 'T'
                        and parent_node_id is null
                        and parent_node_type is null));
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK (significant in ('Y','N') or significant is null);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK (PARENT_NODE_TYPE IN ('T', 'G', 'R'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK (REFERENCED_NODE_TYPE IN ('T', 'G', 'V', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_HIER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD PRIMARY KEY ("ORDER_NODE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_HIER_KEY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_HIER_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD CHECK ("KEY_POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD CHECK ("KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_HIER_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD PRIMARY KEY ("ORDER_NODE_ID", "KEY_POSITION");

-- ----------------------------
-- Indexes structure for table OM_ORDER_ID_BLOCK
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_ID_BLOCK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" ADD CHECK ("DBINSTANCE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" ADD CHECK ("FIRST_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" ADD CHECK ("LAST_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" ADD CHECK ("ANCESTRY_POPULATED_UP_TO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_ID_BLOCK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_BLOCK" ADD PRIMARY KEY ("LAST_ORDER_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_ID_FOR_BACKUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_ID_FOR_BACKUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_BACKUP" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table OM_ORDER_ID_FOR_CLONE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_ID_FOR_CLONE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_CLONE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_ID_FOR_CLONE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_CLONE" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_ID_FOR_PURGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_ID_FOR_PURGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_PURGE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_ID_FOR_PURGE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_ID_FOR_PURGE" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_INSTANCE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_INSTANCE"
ON "ORDERMGMT"."OM_ORDER_INSTANCE" ("ORDER_SEQ_ID" ASC, "PARENT_NODE_INDEX" ASC, "ORDER_NODE_ID" ASC)
PARALLEL 4
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE2OM_ORDER_INSTANCE"
ON "ORDERMGMT"."OM_ORDER_INSTANCE" ("CASE  WHEN "SEARCHABLE"<>'N' THEN "ORDER_NODE_ID" END " ASC, "CASE  WHEN "SEARCHABLE"<>'N' THEN "ORDER_TYPE_ID" END " ASC, "CASE  WHEN "SEARCHABLE"<>'N' THEN "ORDER_SOURCE_ID" END " ASC)
PARALLEL 4
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE3OM_ORDER_INSTANCE"
ON "ORDERMGMT"."OM_ORDER_INSTANCE" (CASE  WHEN "SEARCHABLE"='T' THEN UPPER("NODE_VALUE_TEXT") END  ASC, "CASE  WHEN "SEARCHABLE"='T' THEN "ORDER_NODE_ID" END " ASC, "CASE  WHEN "SEARCHABLE"='T' THEN "ORDER_SEQ_ID" END " ASC)
PARALLEL 4
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE4OM_ORDER_INSTANCE"
ON "ORDERMGMT"."OM_ORDER_INSTANCE" ("CASE  WHEN "SEARCHABLE"='I' THEN "NODE_VALUE_NUM" END " ASC, "CASE  WHEN "SEARCHABLE"='I' THEN "ORDER_NODE_ID" END " ASC, "CASE  WHEN "SEARCHABLE"='I' THEN "ORDER_SEQ_ID" END " ASC)
PARALLEL 4
NOLOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE5OM_ORDER_INSTANCE"
ON "ORDERMGMT"."OM_ORDER_INSTANCE" ("ORDER_SEQ_ID" ASC, "ORDER_NODE_ID" ASC)
PARALLEL 4
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ((order_node_type <> 'T'
and parent_node_id is not null
and parent_node_type is not null) or
(order_node_id = 0 and order_node_type = 'T'
and parent_node_id is null
and parent_node_type is null));
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK (SEARCHABLE IN ('N', 'T', 'I')) ENABLE NOVALIDATE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK (PARENT_NODE_TYPE IN ('T', 'G'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("PARENT_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("H$INST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("H$INST_TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD CHECK ("SEARCHABLE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_INSTANCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_NODE_INDEX");

-- ----------------------------
-- Indexes structure for table OM_ORDER_NODE_ANCESTRY
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_NODE_ANCESTRY"
ON "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ("ORDER_SEQ_ID" ASC, "ANCESTOR_NODE_INDEX" ASC, "ORDER_NODE_ID" ASC, "ORDER_NODE_TYPE" ASC, "ORDER_NODE_INDEX" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_NODE_ANCESTRY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("DEPTH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ANCESTOR_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ANCESTOR_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("ANCESTOR_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_NODE_ANCESTRY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD PRIMARY KEY ("ORDER_SEQ_ID", "ORDER_NODE_INDEX", "DEPTH");

-- ----------------------------
-- Checks structure for table OM_ORDER_NODE_ANCESTRY_TMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP" ADD CHECK ("ORDER_NODE_INDEX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY_TMP" ADD CHECK ("PARENT_NODE_INDEX" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table OM_ORDER_POS_INPUT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_POS_INPUT"
ON "ORDERMGMT"."OM_ORDER_POS_INPUT" ("ORDER_SEQ_ID" ASC, "PARENT_HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_POS_INPUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PROCESS_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PROCESS_POSITION_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("PARENT_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("COORD_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_POS_INPUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "PROCESS_STATUS_ID", "PROCESS_ID", "PROCESS_POSITION_ID", "PROCESS_ID_TO", "PROCESS_POSITION_ID_TO");

-- ----------------------------
-- Indexes structure for table OM_ORDER_REMARKS_TYPE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_ORDER_REMARKS_TYPE
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_REMARKS_TYPE_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.REMARKS_TYPE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.REMARKS_TYPE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.REMARKS_TYPE_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.REMARKS_TYPE_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_ORDER_REMARKS_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ADD CHECK ("REMARKS_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ADD CHECK ("REMARKS_TYPE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ADD CHECK ("REMARKS_TYPE_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_REMARKS_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ADD PRIMARY KEY ("REMARKS_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_SOURCE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_ORDER_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD UNIQUE ("ORDER_SOURCE_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK (instr(ORDER_SOURCE_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_SOURCE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_IMPORT_DIRECTORY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_SOURCE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_EXPORT_DIRECTORY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("ORDER_SOURCE_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_SOURCE" ADD PRIMARY KEY ("ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_STATE_EVENT_PENDING
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_STATE_EVENT_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD CHECK (STATUS in ('SUSPENDED', 'FAILURE'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD CHECK ("HIST_STATE_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD CHECK ("PREV_STATE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_STATE_EVENT_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_STATE_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_STATE_PENDING
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_STATE_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK (STATUS in ('SUSPENDED', 'FAILURE'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORD_TARGET_STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORD_TXN_START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORD_TXN_GRACE_INTERVAL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORD_TXN_EVENT_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD CHECK ("ORD_TXN_EVENT_INTERVAL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_STATE_PENDING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TEMPLATE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_TEMPLATE"
ON "ORDERMGMT"."OM_ORDER_TEMPLATE" ("T_PARENT_NODE_ID" ASC, "ORDER_TYPE_ID" ASC, "ORDER_SOURCE_ID" ASC)
PARALLEL 4
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table OM_ORDER_TEMPLATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD UNIQUE ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "T_PARENT_NODE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_TEMPLATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ((order_node_type <> 'T' 
                          and t_parent_node_id is not null 
                          and t_parent_node_type is not null) or 
                        (order_node_id = 0 and order_node_type = 'T'
                          and t_parent_node_id is null
                          and t_parent_node_type is null));
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK (significant in ('Y','N') or significant is null);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK (T_PARENT_NODE_TYPE IN ('T', 'G', 'R'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TEMPLATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD PRIMARY KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TEMPLATE_KEY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_TEMPLATE_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("KEY_POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD CHECK ("KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TEMPLATE_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD PRIMARY KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "KEY_POSITION");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TYPE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_ORDER_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD UNIQUE ("ORDER_TYPE_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK (instr(ORDER_TYPE_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK ("ORDER_TYPE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK ("ORDER_TYPE_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK ("ORDER_TYPE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TYPE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD PRIMARY KEY ("ORDER_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TYPE_CATEGORY
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_ORDER_TYPE_CATEGORY
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__ORDER_TYPE_CATEGOR_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.ORDER_TYPE_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.ORDER_TYPE_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.ORDER_TYPE_CATEGORY_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.ORDER_TYPE_CATEGORY_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_ORDER_TYPE_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ADD CHECK ("ORDER_TYPE_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ADD CHECK ("ORDER_TYPE_CATEGORY_DESCR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ADD CHECK ("ORDER_TYPE_CATEGORY_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TYPE_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ADD PRIMARY KEY ("ORDER_TYPE_CATEGORY_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TYPE_N_SOURCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_TYPE_N_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK (PRIORITY_MAX <= 9);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK (PRIORITY_MIN >= 0);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK (PRIORITY_MIN <= PRIORITY_MAX);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK (CREATION_TASK_TYPE IN ('C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("CREATION_TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("CREATION_TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("PRIORITY_MIN" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("PRIORITY_MAX" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD CHECK ("AMENDABLE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TYPE_N_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD PRIMARY KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TYPE_N_SOURCE_EVENT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_TYPE_N_SOURCE_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD CHECK (EVENT_TYPE_ID between 1 and 6);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD CHECK ("EVENT_TYPE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TYPE_N_SOURCE_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD PRIMARY KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID", "EVENT_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_TYPE_N_SOURCE_KEY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_ORDER_TYPE_N_SOURCE_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD CHECK ("KEY_POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD CHECK ("KEY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_TYPE_N_SOURCE_KEY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD PRIMARY KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID", "KEY_POSITION");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD UNIQUE ("ORDER_VIEW_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW" ADD PRIMARY KEY ("ORDER_VIEW_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_NODE
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_NODE"
ON "ORDERMGMT"."OM_ORDER_VIEW_NODE" ("ORDER_VIEW_SEQ_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table OM_ORDER_VIEW_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD UNIQUE ("REPORTING_LABEL");

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK (EDIT IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK (MAX_VIEW_INSTANCES >= 1);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK (MIN_VIEW_INSTANCES <= MAX_VIEW_INSTANCES);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK (significant = 'N' or significant is null);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("LABEL_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("EDIT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("MAX_VIEW_INSTANCES" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("MIN_VIEW_INSTANCES" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD PRIMARY KEY ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_DEF_DD
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_DEF_DD"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ("DATA_DICTIONARY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_DEF_DD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK (VIEW_RULE_TYPE IN ('calculate', 'style', 'relevant', 'lookup', 'constraint', 'readonly', 'event', 'information', 'instancedeclaration'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK (STATUS IN ('ENABLED', 'DISABLED'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK (RULE_IS_FINAL IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK (RULE_OVERRIDES IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK ("VIEW_RULE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_DEF_DD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD PRIMARY KEY ("VIEW_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_DEF_OH
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_DEF_OH"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ("ORDER_NODE_ID" ASC)
PARALLEL 4
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_DEF_OH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK (VIEW_RULE_TYPE IN ('calculate', 'style', 'relevant', 'lookup', 'constraint', 'readonly', 'event', 'information', 'instancedeclaration'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK (STATUS IN ('ENABLED', 'DISABLED'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK (RULE_IS_FINAL IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK (RULE_OVERRIDES IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK ("VIEW_RULE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_DEF_OH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD PRIMARY KEY ("VIEW_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_DEF_OT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_DEF_OT"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ("ORDER_NODE_ID" ASC, "ORDER_TYPE_ID" ASC, "ORDER_SOURCE_ID" ASC)
PARALLEL 4
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_DEF_OT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK (VIEW_RULE_TYPE IN ('calculate', 'style', 'relevant', 'lookup', 'constraint', 'readonly', 'event', 'information', 'instancedeclaration'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK (STATUS IN ('ENABLED', 'DISABLED'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK (RULE_IS_FINAL IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK (RULE_OVERRIDES IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("VIEW_RULE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_DEF_OT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD PRIMARY KEY ("VIEW_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_DEF_VN
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_DEF_VN"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ("ORDER_NODE_ID" ASC, "ORDER_VIEW_SEQ_ID" ASC)
PARALLEL 4
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_DEF_VN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK (VIEW_RULE_TYPE IN ('calculate', 'style', 'relevant', 'lookup', 'constraint', 'readonly', 'event', 'information', 'instancedeclaration'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK (STATUS IN ('ENABLED', 'DISABLED'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R', 'C'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK (RULE_IS_FINAL IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK (RULE_OVERRIDES IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("VIEW_RULE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_DEF_VN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD PRIMARY KEY ("VIEW_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_DD
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_EXPR_DD"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ("VIEW_RULE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_DD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD CHECK (EXPRESSION_TYPE IN ('expression','message','calculation','parameter','baseSelector','labelSelector','valueSelector','label','hint','help','newline','secretField','externalInstance','inlineInstance','xqueryInstance','placeInNewPage','placeInPage','pageDef','tableDef','columnDef'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD CHECK ("EXPRESSION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD CHECK ("EXPRESSION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD CHECK ("EXPRESSION_TEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_DD
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD PRIMARY KEY ("EXPRESSION_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OH
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_EXPR_OH"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ("VIEW_RULE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD CHECK (EXPRESSION_TYPE IN ('expression','message','calculation','parameter','baseSelector','labelSelector','valueSelector','label','hint','help','newline', 'secretField', 'externalInstance','inlineInstance','xqueryInstance','placeInNewPage','placeInPage','pageDef','tableDef','columnDef'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD CHECK ("EXPRESSION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD CHECK ("EXPRESSION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD CHECK ("EXPRESSION_TEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OH
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD PRIMARY KEY ("EXPRESSION_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_EXPR_OT"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ("VIEW_RULE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD CHECK (EXPRESSION_TYPE IN ('expression','message','calculation','parameter','baseSelector','labelSelector','valueSelector','label','hint','help','newline', 'secretField', 'externalInstance','inlineInstance','xqueryInstance','placeInNewPage','placeInPage','pageDef','tableDef','columnDef'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD CHECK ("EXPRESSION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD CHECK ("EXPRESSION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD CHECK ("EXPRESSION_TEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_OT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD PRIMARY KEY ("EXPRESSION_ID");

-- ----------------------------
-- Indexes structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_VN
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_ORDER_VIEW_RULE_EXPR_VN"
ON "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ("VIEW_RULE_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_VN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD CHECK (EXPRESSION_TYPE IN ('expression','message','calculation','parameter','baseSelector','labelSelector','valueSelector','label','hint','help','newline', 'secretField','externalInstance','inlineInstance','xqueryInstance','placeInNewPage','placeInPage','pageDef','tableDef','columnDef'));
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD CHECK ("EXPRESSION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD CHECK ("VIEW_RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD CHECK ("EXPRESSION_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD CHECK ("EXPRESSION_TEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_ORDER_VIEW_RULE_EXPR_DEF_VN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD PRIMARY KEY ("EXPRESSION_ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_OSPOLICY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD UNIQUE ("MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_OSPOLICY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD CHECK (instr(mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD CHECK ("MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_CONDITION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_CONDITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD CHECK ("TXN_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD CHECK ("CONDITION_RULE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_CONDITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD PRIMARY KEY ("STATE_POLICY_ID", "STATE_ID", "TXN_ID", "CONDITION_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_PERMISSION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_PERMISSION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD CHECK ("TXN_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD CHECK ("WORKGROUP_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD CHECK ("PRIVILEGE_RULE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_PERMISSION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD PRIMARY KEY ("STATE_POLICY_ID", "STATE_ID", "TXN_ID", "WORKGROUP_SET_ID", "PRIVILEGE_RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_RULE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_RULE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD CHECK (
				severity_level in ('VALID', 'WARNING', 'ERROR', 'CRITICAL')
			);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD CHECK ("SOURCE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_RULE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD PRIMARY KEY ("STATE_POLICY_ID", "ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_STATE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" ADD CHECK (instr(mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" ADD CHECK (mnemonic in ('no_state', 'not_started', 'suspended','failed','cancelled', 'in_progress', 'amending', 'cancelling',  'completed', 'aborted', 'waiting_for_revision'));
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" ADD CHECK ("MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_STATE_TXN
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_STATE_TXN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK (txn_min_grace_period<=txn_max_grace_period);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("TXN_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("TXN_MIN_GRACE_PERIOD" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("TXN_MAX_GRACE_PERIOD" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD CHECK ("TXN_EVENT_INTERVAL" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_STATE_TXN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD PRIMARY KEY ("STATE_POLICY_ID", "STATE_ID", "TXN_ID");

-- ----------------------------
-- Indexes structure for table OM_OSPOLICY_TXN
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OSPOLICY_TXN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" ADD CHECK (instr(mnemonic, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" ADD CHECK (mnemonic in ('delete_order', 'update_order_no_task_context', 'raise_exceptions', 'process_task','raise_notification','suspend_order','resume_order','submit_amendment','cancel_order','process_amendment', 'fail_order', 'abort_order', 'manage_order_fallout' ));
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" ADD CHECK ("MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OSPOLICY_TXN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_TXN" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_OT_INSIGNIFICANT_SEL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_OT_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD CHECK ("SELECTOR_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_OT_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD PRIMARY KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "SELECTOR_ID");

-- ----------------------------
-- Indexes structure for table OM_PARAMETER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PARAMETER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PARAMETER" ADD CHECK (instr(MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_PARAMETER" ADD CHECK ("MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PARAMETER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PARAMETER" ADD PRIMARY KEY ("MNEMONIC");

-- ----------------------------
-- Indexes structure for table OM_PIVOT_NODE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_PIVOT_NODE
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__PIVOT_NODE_D_BR" BEFORE DELETE ON "ORDERMGMT"."OM_PIVOT_NODE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.remove_pivot(:old.order_node_id, :old.order_node_type);
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__PIVOT_NODE_I_BR" BEFORE INSERT ON "ORDERMGMT"."OM_PIVOT_NODE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if om_internal_pkg.is_internal = 0 then
om_pivot_meta_pkg.add_pivot(:new.order_node_id, :new.order_node_type);
end if;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__PIVOT_NODE_U_BR" BEFORE UPDATE ON "ORDERMGMT"."OM_PIVOT_NODE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
error_msg(om_error_pkg.v_operation_not_allowed);
end;

-- ----------------------------
-- Checks structure for table OM_PIVOT_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PIVOT_NODE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PIVOT_NODE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PIVOT_NODE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PIVOT_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PIVOT_NODE" ADD PRIMARY KEY ("ORDER_NODE_ID");

-- ----------------------------
-- Indexes structure for table OM_POS_NOTIFICATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_POS_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_POS_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_POSITION_ID", "STATE_ID", "PROCESS_STATUS_ID", "NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_PROCESS
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__PROCESS_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_PROCESS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.PROCESS_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.PROCESS_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.PROCESS_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.PROCESS_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_PROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD UNIQUE ("PROCESS_ID_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_PROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ((process_type = 'ORCHESTRATION' and orchestration_namespace is not null and orchestration_name is not null) or
			(process_type = 'FLOW' and orchestration_namespace is null and orchestration_name is null));
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("PROCESS_ID_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("PROCESS_EXPECTED_DURATION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("PROCESS_ID_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("WORKSTREAM" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD CHECK ("PROCESS_TYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS" ADD PRIMARY KEY ("PROCESS_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_CONTROL
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_PROCESS_CONTROL"
ON "ORDERMGMT"."OM_PROCESS_CONTROL" ("PROCESS_ID_TO" ASC, "PROCESS_POSITION_ID_TO" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table OM_PROCESS_CONTROL
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_OM_PROCESS_CONTROL_IU_BR" BEFORE INSERT OR UPDATE ON "ORDERMGMT"."OM_PROCESS_CONTROL" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
declare
v_wait_input_type om_process_position.wait_input_type%type;
v_out_task_type OM_TASK.TASK_TYPE%TYPE;
begin
if :new.process_id           = :new.process_id_to and
:new.process_position_id  = :new.process_position_id_to then
select wait_input_type
into v_wait_input_type
from om_process_position
where
process_id            = :new.process_id and
process_position_id   = :new.process_position_id;
if v_wait_input_type = 'ALL' then
error_msg(om_error_pkg.v_invalid_process_definition,
om_db_msg_pkg.v_not_wait_for_itself);
end if;
end if;
if :new.mandatory_check = 'Y' then
select task_type
into v_out_task_type
from om_process_position
where
process_id            = :new.process_id and
process_position_id   = :new.process_position_id;
if v_out_task_type in
( om_const_pkg.v_rule_task_type,
om_const_pkg.v_delay_task_type,
om_const_pkg.v_subprocess_task_type) then
error_msg(om_error_pkg.v_invalid_process_definition,
om_db_msg_pkg.v_not_mandatory_bgnd_task);
end if;
end if;
end;

-- ----------------------------
-- Checks structure for table OM_PROCESS_CONTROL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK (MANDATORY_CHECK IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("PROCESS_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("PROCESS_POSITION_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("MANDATORY_CHECK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("REPORTING_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_CONTROL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD PRIMARY KEY ("PROCESS_STATUS_ID", "PROCESS_ID", "PROCESS_POSITION_ID", "PROCESS_ID_TO", "PROCESS_POSITION_ID_TO");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_JUMP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PROCESS_JUMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("PROCESS_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("PROCESS_POSITION_ID_TO" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("REPORTING_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_JUMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_STATUS_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_POINT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PROCESS_POINT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POINT" ADD CHECK ("PROCESS_POINT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_POINT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POINT" ADD PRIMARY KEY ("PROCESS_POINT");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_POSITION
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_PROCESS_POSITION"
ON "ORDERMGMT"."OM_PROCESS_POSITION" ("TASK_ID" ASC, "TASK_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table OM_PROCESS_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD UNIQUE ("PROCESS_ID", "POSITION_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_PROCESS_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ((process_id <> 0 and task_type <> 'C')
                        or 
                        ( process_id = 0 and
                          process_position_id = task_id and
                          task_type = 'C'));
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK (TASK_TYPE IN ('C', 'M', 'A', 'R', 'D', 'N', 'S', 'X', 'K'));
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK (WAIT_INPUT_TYPE IN ('NONE', 'ANY', 'ALL'));
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("WAIT_INPUT_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("POSITION_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("POSITION_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD CHECK ("SHOW_IN_PROCESS_HISTORY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_POSITION_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_POSITION_MILESTONE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PROCESS_POSITION_MILESTONE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" ADD CHECK ("MILESTONE_REF_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_POSITION_MILESTONE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" ADD PRIMARY KEY ("MILESTONE_REF_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_START_POSITION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PROCESS_START_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD CHECK ("PROCESS_START_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_START_POSITION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD PRIMARY KEY ("PROCESS_ID");

-- ----------------------------
-- Indexes structure for table OM_PROCESS_STATUS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_PROCESS_STATUS
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__PROCESS_STATUS_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_PROCESS_STATUS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
IF ( INSERTING AND om_const_pkg.v_user_defined_min_id > :new.process_status_id )
OR ( UPDATING AND om_const_pkg.v_user_defined_min_id <= :old.process_status_id AND om_const_pkg.v_user_defined_min_id > :new.process_status_id )
OR ( DELETING AND om_const_pkg.v_user_defined_min_id > :old.process_status_id ) THEN
error_msg(om_error_pkg.v_id_range_violation);
ELSIF ( UPDATING AND om_const_pkg.v_user_defined_min_id > :old.process_status_id ) THEN
IF ( :new.process_status_id <> :old.process_status_id )
OR ( :new.process_status_mnemonic <> :old.process_status_mnemonic )
OR ( :new.status_category_id <> :old.status_category_id )
OR ( :new.process_status_description <> :old.process_status_description )
OR ( :new.process_status_icon_id <> :old.process_status_icon_id )
OR ( :new.cartridge_id <> :old.cartridge_id ) THEN
error_msg(om_error_pkg.v_id_range_violation);
END IF;
END IF;
END;

-- ----------------------------
-- Uniques structure for table OM_PROCESS_STATUS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD UNIQUE ("PROCESS_STATUS_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_PROCESS_STATUS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK (instr(PROCESS_STATUS_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("PROCESS_STATUS_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("STATUS_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("PROCESS_STATUS_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("PROCESS_STATUS_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PROCESS_STATUS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD PRIMARY KEY ("PROCESS_STATUS_ID");

-- ----------------------------
-- Indexes structure for table OM_PURGED_ORDERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_PURGED_ORDERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("MAX_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("MIN_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("PURGE_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD CHECK ("OPERATION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_PURGED_ORDERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PURGED_ORDERS" ADD PRIMARY KEY ("MAX_ORDER_ID");

-- ----------------------------
-- Indexes structure for table OM_REGION
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_REGION
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__REGION_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_REGION" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.REGION_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.REGION_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.REGION_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.REGION_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_REGION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD UNIQUE ("REGION_MNEMONIC");

-- ----------------------------
-- Checks structure for table OM_REGION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD CHECK (instr(REGION_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD CHECK ("REGION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD CHECK ("REGION_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD CHECK ("REGION_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_REGION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION" ADD PRIMARY KEY ("REGION_ID");

-- ----------------------------
-- Indexes structure for table OM_REGION_HIERARCHY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_REGION_HIERARCHY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD CHECK (DEPTH >= 0);
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD CHECK ("REGION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD CHECK ("ANCESTOR_REGION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD CHECK ("DEPTH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_REGION_HIERARCHY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD PRIMARY KEY ("REGION_ID", "ANCESTOR_REGION_ID");

-- ----------------------------
-- Indexes structure for table OM_RELATED_ORDER
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_RELATED_ORDER"
ON "ORDERMGMT"."OM_RELATED_ORDER" ("PARENT_ORDER_ID" ASC, "PARENT_HIST_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_RELATED_ORDER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD CHECK ("PARENT_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD CHECK ("PARENT_HIST_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD CHECK ("PARENT_TASK_STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD CHECK ("PARENT_CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RELATED_ORDER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD PRIMARY KEY ("ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_RELATED_ORDER_TMP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_RELATED_ORDER_TMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP" ADD CHECK ("RELATED_ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP" ADD CHECK ("FLAG" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RELATED_ORDER_TMP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER_TMP" ADD PRIMARY KEY ("ORDER_SEQ_ID", "RELATED_ORDER_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_RESPONSIBILITY
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_RESPONSIBILITY
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__RESPONSIBILITY_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_RESPONSIBILITY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.RESPONSIBILITY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.RESPONSIBILITY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.RESPONSIBILITY_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.RESPONSIBILITY_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_RESPONSIBILITY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RESPONSIBILITY" ADD CHECK ("RESPONSIBILITY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RESPONSIBILITY" ADD CHECK ("RESPONSIBILITY_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RESPONSIBILITY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RESPONSIBILITY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RESPONSIBILITY" ADD PRIMARY KEY ("RESPONSIBILITY_ID");

-- ----------------------------
-- Indexes structure for table OM_RULE_DEF
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_RULE_DEF
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__RULE_DEF_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_RULE_DEF" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.RULE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.RULE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.RULE_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.RULE_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_RULE_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD UNIQUE ("MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_RULE_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK (instr(MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK (STATUS IN ('CHANGED', 'CACHED'));
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK ("RULE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK ("MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RULE_DEF
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_DEF" ADD PRIMARY KEY ("RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_RULE_SOURCE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_RULE_SOURCE
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_RULE_SOURCE_UD_BR" BEFORE DELETE OR UPDATE OF "RULE_TEXT" ON "ORDERMGMT"."OM_RULE_SOURCE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
declare
v_rule_id integer;
begin
if updating then
v_rule_id := :new.rule_id;
elsif deleting then
v_rule_id := :old.rule_id;
end if;
update om_rule_def
set status = 'CHANGED'
where rule_id = v_rule_id;
end;
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__RULE_SOURCE_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_RULE_SOURCE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.RULE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.RULE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.RULE_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.RULE_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_RULE_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_SOURCE" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_SOURCE" ADD CHECK ("RULE_TEXT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_SOURCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RULE_SOURCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_SOURCE" ADD PRIMARY KEY ("RULE_ID");

-- ----------------------------
-- Indexes structure for table OM_RULE_TASK
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_RULE_TASK
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_RULE_TASK_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_RULE_TASK" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_RULE_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD CHECK (TASK_TYPE IN ('R', 'D'));
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_RULE_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_SCHEDULE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SCHEDULE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE" ADD CHECK (instr(SCHEDULE_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE" ADD CHECK ("SCHEDULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE" ADD CHECK ("SCHEDULE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE" ADD CHECK ("SCHEDULE_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SCHEDULE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE" ADD PRIMARY KEY ("SCHEDULE_ID");

-- ----------------------------
-- Indexes structure for table OM_SCHEDULE_DETAIL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SCHEDULE_DETAIL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD CHECK (trunc(shift_start_seconds/(24*3600))=trunc(shift_stop_seconds/(24*3600)));
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD CHECK ("SCHEDULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD CHECK ("SHIFT_START_SECONDS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD CHECK ("SHIFT_STOP_SECONDS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SCHEDULE_DETAIL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD PRIMARY KEY ("SCHEDULE_ID", "SHIFT_START_SECONDS");

-- ----------------------------
-- Indexes structure for table OM_SCHEDULE_EXCEPTIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SCHEDULE_EXCEPTIONS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD CHECK (start_date < stop_date);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD CHECK ("START_DATE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD CHECK ("STOP_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SCHEDULE_EXCEPTIONS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD PRIMARY KEY ("WORKGROUP_ID", "START_DATE");

-- ----------------------------
-- Indexes structure for table OM_SEQUENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SEQUENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE" ADD CHECK ("MAX_SEQUENCE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SEQUENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE" ADD PRIMARY KEY ("ORDER_SEQ_ID", "NAME");

-- ----------------------------
-- Indexes structure for table OM_SEQUENCE_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SEQUENCE_TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE_TABLE" ADD CHECK ("SEQUENCE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SEQUENCE_TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SEQUENCE_TABLE" ADD PRIMARY KEY ("SEQUENCE_NAME");

-- ----------------------------
-- Indexes structure for table OM_SERVER_STRINGS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SERVER_STRINGS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SERVER_STRINGS" ADD CHECK ("CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SERVER_STRINGS" ADD CHECK ("KEY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SERVER_STRINGS" ADD CHECK ("DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SERVER_STRINGS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SERVER_STRINGS" ADD PRIMARY KEY ("CLASS", "KEY");

-- ----------------------------
-- Indexes structure for table OM_SQL_LOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SQL_LOG
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SQL_LOG" ADD CHECK ("SID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SQL_LOG" ADD CHECK ("LINE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SQL_LOG" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SQL_LOG" ADD CHECK ("SQL_TEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SQL_LOG
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SQL_LOG" ADD PRIMARY KEY ("SID", "LINE");

-- ----------------------------
-- Indexes structure for table OM_SQL_POINTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SQL_POINTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SQL_POINTER" ADD CHECK ("SID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SQL_POINTER" ADD CHECK ("LINE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SQL_POINTER" ADD CHECK ("ERROR_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SQL_POINTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SQL_POINTER" ADD PRIMARY KEY ("SID");

-- ----------------------------
-- Indexes structure for table OM_STATE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_STATE
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__STATE_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_STATE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.STATE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.STATE_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.STATE_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.STATE_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD UNIQUE ("STATE_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK (instr(STATE_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("STATE_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("STATE_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("STATE_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("STATE_ICON_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD PRIMARY KEY ("STATE_ID");

-- ----------------------------
-- Indexes structure for table OM_STATE_CATEGORY
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_STATE_CATEGORY
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__STATE_CATEGORY_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_STATE_CATEGORY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.STATE_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.STATE_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.STATE_CATEGORY_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.STATE_CATEGORY_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_STATE_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE_CATEGORY" ADD CHECK (instr(STATE_CATEGORY_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_STATE_CATEGORY" ADD CHECK ("STATE_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE_CATEGORY" ADD CHECK ("STATE_CATEGORY_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATE_CATEGORY" ADD CHECK ("STATE_CATEGORY_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_STATE_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE_CATEGORY" ADD PRIMARY KEY ("STATE_CATEGORY_ID");

-- ----------------------------
-- Indexes structure for table OM_STATUS_CATEGORY
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_STATUS_CATEGORY
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__STATUS_CATEGORY_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_STATUS_CATEGORY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.STATUS_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.STATUS_CATEGORY_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.STATUS_CATEGORY_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.STATUS_CATEGORY_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_STATUS_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATUS_CATEGORY" ADD CHECK ("STATUS_CATEGORY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_STATUS_CATEGORY" ADD CHECK ("STATUS_CATEGORY_DESCRIPTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_STATUS_CATEGORY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATUS_CATEGORY" ADD PRIMARY KEY ("STATUS_CATEGORY_ID");

-- ----------------------------
-- Indexes structure for table OM_SUBPROC_STATUS_MAP
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_SUBPROC_STATUS_MAP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD UNIQUE ("PROCESS_ID", "PROCESS_POSITION_ID", "SUBPROCESS_ID", "SUBPROCESS_STATUS_ID");

-- ----------------------------
-- Checks structure for table OM_SUBPROC_STATUS_MAP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK (TERMINATE_CHILDREN IN ('none', 'one', 'all'));
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK (TASK_TRANS_TYPE IN ('C', 'J'));
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("PROCESS_POSITION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("SUBPROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("SUBPROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("TASK_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("TASK_TRANS_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("TERMINATE_CHILDREN" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("REPORTING_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SUBPROC_STATUS_MAP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD PRIMARY KEY ("PROCESS_ID", "PROCESS_POSITION_ID", "PRIORITY");

-- ----------------------------
-- Indexes structure for table OM_SUBPROCESS_START
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_SUBPROCESS_START
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK (TASK_TYPE IN ('S'));
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("PRIORITY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("PROCESS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("RULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SUBPROCESS_START
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "PRIORITY");

-- ----------------------------
-- Indexes structure for table OM_SYSTEM_EVENT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_SYSTEM_EVENT"
ON "ORDERMGMT"."OM_SYSTEM_EVENT" ("ID1" ASC, "TEXT1" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."XIE2OM_SYSTEM_EVENT"
ON "ORDERMGMT"."OM_SYSTEM_EVENT" ("ID2" ASC, "TEXT2" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_SYSTEM_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK (EVENT_TYPE IN ('RULE', 'NOTIF'));
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK (CLEARED IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK ("EVENT_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK ("EVENT_TIMESTAMP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK ("EVENT_TEXT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK ("CLEARED" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD CHECK ("USERNAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_SYSTEM_EVENT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SYSTEM_EVENT" ADD PRIMARY KEY ("EVENT_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_TASK
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_TASK_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_TASK" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) then
if om_internal_pkg.is_internal = 0 then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end if;
end;

-- ----------------------------
-- Uniques structure for table OM_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD UNIQUE ("TASK_MNEMONIC", "CARTRIDGE_ID");

-- ----------------------------
-- Checks structure for table OM_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (instr(TASK_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (TASK_STATUS IN ('VALID', 'INVALID'));
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (sequential = 'Y' or sequential = 'N' or sequential is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (SORT_NODE_TYPE = 'V' or SORT_NODE_TYPE is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (SORT_TYPE = 'A' or SORT_TYPE = 'D' or SORT_TYPE is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R'));
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (rollback_comp_strategy in ('I', 'U') or rollback_comp_strategy is null);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (reevaluate_comp_strategy in ('I','R','U') or reevaluate_comp_strategy is null);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (TASK_TYPE in ('M', 'A', 'S', 'K') or
                        ( ORDER_NODE_ID is NULL and
                          ORDER_NODE_TYPE is null));
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK (TASK_TYPE IN ('C', 'M', 'A', 'R', 'D', 'N', 'S', 'X', 'K'));
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("TASK_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("TASK_STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD CHECK ("PRIORITY_OFFSET" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_TASK_BEHAVIOR
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_BEHAVIOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD CHECK ("BEHAVIOR_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_BEHAVIOR
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD PRIMARY KEY ("BEHAVIOR_ID", "TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_TASK_COORD_NODE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_COORD_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK (ORDER_NODE_TYPE IN ('T', 'G', 'V', 'R'));
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK (sequential = 'Y' or sequential = 'N' or sequential is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK (SORT_NODE_TYPE = 'V' or SORT_NODE_TYPE is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK (SORT_TYPE = 'A' or SORT_TYPE = 'D' or SORT_TYPE is NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD CHECK (TASK_TYPE IN ('M', 'A', 'S', 'K'));

-- ----------------------------
-- Primary Key structure for table OM_TASK_COORD_NODE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_FALLOUT
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK (TASK_TYPE IN ('M', 'A'));
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("FALLOUT_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_FALLOUT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "FALLOUT_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_FALLOUT_GROUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_FALLOUT_GROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK (TASK_TYPE IN ('M', 'A'));
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("FALLOUT_GROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_FALLOUT_GROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "ORDER_TYPE_ID", "ORDER_SOURCE_ID", "FALLOUT_GROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_NOTIFICATION
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK (EXECUTION_MODE in ('D', 'R', 'U'));
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD CHECK ("EXECUTION_MODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_NOTIFICATION
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "STATE_ID", "EXECUTION_MODE", "PROCESS_STATUS_ID", "NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_ORDER_VIEW
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_TASK_ORDER_VIEW"
ON "ORDERMGMT"."OM_TASK_ORDER_VIEW" ("ORDER_VIEW_SEQ_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_TASK_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK (TASK_TYPE IN ('M', 'A', 'K'));
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_STATE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_TASK_STATE
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_TASK_STATE_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_TASK_STATE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_TASK_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD CHECK (TASK_TYPE IN ('C', 'M', 'A', 'R', 'D', 'N', 'S', 'X', 'K'));
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD CHECK ("STATE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_STATE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD PRIMARY KEY ("TASK_ID", "TASK_TYPE", "STATE_ID");

-- ----------------------------
-- Indexes structure for table OM_TASK_STATUS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_TASK_STATUS
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI_TASK_STATUS_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_TASK_STATUS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.TASK_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.TASK_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_TASK_STATUS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD CHECK (TASK_TYPE IN ('C', 'M', 'A', 'R', 'D', 'N', 'S', 'X', 'K'));
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD CHECK ("PROCESS_STATUS_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_STATUS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD PRIMARY KEY ("PROCESS_STATUS_ID", "TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_TASK_WORKGROUP
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_TASK_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK (AUTHORITY IN ('USER', 'MANAGER'));
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK (execution_modes >  0);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK (execution_modes < 8);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK (TASK_TYPE IN ('M', 'A', 'C', 'K'));
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("AUTHORITY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD CHECK ("EXECUTION_MODES" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_TASK_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD PRIMARY KEY ("WORKGROUP_ID", "TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_UNDO_BRANCH_ROOT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."XIE1OM_UNDO_BRANCH_ROOT"
ON "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ("ORDER_SEQ_ID" ASC, "BRANCH_ROOT_HIST_SEQ_ID" ASC)
NOLOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table OM_UNDO_BRANCH_ROOT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD CHECK ("HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD CHECK ("ORDER_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD CHECK ("BRANCH_ROOT_HIST_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD CHECK ("ORDER_AMENDMENT_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD CHECK ("WILL_ROLL_FORWARD" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_UNDO_BRANCH_ROOT
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD PRIMARY KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "BRANCH_ROOT_HIST_SEQ_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_ATTRIBUTES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_ATTRIBUTES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK (instr(ATTR_MNEMONIC_CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("ATTR_MNEMONIC_CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("ATTR_MNEMONIC_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("VALUE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_ATTRIBUTES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID", "CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_GENERIC_PREFERENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_GENERIC_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK (instr(CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK (instr(PREFERENCE_USAGE, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK ("CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK ("PREFERENCE_USAGE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_GENERIC_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "CLASS", "ID", "PREFERENCE_USAGE");

-- ----------------------------
-- Indexes structure for table OM_USER_HEADER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD CHECK (instr(MNEMONIC_PATH, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD CHECK ("MNEMONIC_PATH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_HEADER" ADD PRIMARY KEY ("USERNAME", "POSITION");

-- ----------------------------
-- Indexes structure for table OM_USER_MULTIQUERY_PREFERENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_MULTIQUERY_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD CHECK (instr(CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD CHECK ("CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_MULTIQUERY_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "CLASS", "ID");

-- ----------------------------
-- Indexes structure for table OM_USER_NOTIFY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_NOTIFY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_NOTIFY" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_NOTIFY" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_NOTIFY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_NOTIFY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_NOTIFY" ADD PRIMARY KEY ("USERNAME", "NOTIFICATION_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_ORD_LIST_COLUMN
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_ORD_LIST_COLUMN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK (instr(CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK (instr(MNEMONIC_PATH, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK (SORT_TYPE in ('ASC', 'DESC'));
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("MNEMONIC_PATH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_ORD_LIST_COLUMN
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "CLASS", "ID", "POSITION", "CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_PREF_ATTRIBUTE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_PREF_ATTRIBUTE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK (instr(PREFERENCE_CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK (instr(PREFERENCE_USAGE, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK (instr(ATTR_MNEMONIC_CLASS, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK (instr(USAGE, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("PREFERENCE_CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("PREFERENCE_USAGE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("ATTR_MNEMONIC_CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("ATTR_MNEMONIC_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("USAGE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD CHECK ("SAVED_PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_PREF_ATTRIBUTE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_CLASS", "PREFERENCE_ID", "PREFERENCE_USAGE", "ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID", "USAGE", "SAVED_PREFERENCE_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_PREFERENCES
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_USER_PREFERENCES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD UNIQUE ("PREFERENCE_NAME", "SCOPE", "USERNAME");

-- ----------------------------
-- Checks structure for table OM_USER_PREFERENCES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK (SCOPE IN ('worklist', 'search_list'));
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK (DEFAULT_PREF IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK (ACTION IN ('Y', 'N'));
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("PREFERENCE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("SCOPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("DEFAULT_PREF" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD CHECK ("ACTION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_PREFERENCES
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREFERENCES" ADD PRIMARY KEY ("PREFERENCE_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_QUERY_FILTERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_QUERY_FILTERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("ATTR_MNEMONIC_CLASS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("ATTR_MNEMONIC_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("VALUE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD CHECK ("POSITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_QUERY_FILTERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "POSITION", "ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID", "CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_USER_TASK_PREFERENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USER_TASK_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK (TASK_TYPE IN ('M', 'A', 'C'));
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK ("TASK_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK ("TASK_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD CHECK ("PREFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_TASK_PREFERENCE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD PRIMARY KEY ("USERNAME", "PREFERENCE_ID", "TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Indexes structure for table OM_USER_WORKGROUP
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_USER_WORKGROUP
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__USER_WORKGROUP_IU_BR" BEFORE INSERT OR UPDATE ON "ORDERMGMT"."OM_USER_WORKGROUP" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
:new.username := lower(:new.username);
end;

-- ----------------------------
-- Checks structure for table OM_USER_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_WORKGROUP" ADD CHECK ("USERNAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USER_WORKGROUP" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USER_WORKGROUP
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_WORKGROUP" ADD PRIMARY KEY ("USERNAME", "WORKGROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_USERS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_USERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USERS" ADD CHECK (USER_ROLE IN ('OMS_client', 'OMS_user_assigner', 'OMS_workgroup_manager'));
ALTER TABLE "ORDERMGMT"."OM_USERS" ADD CHECK ("USER_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_USERS" ADD CHECK ("USER_ROLE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_USERS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USERS" ADD PRIMARY KEY ("USER_NAME", "USER_ROLE");

-- ----------------------------
-- Indexes structure for table OM_VIEW_INSIGNIFICANT_SEL
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_VIEW_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_NODE_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD CHECK ("SELECTOR_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_VIEW_INSIGNIFICANT_SEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD PRIMARY KEY ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID", "SELECTOR_ID");

-- ----------------------------
-- Indexes structure for table OM_VIEW_ORDER_NODE_LABEL
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OM_VIEW_ORDER_NODE_LABEL
-- ----------------------------
CREATE OR REPLACE TRIGGER "ORDERMGMT"."TRI__VIEW_ORDER_NODE_LA_IUD_BR" BEFORE INSERT OR DELETE OR UPDATE ON "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
begin
if ( inserting and om_const_pkg.v_user_defined_min_id > :new.LABEL_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :new.LABEL_ID ) or
( updating and om_const_pkg.v_user_defined_min_id > :old.LABEL_ID ) or
( deleting and om_const_pkg.v_user_defined_min_id > :old.LABEL_ID ) then
error_msg(om_error_pkg.v_id_range_violation);
end if;
end;

-- ----------------------------
-- Checks structure for table OM_VIEW_ORDER_NODE_LABEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" ADD CHECK ("LABEL_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" ADD CHECK ("LABEL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_VIEW_ORDER_NODE_LABEL
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" ADD PRIMARY KEY ("LABEL_ID");

-- ----------------------------
-- Indexes structure for table OM_WGSET_WORKGROUPS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WGSET_WORKGROUPS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" ADD CHECK ("WORKGROUP_SET_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WGSET_WORKGROUPS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" ADD PRIMARY KEY ("WORKGROUP_SET_ID", "WORKGROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUP_FILTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WORKGROUP_FILTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD CHECK (STATUS IN ('CHANGED', 'CACHED'));
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD CHECK ("TEXT" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD CHECK ("STATUS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUP_FILTER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD PRIMARY KEY ("WORKGROUP_ID", "CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUP_HEADER
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WORKGROUP_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" ADD CHECK ("POSITION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUP_HEADER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" ADD PRIMARY KEY ("POSITION", "WORKGROUP_ID", "CARTRIDGE_ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUP_NOTIFY
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WORKGROUP_NOTIFY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD CHECK ("NOTIFICATION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUP_NOTIFY
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD PRIMARY KEY ("NOTIFICATION_ID", "WORKGROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUP_ORDER_VIEW
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WORKGROUP_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD CHECK ("ORDER_TYPE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD CHECK ("ORDER_SOURCE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD CHECK ("ORDER_VIEW_SEQ_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUP_ORDER_VIEW
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD PRIMARY KEY ("WORKGROUP_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUP_SET
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_WORKGROUP_SET
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_SET" ADD CHECK ("STATE_POLICY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_SET" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUP_SET
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_SET" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table OM_WORKGROUPS
-- ----------------------------

-- ----------------------------
-- Uniques structure for table OM_WORKGROUPS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD UNIQUE ("WORKGROUP_MNEMONIC");

-- ----------------------------
-- Checks structure for table OM_WORKGROUPS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK (instr(WORKGROUP_MNEMONIC, ' ', 1, 1) = 0);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("WORKGROUP_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("SCHEDULE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("WORKGROUP_MNEMONIC" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("WORKGROUP_DESCRIPTION" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("REGION_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("STD_OFFSET_SECONDS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_OFFSET_SECONDS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_MONTH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_WEEK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_DAY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_MONTH" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_WEEK" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_DAY" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_HOUR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_MINUTE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_START_SECOND" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_HOUR" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_MINUTE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("DST_STOP_SECOND" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("LAST_CAL_START" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("LAST_CAL_STOP" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD CHECK ("LAST_CAL_RUN_START" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_WORKGROUPS
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD PRIMARY KEY ("WORKGROUP_ID");

-- ----------------------------
-- Indexes structure for table OM_XCHG_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table OM_XCHG_TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("XCHG_TABLE_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("PARTITIONING_TYPE" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("PK_INDEX_NAME" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("HAS_VIRTUAL_COLUMNS" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD CHECK ("HAS_GLOBAL_INDEXES" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OM_XCHG_TABLE
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_XCHG_TABLE" ADD PRIMARY KEY ("TABLE_NAME");

-- ----------------------------
-- Checks structure for table OM_XML_SCHEMA
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_XML_SCHEMA" ADD CHECK ((schema_file_name is not null) or
(schema_uri is not null));
ALTER TABLE "ORDERMGMT"."OM_XML_SCHEMA" ADD CHECK ("DATA_DICTIONARY_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XML_SCHEMA" ADD CHECK ("SCHEMA" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."OM_XML_SCHEMA" ADD CHECK ("CARTRIDGE_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table P6_SYNC_REQUEST
-- ----------------------------
CREATE INDEX "ORDERMGMT"."SYNC_INDEX"
ON "ORDERMGMT"."P6_SYNC_REQUEST" ("SYNC_LINE_ITEM_ID" ASC, "CRM_ORDER_ID" ASC, "CRM_ORDER_VERSION" ASC, "SYNC_EVENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table P6_TASK_EVENT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."EVENT_INDEX"
ON "ORDERMGMT"."P6_TASK_EVENT" ("CRM_ORDER_ID" ASC, "CRM_ORDER_VERSION" ASC, "LINE_ITEM_ID" ASC, "EVENT_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table SUB_CONFIG_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table SUB_CONFIG_INFO
-- ----------------------------
ALTER TABLE "ORDERMGMT"."SUB_CONFIG_INFO" ADD CHECK ("INNER_PACKAGE_SERIAL" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."SUB_CONFIG_INFO" ADD CHECK ("WORK_PLATFORM" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."SUB_CONFIG_INFO" ADD CHECK ("WORK_PLATFORM_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."SUB_CONFIG_INFO" ADD CHECK ("WORK_PLATFORM_MNEMONIC" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SUB_CONFIG_INFO
-- ----------------------------
ALTER TABLE "ORDERMGMT"."SUB_CONFIG_INFO" ADD PRIMARY KEY ("INNER_PACKAGE_SERIAL", "WORK_PLATFORM_ID");

-- ----------------------------
-- Indexes structure for table T_CACL_OM_ORDER_FLOW
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_OOF_BUREAU_CODE"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW" ("BUREAU_CODE" ASC, "SUB_BUREAU_CODE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_OOF_ID"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW" ("ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_OOF_ORDER_SEQ_ID"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW" ("ORDER_SEQ_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_OOF_PROCESS_DESC"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW" ("PROCESS_ID_DESCRIPTION" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_CACL_OM_ORDER_FLOW_OUT
-- ----------------------------
CREATE INDEX "ORDERMGMT"."IDX_TCO_ID"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" ("ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_TCO_ORDER_SEQ_ID"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" ("ORDER_SEQ_ID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_TCO_ORDER_TYPE"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" ("OUT_TYPE" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_TCO_PROCESS"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" ("PROCESS_ID_DESCRIPTION" ASC)
LOGGING
VISIBLE;
CREATE INDEX "ORDERMGMT"."IDX_TCO_RF"
ON "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_OUT" ("REFERENCE_NUMBER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_CACL_OM_ORDER_FLOW_TIME_LOG
-- ----------------------------
ALTER TABLE "ORDERMGMT"."T_CACL_OM_ORDER_FLOW_TIME_LOG" ADD CHECK ("ANA_START_SEQID" IS NOT NULL);

-- ----------------------------
-- Checks structure for table T_CACL_WOP_WPSRQ
-- ----------------------------
ALTER TABLE "ORDERMGMT"."T_CACL_WOP_WPSRQ" ADD CHECK ("P6_ORDER_ID" IS NOT NULL);
ALTER TABLE "ORDERMGMT"."T_CACL_WOP_WPSRQ" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table WL_LLR_ADMINSERVER
-- ----------------------------

-- ----------------------------
-- Checks structure for table WL_LLR_ADMINSERVER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."WL_LLR_ADMINSERVER" ADD CHECK ("XIDSTR" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table WL_LLR_ADMINSERVER
-- ----------------------------
ALTER TABLE "ORDERMGMT"."WL_LLR_ADMINSERVER" ADD PRIMARY KEY ("XIDSTR");

-- ----------------------------
-- Indexes structure for table ZZ_ROAD_EXPLORING
-- ----------------------------

-- ----------------------------
-- Checks structure for table ZZ_ROAD_EXPLORING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."ZZ_ROAD_EXPLORING" ADD CHECK ("ROAD_CODE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table ZZ_ROAD_EXPLORING
-- ----------------------------
ALTER TABLE "ORDERMGMT"."ZZ_ROAD_EXPLORING" ADD PRIMARY KEY ("ROAD_CODE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_$INSTALL$PLAN_ACTIONS" ADD FOREIGN KEY ("PLAN_ID") REFERENCES "ORDERMGMT"."OM_$INSTALL$PLAN" ("PLAN_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ACTIVE_NOTIFICATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID") REFERENCES "ORDERMGMT"."OM_HIST$NOTIFICATION" ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ACTIVE_NOTIFICATION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_APP_FUNC_WORKGROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD FOREIGN KEY ("APP_FUNCTION_MNEMONIC") REFERENCES "ORDERMGMT"."OM_APPLICATION_FUNCTION" ("APP_FUNCTION_MNEMONIC");
ALTER TABLE "ORDERMGMT"."OM_APP_FUNC_WORKGROUP" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ATTACHMENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ORDER_FLOW_REMARK_ID") REFERENCES "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ("ORDER_SEQ_ID", "HIST_SEQ_ID", "ORDER_FLOW_REMARK_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ATTACHMENT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ATTRIBUTE_CODE_LOOKUP" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_AUDIT_PURGE_ORDER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_ORDER" ADD FOREIGN KEY ("PURGE_SEQ_ID") REFERENCES "ORDERMGMT"."OM_AUDIT_PURGE" ("PURGE_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_AUDIT_PURGE_PARAM"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUDIT_PURGE_PARAM" ADD FOREIGN KEY ("PURGE_SEQ_ID") REFERENCES "ORDERMGMT"."OM_AUDIT_PURGE" ("PURGE_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_AUTOMATION_CORRELATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CORRELATION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "AUTOMATION_ID") REFERENCES "ORDERMGMT"."OM_AUTOMATION_CTX" ("ORDER_SEQ_ID", "AUTOMATION_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_AUTOMATION_CTX"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_AUTOMATION_CTX" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_BEHAVIOR"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR" ADD FOREIGN KEY ("PROCESS_POINT") REFERENCES "ORDERMGMT"."OM_PROCESS_POINT" ("PROCESS_POINT");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_BEHAVIOR_PROPERTIES" ADD FOREIGN KEY ("BEHAVIOR_ID") REFERENCES "ORDERMGMT"."OM_BEHAVIOR" ("BEHAVIOR_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_CALENDAR"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CALENDAR" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_CDT_PATH_SEGMENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ADD FOREIGN KEY ("PARENT_ID") REFERENCES "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ("SEGMENT_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_COORD_NODE_INSTANCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_COORD_NODE_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COORD_SET_ID") REFERENCES "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ("ORDER_SEQ_ID", "COORD_SET_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW" ("ORDER_VIEW_SEQ_ID");
ALTER TABLE "ORDERMGMT"."OM_CREATION_TASK_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_DATA_NOTIFICATION_DEF" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("SELECTOR_ID") REFERENCES "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_DD_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_EVENT_DEF"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EVENT_DEF" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_EXCEPTION_POSITION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_POSITION" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_JUMP" ("PROCESS_ID", "PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_JUMP" ("PROCESS_ID", "PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_TYPE_N_SOURCE" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_EXCEPTION_WORKGROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_JUMP" ("PROCESS_ID", "PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_EXCEPTION_WORKGROUP" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_EXTERNAL_TASK"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_EXTERNAL_TASK" ADD FOREIGN KEY ("RESPONSIBILITY_ID") REFERENCES "ORDERMGMT"."OM_RESPONSIBILITY" ("RESPONSIBILITY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_FALLOUT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_FALLOUT_GROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD FOREIGN KEY ("FALLOUT_GROUP_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT_GROUP" ("ID");
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_GROUP_MEMBER" ADD FOREIGN KEY ("FALLOUT_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_FALLOUT_NODE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD FOREIGN KEY ("FALLOUT_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT" ("ID");
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD FOREIGN KEY ("NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_FALLOUT_NODE" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMPENSATION_HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPENSATION_PLAN" ADD FOREIGN KEY ("COMPENSATION_ORDER_STATE_ID") REFERENCES "ORDERMGMT"."OM_STATE" ("STATE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$COMPONENT_STATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$COMPONENT_STATE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ("ORDER_SEQ_ID", "COMP_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$DATA_CHANGE_NOTIF" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID") REFERENCES "ORDERMGMT"."OM_HIST$NOTIFICATION" ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID", "NOTIFICATION_ID", "NOTIFICATION_HIST_SEQ_ID", "DATA_MODIFICATION_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$FALLOUT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMPENSATION_ID") REFERENCES "ORDERMGMT"."OM_ORDER_AMENDMENT" ("ORDER_SEQ_ID", "COMPENSATION_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "INITIATOR_HIST_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT" ADD FOREIGN KEY ("FALLOUT_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FALLOUT_NODE_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMPENSATION_ID") REFERENCES "ORDERMGMT"."OM_HIST$FALLOUT" ("ORDER_SEQ_ID", "COMPENSATION_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$FLOW"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$FLOW" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$MODEL_CLOB"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$MODEL_CLOB" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$NOTIFICATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");
ALTER TABLE "ORDERMGMT"."OM_HIST$NOTIFICATION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$ORDER_HEADER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_HEADER" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$ORDER_INSTANCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$ORDER_STATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$ORDER_STATE" ADD FOREIGN KEY ("STATE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HIST$STATUS_MAP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_HIST$STATUS_MAP" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_HOLIDAYS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_HOLIDAYS" ADD FOREIGN KEY ("REGION_ID") REFERENCES "ORDERMGMT"."OM_REGION" ("REGION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_JMS_EVENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_EVENT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_HIST_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_JMS_THREAD"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD FOREIGN KEY ("BEHAVIOR_ID", "TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK_BEHAVIOR" ("BEHAVIOR_ID", "TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_JMS_THREAD" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_JUMP_NOTIFICATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");
ALTER TABLE "ORDERMGMT"."OM_JUMP_NOTIFICATION" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_LOOKUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_LOOKUP" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_MNEMONIC_PATH"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MNEMONIC_PATH" ADD FOREIGN KEY ("SEGMENT_ID") REFERENCES "ORDERMGMT"."OM_CDT_PATH_SEGMENT" ("SEGMENT_ID") DEFERRABLE INITIALLY DEFERRED;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_MODEL_CLOB"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MODEL_CLOB" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("SELECTOR_ID") REFERENCES "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_MOT_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_NOTIFICATION_DEF"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_NOTIFICATION_DEF" ADD FOREIGN KEY ("RULE_ID") REFERENCES "ORDERMGMT"."OM_RULE_DEF" ("RULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMP_DECOMPOSITION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ("ORDER_SEQ_ID", "COMP_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLDEP_ITEM_DETAIL" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ("ORDER_SEQ_ID", "COMP_NODE_INDEX") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD FOREIGN KEY ("PREDECESSOR_ORDER_SEQ_ID", "PREDECESSOR_COMP_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ("ORDER_SEQ_ID", "COMP_NODE_INDEX") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_COMPLETION_DEPENDENCY" ADD FOREIGN KEY ("PATH_ID") REFERENCES "ORDERMGMT"."OM_MNEMONIC_PATH" ("PATH_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DATACHANGE_DEPEND_ITEM" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_DEPEND_DATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DATE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_DEPEND_DURATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPEND_DURATION" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_DEPENDENCY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORCH_PLAN" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_DEPENDENCY_PENDING" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID", "DEPENDENCY_HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID", "DEPENDENCY_HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ("PREDECESSOR_ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD FOREIGN KEY ("SUCCESSOR_ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_PRED" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPEND_SUCC" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_DEPENDENCY" ADD FOREIGN KEY ("ORDER_SEQ_ID", "DEPENDENCY_ID") REFERENCES "ORDERMGMT"."OM_ORCH_DEPENDENCY" ("ORDER_SEQ_ID", "DEPENDENCY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ITEM_HIER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD FOREIGN KEY ("ORDER_SEQ_ID", "PARENT_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ITEM_HIER" ADD FOREIGN KEY ("ORDER_SEQ_ID", "CHILD_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORCH_PLAN" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMP_HIST_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMP_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT" ("ORDER_SEQ_ID", "COMP_NODE_INDEX") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_COMPONENT_ITEM" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ("ORDER_SEQ_ID", "ITEM_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_ORDER_ITEM"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_ORDER_ITEM" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORCH_PLAN" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORCH_PLAN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORCH_PLAN" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_AMENDMENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_AMENDMENT_KEY" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD FOREIGN KEY ("ORDER_SEQ_ID", "COMPENSATION_HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_COMPENSATION_PLAN" ADD FOREIGN KEY ("COMPENSATION_ORDER_STATE_ID") REFERENCES "ORDERMGMT"."OM_STATE" ("STATE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ADD FOREIGN KEY ("ATTRIBUTE_TYPE") REFERENCES "ORDERMGMT"."OM_ATTRIBUTE_TYPE" ("ATTRIBUTE_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_FLOW"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE", "STATE_ID") REFERENCES "ORDERMGMT"."OM_TASK_STATE" ("TASK_ID", "TASK_TYPE", "STATE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_COORDINATOR" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_FLOW_REMARKS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD FOREIGN KEY ("REMARKS_TYPE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_REMARKS_TYPE" ("REMARKS_TYPE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_REMARKS" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_FLOW_START"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_FLOW_START" ADD FOREIGN KEY ("RULE_ID") REFERENCES "ORDERMGMT"."OM_RULE_DEF" ("RULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_HEADER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("ORD_STATE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE" ("ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HEADER" ADD FOREIGN KEY ("ORD_TARGET_STATE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_HIER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER" ADD FOREIGN KEY ("PARENT_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_HIER_KEY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_HIER_KEY" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_INSTANCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_SEQ_ID", "PARENT_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORDER_INSTANCE" ("ORDER_SEQ_ID", "ORDER_NODE_INDEX") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "ORDERMGMT"."OM_ORDER_INSTANCE" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_NODE_ANCESTRY" ADD FOREIGN KEY ("ORDER_SEQ_ID", "ORDER_NODE_INDEX") REFERENCES "ORDERMGMT"."OM_ORDER_INSTANCE" ("ORDER_SEQ_ID", "ORDER_NODE_INDEX") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_POS_INPUT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD FOREIGN KEY ("PROCESS_STATUS_ID", "PROCESS_ID", "PROCESS_POSITION_ID", "PROCESS_ID_TO", "PROCESS_POSITION_ID_TO") REFERENCES "ORDERMGMT"."OM_PROCESS_CONTROL" ("PROCESS_STATUS_ID", "PROCESS_ID", "PROCESS_POSITION_ID", "PROCESS_ID_TO", "PROCESS_POSITION_ID_TO");
ALTER TABLE "ORDERMGMT"."OM_ORDER_POS_INPUT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_EVENT_PENDING" ADD FOREIGN KEY ("PREV_STATE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_STATE_PENDING"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_STATE_PENDING" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TEMPLATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD FOREIGN KEY ("ORDER_NODE_ID", "T_PARENT_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID", "PARENT_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE" ADD FOREIGN KEY ("T_PARENT_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_ORDER_TEMPLATE_KEY" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TYPE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE" ADD FOREIGN KEY ("ORDER_TYPE_CATEGORY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_CATEGORY" ("ORDER_TYPE_CATEGORY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD FOREIGN KEY ("ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_SOURCE" ("ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD FOREIGN KEY ("ORDER_TYPE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE" ("ORDER_TYPE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD FOREIGN KEY ("CREATION_TASK_ID", "CREATION_TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ADD FOREIGN KEY ("STATE_POLICY_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_EVENT" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE_KEY" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_NODE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD FOREIGN KEY ("ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW" ("ORDER_VIEW_SEQ_ID");
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_NODE" ADD FOREIGN KEY ("LABEL_ID") REFERENCES "ORDERMGMT"."OM_VIEW_ORDER_NODE_LABEL" ("LABEL_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_NODE" ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_DD" ADD FOREIGN KEY ("VIEW_RULE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_DD" ("VIEW_RULE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OH" ADD FOREIGN KEY ("VIEW_RULE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OH" ("VIEW_RULE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_OT" ADD FOREIGN KEY ("VIEW_RULE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_OT" ("VIEW_RULE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_ORDER_VIEW_RULE_EXPR_DEF_VN" ADD FOREIGN KEY ("VIEW_RULE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_RULE_DEF_VN" ("VIEW_RULE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OSPOLICY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY" ADD FOREIGN KEY ("CARTRIDGE_ID") REFERENCES "ORDERMGMT"."OM_CARTRIDGE" ("CARTRIDGE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OSPOLICY_CONDITION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD FOREIGN KEY ("STATE_POLICY_ID", "STATE_ID", "TXN_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ("STATE_POLICY_ID", "STATE_ID", "TXN_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_CONDITION" ADD FOREIGN KEY ("STATE_POLICY_ID", "CONDITION_RULE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_RULE" ("STATE_POLICY_ID", "ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OSPOLICY_PERMISSION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD FOREIGN KEY ("STATE_POLICY_ID", "STATE_ID", "TXN_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ("STATE_POLICY_ID", "STATE_ID", "TXN_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD FOREIGN KEY ("WORKGROUP_SET_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUP_SET" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_PERMISSION" ADD FOREIGN KEY ("STATE_POLICY_ID", "PRIVILEGE_RULE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_RULE" ("STATE_POLICY_ID", "ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OSPOLICY_RULE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_RULE" ADD FOREIGN KEY ("STATE_POLICY_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY" ("ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OSPOLICY_STATE_TXN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD FOREIGN KEY ("STATE_POLICY_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD FOREIGN KEY ("STATE_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_STATE" ("ID");
ALTER TABLE "ORDERMGMT"."OM_OSPOLICY_STATE_TXN" ADD FOREIGN KEY ("TXN_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY_TXN" ("ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("SELECTOR_ID") REFERENCES "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_OT_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_POS_NOTIFICATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD FOREIGN KEY ("STATE_ID") REFERENCES "ORDERMGMT"."OM_STATE" ("STATE_ID");
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");
ALTER TABLE "ORDERMGMT"."OM_POS_NOTIFICATION" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_CONTROL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD FOREIGN KEY ("PROCESS_ID_TO", "PROCESS_POSITION_ID_TO") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_CONTROL" ADD FOREIGN KEY ("REPORTING_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_JUMP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD FOREIGN KEY ("REPORTING_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_JUMP" ADD FOREIGN KEY ("PROCESS_ID_TO", "PROCESS_POSITION_ID_TO") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_POSITION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_POSITION_MILESTONE" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_START_POSITION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");
ALTER TABLE "ORDERMGMT"."OM_PROCESS_START_POSITION" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_START_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_PROCESS_STATUS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_PROCESS_STATUS" ADD FOREIGN KEY ("STATUS_CATEGORY_ID") REFERENCES "ORDERMGMT"."OM_STATUS_CATEGORY" ("STATUS_CATEGORY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_REGION_HIERARCHY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD FOREIGN KEY ("REGION_ID") REFERENCES "ORDERMGMT"."OM_REGION" ("REGION_ID");
ALTER TABLE "ORDERMGMT"."OM_REGION_HIERARCHY" ADD FOREIGN KEY ("ANCESTOR_REGION_ID") REFERENCES "ORDERMGMT"."OM_REGION" ("REGION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_RELATED_ORDER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD FOREIGN KEY ("ORDER_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HEADER" ("ORDER_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_RELATED_ORDER" ADD FOREIGN KEY ("PARENT_TASK_STATE_ID") REFERENCES "ORDERMGMT"."OM_STATE" ("STATE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_RULE_SOURCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_SOURCE" ADD FOREIGN KEY ("RULE_ID") REFERENCES "ORDERMGMT"."OM_RULE_DEF" ("RULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_RULE_TASK"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_RULE_TASK" ADD FOREIGN KEY ("RULE_ID") REFERENCES "ORDERMGMT"."OM_RULE_DEF" ("RULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_SCHEDULE_DETAIL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_DETAIL" ADD FOREIGN KEY ("SCHEDULE_ID") REFERENCES "ORDERMGMT"."OM_SCHEDULE" ("SCHEDULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SCHEDULE_EXCEPTIONS" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_SQL_POINTER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SQL_POINTER" ADD FOREIGN KEY ("SID", "LINE") REFERENCES "ORDERMGMT"."OM_SQL_LOG" ("SID", "LINE") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_STATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_STATE" ADD FOREIGN KEY ("STATE_CATEGORY_ID") REFERENCES "ORDERMGMT"."OM_STATE_CATEGORY" ("STATE_CATEGORY_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_SUBPROC_STATUS_MAP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD FOREIGN KEY ("PROCESS_ID", "PROCESS_POSITION_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_POSITION" ("PROCESS_ID", "PROCESS_POSITION_ID");
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD FOREIGN KEY ("SUBPROCESS_ID", "SUBPROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_JUMP" ("PROCESS_ID", "PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD FOREIGN KEY ("TASK_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");
ALTER TABLE "ORDERMGMT"."OM_SUBPROC_STATUS_MAP" ADD FOREIGN KEY ("REPORTING_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_SUBPROCESS_START"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD FOREIGN KEY ("RULE_ID") REFERENCES "ORDERMGMT"."OM_RULE_DEF" ("RULE_ID");
ALTER TABLE "ORDERMGMT"."OM_SUBPROCESS_START" ADD FOREIGN KEY ("PROCESS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS" ("PROCESS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD FOREIGN KEY ("SORT_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_PIVOT_NODE" ("ORDER_NODE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_BEHAVIOR"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD FOREIGN KEY ("BEHAVIOR_ID") REFERENCES "ORDERMGMT"."OM_BEHAVIOR" ("BEHAVIOR_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_BEHAVIOR" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_COORD_NODE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TEMPLATE" ("ORDER_NODE_ID", "ORDER_TYPE_ID", "ORDER_SOURCE_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_HIER" ("ORDER_NODE_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_COORD_NODE" ADD FOREIGN KEY ("ORDER_NODE_ID") REFERENCES "ORDERMGMT"."OM_PIVOT_NODE" ("ORDER_NODE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_FALLOUT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD FOREIGN KEY ("FALLOUT_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT" ("ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_FALLOUT_GROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD FOREIGN KEY ("FALLOUT_GROUP_ID") REFERENCES "ORDERMGMT"."OM_FALLOUT_GROUP" ("ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_FALLOUT_GROUP" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_NOTIFICATION"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_NOTIFICATION" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_ORDER_VIEW"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW" ("ORDER_VIEW_SEQ_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_STATE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD FOREIGN KEY ("STATE_ID") REFERENCES "ORDERMGMT"."OM_STATE" ("STATE_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_STATE" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_STATUS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_TASK_STATUS" ADD FOREIGN KEY ("PROCESS_STATUS_ID") REFERENCES "ORDERMGMT"."OM_PROCESS_STATUS" ("PROCESS_STATUS_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_TASK_WORKGROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");
ALTER TABLE "ORDERMGMT"."OM_TASK_WORKGROUP" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_UNDO_BRANCH_ROOT"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_UNDO_BRANCH_ROOT" ADD FOREIGN KEY ("ORDER_SEQ_ID", "HIST_SEQ_ID") REFERENCES "ORDERMGMT"."OM_HIST$ORDER_HEADER" ("ORDER_SEQ_ID", "HIST_SEQ_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_ATTRIBUTES"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ATTRIBUTES" ADD FOREIGN KEY ("ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID") REFERENCES "ORDERMGMT"."OM_GENERIC_MNEMONIC" ("CLASS", "ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ADD FOREIGN KEY ("CLASS", "ID") REFERENCES "ORDERMGMT"."OM_GENERIC_MNEMONIC" ("CLASS", "ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_MULTIQUERY_PREFERENCE" ADD FOREIGN KEY ("PREFERENCE_ID") REFERENCES "ORDERMGMT"."OM_USER_PREFERENCES" ("PREFERENCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_NOTIFY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_NOTIFY" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD FOREIGN KEY ("CLASS", "ID") REFERENCES "ORDERMGMT"."OM_GENERIC_MNEMONIC" ("CLASS", "ID");
ALTER TABLE "ORDERMGMT"."OM_USER_ORD_LIST_COLUMN" ADD FOREIGN KEY ("PREFERENCE_ID") REFERENCES "ORDERMGMT"."OM_USER_PREFERENCES" ("PREFERENCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD FOREIGN KEY ("USERNAME", "SAVED_PREFERENCE_ID", "PREFERENCE_CLASS", "PREFERENCE_ID", "PREFERENCE_USAGE") REFERENCES "ORDERMGMT"."OM_USER_GENERIC_PREFERENCE" ("USERNAME", "PREFERENCE_ID", "CLASS", "ID", "PREFERENCE_USAGE");
ALTER TABLE "ORDERMGMT"."OM_USER_PREF_ATTRIBUTE" ADD FOREIGN KEY ("ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID") REFERENCES "ORDERMGMT"."OM_GENERIC_MNEMONIC" ("CLASS", "ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_QUERY_FILTERS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD FOREIGN KEY ("ATTR_MNEMONIC_CLASS", "ATTR_MNEMONIC_ID") REFERENCES "ORDERMGMT"."OM_GENERIC_MNEMONIC" ("CLASS", "ID");
ALTER TABLE "ORDERMGMT"."OM_USER_QUERY_FILTERS" ADD FOREIGN KEY ("PREFERENCE_ID") REFERENCES "ORDERMGMT"."OM_USER_PREFERENCES" ("PREFERENCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_TASK_PREFERENCE"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD FOREIGN KEY ("TASK_ID", "TASK_TYPE") REFERENCES "ORDERMGMT"."OM_EXTERNAL_TASK" ("TASK_ID", "TASK_TYPE");
ALTER TABLE "ORDERMGMT"."OM_USER_TASK_PREFERENCE" ADD FOREIGN KEY ("PREFERENCE_ID") REFERENCES "ORDERMGMT"."OM_USER_PREFERENCES" ("PREFERENCE_ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_USER_WORKGROUP"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_USER_WORKGROUP" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW_NODE" ("ORDER_NODE_ID", "ORDER_VIEW_SEQ_ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_VIEW_INSIGNIFICANT_SEL" ADD FOREIGN KEY ("SELECTOR_ID") REFERENCES "ORDERMGMT"."OM_INSIGNIFICANT_SELECTOR" ("ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WGSET_WORKGROUPS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" ADD FOREIGN KEY ("WORKGROUP_SET_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUP_SET" ("ID") ON DELETE CASCADE;
ALTER TABLE "ORDERMGMT"."OM_WGSET_WORKGROUPS" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUP_FILTER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_FILTER" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUP_HEADER"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_HEADER" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUP_NOTIFY"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_NOTIFY" ADD FOREIGN KEY ("NOTIFICATION_ID") REFERENCES "ORDERMGMT"."OM_NOTIFICATION_DEF" ("NOTIFICATION_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD FOREIGN KEY ("WORKGROUP_ID") REFERENCES "ORDERMGMT"."OM_WORKGROUPS" ("WORKGROUP_ID");
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_VIEW_SEQ_ID") REFERENCES "ORDERMGMT"."OM_ORDER_VIEW" ("ORDER_VIEW_SEQ_ID");
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_ORDER_VIEW" ADD FOREIGN KEY ("ORDER_TYPE_ID", "ORDER_SOURCE_ID") REFERENCES "ORDERMGMT"."OM_ORDER_TYPE_N_SOURCE" ("ORDER_TYPE_ID", "ORDER_SOURCE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUP_SET"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUP_SET" ADD FOREIGN KEY ("STATE_POLICY_ID") REFERENCES "ORDERMGMT"."OM_OSPOLICY" ("ID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_WORKGROUPS"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD FOREIGN KEY ("REGION_ID") REFERENCES "ORDERMGMT"."OM_REGION" ("REGION_ID");
ALTER TABLE "ORDERMGMT"."OM_WORKGROUPS" ADD FOREIGN KEY ("SCHEDULE_ID") REFERENCES "ORDERMGMT"."OM_SCHEDULE" ("SCHEDULE_ID");

-- ----------------------------
-- Foreign Key structure for table "ORDERMGMT"."OM_XML_SCHEMA"
-- ----------------------------
ALTER TABLE "ORDERMGMT"."OM_XML_SCHEMA" ADD FOREIGN KEY ("DATA_DICTIONARY_ID") REFERENCES "ORDERMGMT"."OM_ORDER_DATA_DICTIONARY" ("DATA_DICTIONARY_ID");
